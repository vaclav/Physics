// MPS plugin
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.4.+'
    }
}

// Git
plugins {
    id 'base'
    id 'maven-publish'
	id 'org.ajoberstar.grgit' version '4.1.0' apply false
    id "de.undercouch.download" version "4.1.1"
}

// Versions
ext.mpsVersion = project.hasProperty("mpsVersion") ? project.property('mpsVersion') : '2020.3'
ext.iets3Version = project.hasProperty("iets3Version") ? project.property('iets3Version') : "$mpsVersion.+"
ext.ecmascript4mpsVersion = project.hasProperty("ecmascript4mpsVersion") ? project.property('ecmascript4mpsVersion') : "development-SNAPSHOT"

// Optional properties
def mpsDir = project.hasProperty("mpsDir") ? project.property('mpsDir') : "$buildDir/mps"

configurations {
    mps
	mpsArtifacts
    genjsArtifacts
    junitAnt
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
	mpsArtifacts "org.iets3:opensource:$iets3Version"
	mpsArtifacts "com.github.mar9000:ecmascript4mps:$ecmascript4mpsVersion"
	mpsArtifacts "com.github.cdelabou:iets3.genjs:$mpsVersion"
    junitAnt 'org.apache.ant:ant-junit:1.10.9'
}

repositories {
    mavenLocal()
	maven {
		url 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
	}
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

// Git
import org.ajoberstar.grgit.Grgit

// Make BuildLanguages and GenerateLibrariesXml available
import de.itemis.mps.gradle.*

// Tools to determine architecture
import org.apache.tools.ant.taskdefs.condition.Os

ext.artifactsDir = file("$rootDir/artifacts")

// ==== resolving java 11 ====
def jdkHome
def downloadJdk = false


// Sdk specified
if (project.hasProperty("jdk")) {
    // No further check
    jdkHome = project.property('jdk')
}

// Current java version is 11
else if (JavaVersion.current() == JavaVersion.VERSION_11) {
    // Perfect then -> use it
    jdkHome = System.getProperty('java.home')
}

// Neither specified, but MPS installation provided with a jbr folder !
else if (project.hasProperty("mpsDir") && file("$mpsDir/jbr").exists()) {
    // That was close
    jdkHome = "$mpsDir/jbr"
}

else {
    // No option left but to download it :c
    // We set a flag so we wait for a task to actually need it
    downloadJdk = true
	jdkHome = "$buildDir/jbrsdk"
}

task resolveJdk(type: Download) {
	doFirst {
	    println "Java 11, which is required to build dependencies, was not found."
	    println "We will download one for you."
		mkdir file(jdkHome)
	}
	
	def arch = System.properties['sun.arch.data.model'].equals("64") ? "x64" : "x86"
	def os
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        os = "windows"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
    	os = "linux"
    } else {
    	os = "osx"
    }

    def filename = "jbrsdk-11_0_8-$os-$arch-b1145.3.tar.gz"

    src "https://dl.bintray.com/jetbrains/intellij-jbr/$filename"
	dest "$buildDir/$filename"
	overwrite false

}

task unpackJdk(type: Copy, dependsOn: resolveJdk) {
    from tarTree(resources.gzip(resolveJdk.dest))
    into "$buildDir"
}


// Default arguments for ant scripts
def buildScriptClasspath = project.configurations.junitAnt.fileCollection { true } +
	project.files("$jdkHome/lib/tools.jar")

// Download MPS
task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        if (!project.hasProperty("mpsDir")) {
            configurations.mps.resolve().collect { zipTree(it) }
        }
    }
    into mpsDir
}

// Project
version = "$mpsVersion.0"

// Args to the builds scripts, contains both home and artifacts directory 
def defaultScriptArgs = [
	'mps_home'                          : mpsDir,

    // Generated artifacts
	'iets3.github.opensource.genjs.artifacts': "$artifactsDir/org.iets3.opensource.genjs",
	'iets3.github.opensource.artifacts' : "$artifactsDir/org.iets3.opensource",
    'mbeddr.artifacts.platform'         : "$artifactsDir/com.mbeddr.platform",
	'ecmascript4mps.artifacts'  		: "$artifactsDir/ecmascript4mps",

    // Misc
	'build.dir'                         : rootDir,
	'version'                           : version
]

// Declare them as global variable for the MPS plugin (see https://github.com/mbeddr/mps-gradle-plugin)
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = buildScriptClasspath
ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = file("$jdkHome/bin/java")

// ===== iets3.opensource + ecmascript4mps + iets3.genjs =====
task resolveMpsArtifacts(type: Copy) {
    from {
        configurations.mpsArtifacts.resolve().collect { zipTree(it) }
    }
    into artifactsDir
}

// ===== java runtime dependencies =====
task packageJavaRuntime {
	dependsOn ":solutions:jetbrains.mps.samples.Physics.runtime:lib:shadowAndCopy"
}

// ===== all artifacts (iets3, mbeddr, genjs) =====
task resolveArtifacts(dependsOn: [packageJavaRuntime, resolveMpsArtifacts]) { }

// ===== build artifacts =====
task buildLanguages(type: BuildLanguages, dependsOn: [resolveArtifacts]) {
    if (!project.hasProperty("mpsDir")) dependsOn "resolveMps"
    if (downloadJdk) dependsOn "unpackJdk"

	script "$rootDir/build.xml"
}

task buildIde(type: BuildLanguages, dependsOn: [buildLanguages]) {
    if (!project.hasProperty("mpsDir")) dependsOn "resolveMps"
    if (downloadJdk) dependsOn "unpackJdk"

	script "$rootDir/buildIde.xml"
}

task buildDistribution(type: BuildLanguages, dependsOn: [buildIde]) {
    if (!project.hasProperty("mpsDir")) dependsOn "resolveMps"
    if (downloadJdk) dependsOn "unpackJdk"

	script "$rootDir/buildDistribution.xml"
    targets("assemble")
}


// ===== libraries.xml to have mps see the artifacts =====
task generateLibrariesXml(type: GenerateLibrariesXml) {
    description "Read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
	overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('.mps/libraries.xml')
}

// ===== export as maven package =====
task packageLanguages(type: Zip, dependsOn: buildLanguages) {
    description ""
    archiveBaseName = 'jetbrains.mps.samples.Physics'
    from artifactsDir
    include 'jetbrains.mps.samples.Physics/**'
}

publishing {
    publications {
        genJs(MavenPublication) {
            groupId 'jetbrains.mps.samples'
            artifactId 'Physics'
            artifact packageLanguages
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.genjsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
    }
}

defaultTasks 'buildLanguages'