// MPS plugin
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.4.+'
    }
}

// Git
plugins {
    id 'base'
    id 'maven-publish'
	id 'org.ajoberstar.grgit' version '4.1.0' apply false
}

// Versions
ext.mpsVersion = project.hasProperty("mpsVersion") ? project.property('mpsVersion') : '2020.2.2'

// Optional properties
def mpsDir = project.hasProperty("mpsDir") ? project.property('mpsDir') : "$buildDir/mps"

configurations {
    mps
	mpsArtifacts
    genjsArtifacts
    junitAnt
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
	mpsArtifacts "org.iets3:opensource:2020.1.4598.8281546"
	mpsArtifacts "org.mar9000:ecmascript4mps:2020.2.1"
	genjsArtifacts "org.iets3.opensource:genjs:$mpsVersion.+"
    junitAnt 'org.apache.ant:ant-junit:1.10.9'
}

repositories {
    mavenLocal()
	maven {
		url 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
	}
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

import org.ajoberstar.grgit.Grgit

// Make BuildLanguages and GenerateLibrariesXml available
import de.itemis.mps.gradle.*

def jdkHome = project.hasProperty("jdk") ? project.property('jdk') : System.getProperty('java.home')

ext.artifactsDir = file("$rootDir/artifacts")


// Default arguments for ant scripts
def buildScriptClasspath = project.configurations.junitAnt.fileCollection { true } +
	project.files("$jdkHome/lib/tools.jar")

// Download MPS
task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        if (!project.hasProperty("mpsDir")) {
            configurations.mps.resolve().collect { zipTree(it) }
        }
    }
    into mpsDir
}

// Project
version = "$mpsVersion.0"

// Args to the builds scripts, contains both home and artifacts directory 
def defaultScriptArgs = [
	'mps_home'                          : mpsDir,

    // Generated artifacts
	'iets3.github.opensource.genjs.artifacts': "$artifactsDir/iets3.opensource.genjs",
	'iets3.github.opensource.artifacts' : "$artifactsDir/org.iets3.opensource",
    'mbeddr.artifacts.platform'         : "$artifactsDir/com.mbeddr.platform",
	'ecmascript4mps.artifacts'  		: "$artifactsDir/ecmascript4mps",

    // Misc
	'build.dir'                         : rootDir,
	'version'                           : version
]

// Declare them as global variable for the MPS plugin (see https://github.com/mbeddr/mps-gradle-plugin)
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = buildScriptClasspath
ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = file("$jdkHome/bin/java")

// ===== iets3.opensource + ecmascript4mps =====
task resolveMpsArtifacts(type: Copy) {
    from {
        configurations.mpsArtifacts.resolve().collect { zipTree(it) }
    }
    into artifactsDir
}

// ===== iets3.genjs =====
def genJsHome = "$buildDir/dependencies/iets3.genjs"
task cloneGenjs {
	doLast {
		try {
			Grgit.open(dir: genJsHome)
			println "iets3.genjs folder exists, assuming clone to be done"
		} catch(Exception e) {
			def grgit = Grgit.clone(
				dir: genJsHome,
				uri: "https://github.com/banilaste/iets3.genjs"
			)
			println grgit.describe()
		}
	}
}

task buildGenjs(type: BuildLanguages, dependsOn: [cloneGenjs, resolveMpsArtifacts]) {
    if (!project.hasProperty("mpsDir")) {
        dependsOn "resolveMps"
    }
	script "$genJsHome/build.xml"
}

// ===== java runtime dependencies =====
task packageJavaRuntime {
	dependsOn ":dependencies:java-runtime:shadowJar"
}

// ===== iets3.genjs =====
task resolveMavenGenjs(type: Copy) {
    from {
        configurations.genjsArtifacts.resolve().collect { zipTree(it) }
    }
    into artifactsDir
}

task resolveGenjs(dependsOn: [resolveMpsArtifacts]) {
    try {
        // Try to resolve
        configurations.genjsArtifacts.resolve()
        // Resolvable -> copy actual content
        dependsOn "resolveMavenGenjs"
    } catch(Exception e) {
        // Not resolvable -> build from source
        println "unable to find iets.genjs, building from source"
        dependsOn "buildGenjs"
    }
}

// ===== all artifacts (iets3, mbeddr, genjs if any) =====
task resolveArtifacts(dependsOn: [packageJavaRuntime, resolveGenjs, resolveMpsArtifacts]) { }

// ===== build artifacts =====
task buildLanguages(type: BuildLanguages, dependsOn: [resolveArtifacts]) {
    if (!project.hasProperty("mpsDir")) {
        dependsOn "resolveMps"
    }
	script "$rootDir/build.xml"
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    description "Read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
	overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('.mps/libraries.xml')
}

task packageLanguages(type: Zip, dependsOn: buildLanguages) {
    description ""
    archiveBaseName = 'jetbrains.mps.samples.Physics'
    from artifactsDir
    include 'jetbrains.mps.samples.Physics/**'
}

publishing {
    publications {
        genJs(MavenPublication) {
            groupId 'jetbrains.mps.samples'
            artifactId 'Physics'
            artifact packageLanguages
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.genjsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
    }
}

defaultTasks 'buildLanguages'