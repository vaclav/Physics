package jetbrains.mps.samples.Physics.java.common.vectors;

/*Generated by MPS */

import java.math.MathContext;
import java.math.BigDecimal;

/**
 * General purpose 3D vector as used in the Physics interpreter
 */
public class InternalVector extends VectorLike {
  private static final MathContext ctx = MathContext.DECIMAL128;
  public static final BigDecimal almostZero = new BigDecimal("0.00000001");
  public static final InternalVector ZERO = new InternalVector(0, 0, 0);

  private final BigDecimal x;
  private final BigDecimal y;
  private final BigDecimal z;

  public InternalVector(BigDecimal x, BigDecimal y, BigDecimal z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  public InternalVector(Number x, Number y, Number z) {
    this(BigDecimalHelper.of(x), BigDecimalHelper.of(y), BigDecimalHelper.of(z));
  }

  public BigDecimal getX() {
    return this.x;
  }
  public BigDecimal getY() {
    return this.y;
  }
  public BigDecimal getZ() {
    return this.z;
  }

  /**
   * Get an internal vector from cylindrical coordinates
   */
  public static InternalVector fromCylindrical(Number radialLength, Number phi, Number z) {
    double phiDouble = phi.doubleValue();
    double x = radialLength.doubleValue() * Math.cos(phiDouble);
    double y = radialLength.doubleValue() * Math.sin(phiDouble);
    return new InternalVector(x, y, z);
  }

  /**
   * Get an internal vector from spherical coordinates
   */
  public static InternalVector fromSpherical(Number length, Number theta, Number phi) {
    double lengthDouble = length.doubleValue();
    double thetaDouble = theta.doubleValue();
    double phiDouble = phi.doubleValue();
    double sinTheta = Math.sin(thetaDouble);

    return new InternalVector(lengthDouble * sinTheta * Math.cos(phiDouble), lengthDouble * sinTheta * Math.sin(phiDouble), lengthDouble * Math.cos(thetaDouble));

  }


}
