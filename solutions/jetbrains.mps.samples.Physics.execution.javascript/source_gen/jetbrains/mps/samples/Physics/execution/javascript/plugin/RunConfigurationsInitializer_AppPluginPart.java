package jetbrains.mps.samples.Physics.execution.javascript.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.part.ApplicationPluginPart;
import java.util.Deque;
import jetbrains.mps.execution.api.configurations.ConfigTypeEnvoy;
import java.util.ArrayDeque;
import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.extensions.ExtensionPoint;
import com.intellij.execution.configurations.ConfigurationType;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.icons.AllIcons;
import java.util.Iterator;

public class RunConfigurationsInitializer_AppPluginPart extends ApplicationPluginPart {
  private Deque<ConfigTypeEnvoy> myRegisteredKinds = new ArrayDeque<ConfigTypeEnvoy>();
  private List<RuntimeConfigurationProducer> myRegisteredProducers = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
  public RunConfigurationsInitializer_AppPluginPart() {
  }
  @Override
  public void init() {
    // register kinds 
    ExtensionPoint<ConfigurationType> configurationExtensionPoint = Extensions.getRootArea().getExtensionPoint(ConfigurationType.CONFIGURATION_TYPE_EP);
    {
      ConfigTypeEnvoy runConfigurationKind = new ConfigTypeEnvoy("Web Application", AllIcons.RunConfigurations.Application, "Web Application", "application that runs inside a browser");
      runConfigurationKind.addFactoryFor("Physics Web Simulation", PhysicsWebSimulation_Configuration.class);
      RunConfigurationsInitializer_AppPluginPart.this.myRegisteredKinds.add(runConfigurationKind);
      configurationExtensionPoint.registerExtension(runConfigurationKind);
    }

    // add foreign factories 

    // register creators 
    ExtensionPoint<RuntimeConfigurationProducer> producerExtensionPoint = Extensions.getArea(null).getExtensionPoint(RuntimeConfigurationProducer.RUNTIME_CONFIGURATION_PRODUCER);
    for (ConfigurationType ext : configurationExtensionPoint.getExtensions()) {
      if ("Web Application".equals(ext.getId())) {
        List<RuntimeConfigurationProducer> configurationProducers = PhysicsWebSimulation_Producer.getProducers(ext);
        ListSequence.fromList(RunConfigurationsInitializer_AppPluginPart.this.myRegisteredProducers).addSequence(ListSequence.fromList(configurationProducers));
        for (RuntimeConfigurationProducer producer : ListSequence.fromList(configurationProducers)) {
          producerExtensionPoint.registerExtension(producer);
        }
        break;
      }
    }
  }
  @Override
  public void dispose() {
    ExtensionPoint<ConfigurationType> configurationExtensionPoint = Extensions.getRootArea().getExtensionPoint(ConfigurationType.CONFIGURATION_TYPE_EP);

    // invalidate factories from this plugin for types declared elsewhere (we have no idea whether that plugins would be reloaded/invalidated as well) 

    // factories from this plugin would get invalidated along with configuration types, no need to do that explicitly (although it wouldn't hurt either) 
    for (Iterator<ConfigTypeEnvoy> it = RunConfigurationsInitializer_AppPluginPart.this.myRegisteredKinds.descendingIterator(); it.hasNext();) {
      ConfigTypeEnvoy configKind = it.next();
      configKind.invalidate();
      configurationExtensionPoint.unregisterExtension(configKind);
    }
    RunConfigurationsInitializer_AppPluginPart.this.myRegisteredKinds.clear();

    ExtensionPoint<RuntimeConfigurationProducer> producerExtensionPoint = Extensions.getRootArea().getExtensionPoint(RuntimeConfigurationProducer.RUNTIME_CONFIGURATION_PRODUCER);
    for (RuntimeConfigurationProducer producer : ListSequence.fromList(RunConfigurationsInitializer_AppPluginPart.this.myRegisteredProducers)) {
      producerExtensionPoint.unregisterExtension(producer);
    }
    ListSequence.fromList(RunConfigurationsInitializer_AppPluginPart.this.myRegisteredProducers).clear();
  }
}
