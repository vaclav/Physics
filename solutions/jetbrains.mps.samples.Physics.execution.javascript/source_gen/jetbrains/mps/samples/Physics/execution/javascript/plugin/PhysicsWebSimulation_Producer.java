package jetbrains.mps.samples.Physics.execution.javascript.plugin;

/*Generated by MPS */

import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.execution.configurations.ConfigurationType;
import com.intellij.execution.configurations.ConfigurationFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.execution.api.configurations.BaseMpsProducer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.plugins.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public final class PhysicsWebSimulation_Producer {

  public static List<RuntimeConfigurationProducer> getProducers(ConfigurationType configurationType) {
    ConfigurationFactory configurationFactory = null;
    // assume the one with id matching configuration kind is the primary one. 
    // In fact, though technically we support more that one factory per type (aka 'foreign' factories), all factories 
    // bear same id (due to overlook of template author, I believe), and we effectively take the fist registerd one, which I don't 
    // mind as 'foreign' factories do not work anyway. 
    for (ConfigurationFactory f : configurationType.getConfigurationFactories()) {
      if (f.getId().equals(configurationType.getId())) {
        configurationFactory = f;
        break;
      }
    }
    if (configurationFactory == null) {
      configurationFactory = configurationType.getConfigurationFactories()[0];
    }
    List<RuntimeConfigurationProducer> creators = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
    ListSequence.fromList(creators).addElement(new ProducerPart_NodeSimulation_z59tqr_a(configurationFactory));
    ListSequence.fromList(creators).addElement(new ProducerPart_Node_z59tqr_b(configurationFactory));
    return creators;
  }

  public static final class ProducerPart_NodeSimulation_z59tqr_a extends BaseMpsProducer<SNode> {
    public ProducerPart_NodeSimulation_z59tqr_a(ConfigurationFactory configurationFactory) {
      super(configurationFactory);
    }

    @Override
    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), CONCEPTS.Simulation$Gw);
    }

    @Override
    protected PhysicsWebSimulation_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(MPSPsiElement.createFor(source, getMpsProject()));
      PhysicsWebSimulation_Configuration configuration = ((PhysicsWebSimulation_Configuration) getConfigurationFactory().createConfiguration("" + "Simulation " + SPropertyOperations.getString(source, PROPS.name$MnvL), getContext().getRunManager().getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNodePointer().setNode(source);
      return configuration;
    }


    @Override
    public ProducerPart_NodeSimulation_z59tqr_a clone() {
      return (ProducerPart_NodeSimulation_z59tqr_a) super.clone();
    }
  }
  public static final class ProducerPart_Node_z59tqr_b extends BaseMpsProducer<SNode> {
    public ProducerPart_Node_z59tqr_b(ConfigurationFactory configurationFactory) {
      super(configurationFactory);
    }

    @Override
    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), CONCEPTS.BaseConcept$gP);
    }

    @Override
    protected PhysicsWebSimulation_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(MPSPsiElement.createFor(source, getMpsProject()));
      SNode ancestor = SNodeOperations.getNodeAncestor(source, CONCEPTS.Simulation$Gw, false, false);
      if ((ancestor == null)) {
        return null;
      }
      PhysicsWebSimulation_Configuration configuration = ((PhysicsWebSimulation_Configuration) getConfigurationFactory().createConfiguration("" + "Simulation " + SPropertyOperations.getString(ancestor, PROPS.name$MnvL), getContext().getRunManager().getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNodePointer().setNode(ancestor);
      return configuration;

    }


    @Override
    public ProducerPart_Node_z59tqr_b clone() {
      return (ProducerPart_Node_z59tqr_b) super.clone();
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Simulation$Gw = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, "jetbrains.mps.samples.Physics.structure.Simulation");
    /*package*/ static final SConcept BaseConcept$gP = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
