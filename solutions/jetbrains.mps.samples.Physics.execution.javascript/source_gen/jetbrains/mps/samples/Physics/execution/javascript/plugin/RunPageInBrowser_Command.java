package jetbrains.mps.samples.Physics.execution.javascript.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.project.Project;
import com.intellij.execution.process.ProcessHandler;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SRepository;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.vfs.IFile;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.facets.GenerationTargetFacet;
import com.intellij.ide.BrowserUtil;
import java.io.OutputStream;
import java.io.IOException;

public class RunPageInBrowser_Command {
  private Project myProject_Project;
  public RunPageInBrowser_Command() {
  }
  public RunPageInBrowser_Command setProject_Project(Project project) {
    if (project != null) {
      myProject_Project = project;
    }
    return this;
  }

  public ProcessHandler createProcess(final SNodeReference nodePointer, final SRepository repository) throws ExecutionException {
    final Wrappers._T<IFile> outputLocation = new Wrappers._T<IFile>();
    repository.getModelAccess().runReadAction(() -> {
      SNode resolved = nodePointer.resolve(repository);
      SModel model = resolved.getModel();
      GenerationTargetFacet facet = model.getModule().getFacet(GenerationTargetFacet.class);

      outputLocation.value = facet.getOutputLocation(model).findChild(resolved.getName().replace("_", "__").replace(" ", "_") + ".html");
    });

    if (outputLocation.value == null) {
      throw new ExecutionException("unable to find target file");
    }

    BrowserUtil.open(outputLocation.value.getPath());

    return new ProcessHandler() {
      @Override
      protected void destroyProcessImpl() {
      }

      @Override
      protected void detachProcessImpl() {
      }

      @Override
      public boolean detachIsDefault() {
        return true;
      }

      @Override
      public boolean isProcessTerminated() {
        return true;
      }

      @Override
      public OutputStream getProcessInput() {
        return new OutputStream() {
          @Override
          public void write(int p1) throws IOException {
          }
        };
      }
    };
  }



}
