package jetbrains.mps.samples.Physics.test.dimensions;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.test.runtime.CheckExpectedMessageRunnable;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.project.ProjectBase;

@MPSLaunch
public class TestUnitCheck_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(TestUnitCheck_Test.class, "${jetbrains.mps.samples.Physics.home}", "r:9a3ea34d-0c77-435f-a352-ec4c196ca592(jetbrains.mps.samples.Physics.test.dimensions@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public TestUnitCheck_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_NodeDimensionRuntimeErrorCheck3675770290334303671() throws Throwable {
    new TestBody(this).test_NodeDimensionRuntimeErrorCheck3675770290334303671();
  }
  @Test
  public void test_NodeCannotBeAppliedToTypesCheck3675770290334303673() throws Throwable {
    new TestBody(this).test_NodeCannotBeAppliedToTypesCheck3675770290334303673();
  }
  @Test
  public void test_NodeDimensionRuntimeErrorCheck3675770290334309929() throws Throwable {
    new TestBody(this).test_NodeDimensionRuntimeErrorCheck3675770290334309929();
  }
  @Test
  public void test_NodeXZComponentsNotComparableCheck6576997179991215709() throws Throwable {
    new TestBody(this).test_NodeXZComponentsNotComparableCheck6576997179991215709();
  }
  @Test
  public void test_NodeDoesNotMatchWithCheck3675770290334790775() throws Throwable {
    new TestBody(this).test_NodeDoesNotMatchWithCheck3675770290334790775();
  }
  @Test
  public void test_NodeZRhoNotComparableCheck6576997179991224256() throws Throwable {
    new TestBody(this).test_NodeZRhoNotComparableCheck6576997179991224256();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }


    public void test_NodeDimensionRuntimeErrorCheck3675770290334303671() throws Exception {
      SNode nodeToCheck = getRealNodeById("3675770290332758288");
      SNode operation = getRealNodeById("3675770290334303671");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:1aa329e2-69b0-497d-9e52-7232bd3e6e58(jetbrains.mps.samples.Physics.dimensions.typesystem)", "3675770290331832058"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeCannotBeAppliedToTypesCheck3675770290334303673() throws Exception {
      SNode nodeToCheck = getRealNodeById("3675770290332758288");
      SNode operation = getRealNodeById("3675770290334303673");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2527679671886454795"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeDimensionRuntimeErrorCheck3675770290334309929() throws Exception {
      SNode nodeToCheck = getRealNodeById("3675770290330261421");
      SNode operation = getRealNodeById("3675770290334309929");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:1aa329e2-69b0-497d-9e52-7232bd3e6e58(jetbrains.mps.samples.Physics.dimensions.typesystem)", "3675770290331832058"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeXZComponentsNotComparableCheck6576997179991215709() throws Exception {
      SNode nodeToCheck = getRealNodeById("3675770290330313127");
      SNode operation = getRealNodeById("6576997179991215709");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:34dc5c2b-d71f-4a9a-9011-74cd28ad1a10(jetbrains.mps.samples.Physics.typesystem)", "6576997179988904745"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeDoesNotMatchWithCheck3675770290334790775() throws Exception {
      SNode nodeToCheck = getRealNodeById("3675770290330321920");
      SNode operation = getRealNodeById("3675770290334790775");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:1aa329e2-69b0-497d-9e52-7232bd3e6e58(jetbrains.mps.samples.Physics.dimensions.typesystem)", "8009150056676241711"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeZRhoNotComparableCheck6576997179991224256() throws Exception {
      SNode nodeToCheck = getRealNodeById("6576997179991219892");
      SNode operation = getRealNodeById("6576997179991224256");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:34dc5c2b-d71f-4a9a-9011-74cd28ad1a10(jetbrains.mps.samples.Physics.typesystem)", "6576997179988907324"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }

  }
}
