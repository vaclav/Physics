package jetbrains.mps.samples.Physics.java.runtime;

/*Generated by MPS */

import processing.core.PGraphics;
import processing.core.PApplet;

public class CompositeRendererCallback implements Renderer.RendererCallback {
  private Simulation[] simulations;
  private PGraphics[] graphics;

  private int viewWidth;

  public CompositeRendererCallback(Simulation... simulations) {
    this.simulations = simulations;
  }

  @Override
  public void setup(Renderer renderer) {
    for (int i = 0; i < simulations.length; i++) {
      simulations[i].setup(renderer);
    }

    this.viewWidth = renderer.width / simulations.length;
    this.graphics = new PGraphics[simulations.length];

    for (int i = 0; i < simulations.length; i++) {
      this.graphics[i] = renderer.createGraphics(viewWidth, renderer.height, PApplet.P3D);
    }
  }

  @Override
  public void keyPressed(int code) {
    for (int i = 0; i < simulations.length; i++) {
      simulations[i].keyPressed(code);
    }
  }

  @Override
  public void render(PApplet applet, PGraphics context) {
    for (int i = 0; i < simulations.length; i++) {
      graphics[i].beginDraw();
      simulations[i].render(applet, graphics[i]);
      graphics[i].endDraw();

      applet.image(graphics[i], viewWidth * i, 0);
    }
  }


  @Override
  public void frameResized(PApplet app, int w, int h) {
    this.viewWidth = app.width / simulations.length;

    for (int i = 0; i < simulations.length; i++) {
      this.graphics[i] = app.createGraphics(viewWidth, app.height, PApplet.P3D);
    }
  }
}
