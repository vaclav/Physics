package jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder;

/*Generated by MPS */

import java.util.HashMap;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.Fixture;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.BoxFixture;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.SphereFixture;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.CollisionReaction;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.TraceHandler;

public class PropertiesBuilder {
  private HashMap<PropKey, Object> properties = new HashMap();

  public void set(PropKey name, Object value) {
    properties.put(name, value);
  }

  public <T> T get(PropKey key) {
    return (T) (properties.get(key));
  }


  public void applyOn(World world, PhysicalEntity entity) {
    // Fixture 
    Fixture entityFixture;
    if ("box".equals((String) get(PropKey.SHAPE))) {
      entityFixture = new BoxFixture(world, get(PropKey.BOX_X), get(PropKey.BOX_Y), get(PropKey.BOX_Z), get(PropKey.TEXTURE));
    } else {
      entityFixture = new SphereFixture(world, get(PropKey.SPHERE_RADIUS), get(PropKey.TEXTURE));
    }
    entityFixture.setEmitLight(get(PropKey.EMIT_LIGHT));
    entity.setFixture(entityFixture);

    // Creating mass representation 
    entityFixture.bindToBody(entity.getBody(), entity.getMass().doubleValue());

    //  Add entity to the world 
    world.addEntity(entity);


    // Collision reaction 
    entity.properties().setCollisionReaction((CollisionReaction) get(PropKey.COLLISION_REACT));
    entity.properties().setPauseOnCollision(get(PropKey.PAUSE_ON_COLLISION));

    // Trace 
    final TraceHandler traceHandler = get(PropKey.TRACE);
    if (traceHandler != null) {
      entity.properties().setTraceHandler(traceHandler);
    }
  }
}
