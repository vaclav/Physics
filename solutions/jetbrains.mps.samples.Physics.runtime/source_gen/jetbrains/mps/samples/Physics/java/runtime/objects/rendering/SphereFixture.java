package jetbrains.mps.samples.Physics.java.runtime.objects.rendering;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import processing.core.PApplet;
import org.ode4j.ode.DMass;
import org.ode4j.ode.OdeHelper;
import org.ode4j.ode.DGeom;

public class SphereFixture extends Fixture {
  private float radius;

  public SphereFixture(World world, Number radius, Color texture) {
    super(world, texture);
    this.radius = radius.floatValue();
  }
  @Override
  public void render(PApplet ctx) {
    super.render(ctx);
    ctx.sphere(radius);
  }
  @Override
  protected DMass buildMass() {
    DMass mass = OdeHelper.createMass();
    mass.setSphere(Fixture.DENSITY, radius);
    return mass;
  }


  @Override
  protected void setVolume(double volume) {
    radius = (float) Math.pow(volume * 3 / (Math.PI * 4), 0.3333);
  }
  @Override
  public DGeom buildGeometry() {
    return OdeHelper.createSphere(world.getSpace(), radius);
  }
  @Override
  public double getVolume() {
    return Math.PI * Math.pow(radius, 3) * 4 / 3;
  }
}
