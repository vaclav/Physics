package jetbrains.mps.samples.Physics.java.runtime.objects.rendering;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
import com.badlogic.gdx.graphics.g3d.Model;
import com.badlogic.gdx.graphics.VertexAttributes;
import com.badlogic.gdx.graphics.g3d.ModelInstance;
import org.ode4j.ode.DMass;
import org.ode4j.ode.OdeHelper;
import org.ode4j.ode.DGeom;

public class BoxFixture extends Fixture {
  private float width;
  private float height;
  private float depth;

  public BoxFixture(World world, Number width, Number height, Number depth, Texture texture) {
    super(world, texture);
    this.width = width.floatValue();
    this.height = height.floatValue();
    this.depth = depth.floatValue();
  }


  @Override
  public void setup(float scale) {
    ModelBuilder builder = new ModelBuilder();
    Model boxModel = builder.createBox(width * scale, height * scale, depth * scale, texture.getMaterial(this.doEmitLight()), VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal | VertexAttributes.Usage.TextureCoordinates);
    this.modelInstance = new ModelInstance(boxModel);
    super.setup(scale);
  }

  @Override
  protected DMass buildMass(double massValue) {
    DMass mass = OdeHelper.createMass();
    mass.setMass(massValue);
    mass.setBox(massValue / getVolume(), width, height, depth);
    return mass;
  }


  @Override
  public double getVolume() {
    return width * height * depth;
  }
  @Override
  protected void setVolume(double volume) {
    double factor = Math.pow(volume / getVolume(), 1.0 / 3.0);
    width = (float) (width * factor);
    height = (float) (height * factor);
    depth = (float) (depth * factor);
  }
  @Override
  public DGeom buildGeometry() {
    return OdeHelper.createBox(world.getSpace(), width, height, depth);
  }
}
