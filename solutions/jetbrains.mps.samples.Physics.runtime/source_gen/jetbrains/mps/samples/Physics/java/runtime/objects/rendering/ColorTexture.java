package jetbrains.mps.samples.Physics.java.runtime.objects.rendering;

/*Generated by MPS */

import processing.core.PApplet;
import processing.core.PShape;
import processing.core.PGraphics;

public class ColorTexture extends Texture implements RenderableMetric {
  private Color stroke;
  private Color fill;


  public ColorTexture(Color fill, Color stroke) {
    this.fill = fill;
    this.stroke = stroke;
  }

  @Override
  public void setup(PApplet applet, PShape shape, boolean emissive) {
    shape.setFill(fill != null);
    if (fill != null) {
      if (emissive) {
        shape.setEmissive(fill.toInt(applet));
      }

      shape.setFill(fill.toInt(applet));
    }

    shape.setStroke(stroke != null);
    if (stroke != null) {
      shape.setStroke(stroke.toInt(applet));
    }
  }

  @Override
  public Texture mergeWith(Texture other, float participation) {
    if (other instanceof ColorTexture) {
      ColorTexture colorTexture = as_8d58a4_a0a0a0a8(other, ColorTexture.class);
      return new ColorTexture(Color.merge(fill, colorTexture.getFill(), participation), Color.merge(stroke, colorTexture.getStroke(), participation));
    } else if (participation > 0.5) {
      return this;
    } else {
      return other;
    }
  }


  public Color getFill() {
    return this.fill;
  }
  public Color getStroke() {
    return this.stroke;
  }
  @Override
  public float render(PGraphics context, float topY, float lineHeight) {
    if (stroke != null) {
      context.stroke(stroke.toInt(context));
    } else {
      context.noStroke();
    }
    if (fill != null) {
      context.fill(fill.toInt(context));
    } else {
      context.noFill();
    }
    context.rect(0, topY, lineHeight, lineHeight - 3);
    return 0;
  }
  private static <T> T as_8d58a4_a0a0a0a8(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
