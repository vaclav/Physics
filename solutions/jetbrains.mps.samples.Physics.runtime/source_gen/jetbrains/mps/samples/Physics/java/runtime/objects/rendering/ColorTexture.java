package jetbrains.mps.samples.Physics.java.runtime.objects.rendering;

/*Generated by MPS */

import com.badlogic.gdx.graphics.g3d.Material;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;

public class ColorTexture extends Texture implements RenderableMetric {
  private Color stroke;
  private Color fill;

  public ColorTexture(Color fill, Color stroke) {
    this.fill = fill;
    this.stroke = stroke;
  }

  @Override
  public Material getMaterial(boolean emissive) {
    Material material = new Material();
    if (fill != null) {
      material.set(ColorAttribute.createDiffuse(fill.toGdxColor()));
      if (emissive) {
        // TODO is that it?
        material.set(ColorAttribute.createAmbient(fill.toGdxColor()));
      }
    }

    if (stroke != null) {
      material.set(ColorAttribute.createSpecular(stroke.toGdxColor()));
    }

    return material;
  }

  @Override
  public Texture mergeWith(Texture other, float participation) {
    if (other instanceof ColorTexture) {
      ColorTexture colorTexture = as_8d58a4_a0a0a0a7(other, ColorTexture.class);
      return new ColorTexture(Color.merge(fill, colorTexture.getFill(), participation), Color.merge(stroke, colorTexture.getStroke(), participation));
    } else if (participation > 0.5) {
      return this;
    } else {
      return other;
    }
  }


  public Color getFill() {
    return this.fill;
  }
  public Color getStroke() {
    return this.stroke;
  }
  @Override
  public float render(Batch batch, ShapeRenderer shapeRenderer, float leftX, float topY, float lineHeight) {
    batch.end();

    shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
    shapeRenderer.setColor(fill.toGdxColor());
    shapeRenderer.rect(leftX, topY, lineHeight, lineHeight - 3);
    shapeRenderer.end();

    batch.begin();
    return 0;
  }
  private static <T> T as_8d58a4_a0a0a0a7(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
