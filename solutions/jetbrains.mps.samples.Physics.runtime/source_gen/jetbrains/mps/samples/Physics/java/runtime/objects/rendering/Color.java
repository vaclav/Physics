package jetbrains.mps.samples.Physics.java.runtime.objects.rendering;

/*Generated by MPS */

import processing.core.PApplet;
import processing.core.PGraphics;

public class Color implements RenderableMetric {
  public final int r;
  public final int g;
  public final int b;

  public Color(int r, int g, int b) {
    this.r = r;
    this.g = g;
    this.b = b;
  }

  public Color merge(float selfRatio, Color color) {
    float rev = 1 - selfRatio;
    return new Color((int) (r * selfRatio + color.r * rev), (int) (g * selfRatio + color.g * rev), (int) (b * selfRatio + color.b * rev));
  }

  public int toInt(PApplet applet) {
    return applet.color(r, g, b);
  }

  public int toInt(PGraphics applet) {
    return applet.color(r, g, b);
  }

  public static Color merge(Color left, Color right, float leftRatio) {
    if (left == null && right == null) {
      return null;
    }

    float rev = 1 - leftRatio;
    if (left == null) {
      left = new Color(0, 0, 0);
    }
    if (right == null) {
      right = new Color(0, 0, 0);
    }

    return new Color((int) (left.r * leftRatio + right.r * rev), (int) (left.g * leftRatio + right.g * rev), (int) (left.b * leftRatio + right.b * rev));
  }
  @Override
  public float render(PGraphics context, float topY, float lineHeight) {
    context.noStroke();
    context.fill(r, g, b);
    context.rect(0, topY, lineHeight, lineHeight - 3);
    return 0;
  }
}
