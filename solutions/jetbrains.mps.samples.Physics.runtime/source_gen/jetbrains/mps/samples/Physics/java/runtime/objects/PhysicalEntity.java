package jetbrains.mps.samples.Physics.java.runtime.objects;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import jetbrains.mps.samples.Physics.java.runtime.Renderable;
import org.ode4j.ode.DBody;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.Fixture;
import java.math.BigDecimal;
import com.badlogic.gdx.graphics.g3d.environment.PointLight;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder.PropertiesBuilder;
import java.util.ArrayList;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.Force;
import org.ode4j.ode.OdeHelper;
import org.ode4j.math.DVector3C;
import org.ode4j.math.DVector3;
import jetbrains.mps.samples.Physics.java.common.vectors.ForceMode;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.ForceModeApplication;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g3d.Environment;
import com.badlogic.gdx.graphics.g3d.ModelBatch;
import org.ode4j.math.DMatrix3C;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;
import java.util.List;
import jetbrains.mps.samples.Physics.java.common.vectors.BigDecimalHelper;

public class PhysicalEntity<T extends SystemScope> extends VectorLike implements EntityLike, Renderable {
  private DBody body;
  private World world;
  private Fixture fixture;
  private T scope;

  private String name;
  private BigDecimal massCached;
  private boolean disabled = false;

  private PointLight light = new PointLight();

  private PhysicalEntityProperties properties = new PhysicalEntityProperties();

  /**
   * Object containing the fixture properties
   */
  protected PropertiesBuilder propertiesBuilder = new PropertiesBuilder();

  /**
   * Forces applied on the entity
   */
  private ArrayList<Force> forces = new ArrayList();

  public PhysicalEntity(World world, String name, T scope) {
    this.world = world;
    this.name = name;
    // Creating body
    body = OdeHelper.createBody(world.getWorld());
    this.scope = scope;
  }


  /**
   * Remove entity from the world
   */
  public void disable() {
    fixture.getGeometry().disable();
    body.disable();
    this.disabled = true;
  }

  public boolean isDisabled() {
    return this.disabled;
  }

  public void applyForces(double time) {
    if (disabled) {
      return;
    }

    for (Force force : forces) {
      DVector3C forceLinear = force.linearForce(world, scope, this, time);
      DVector3C moment = force.moment(world, scope, this, time);
      DVector3C applicationPoint = force.applicationPoint(world, scope, this, time);
      int mode = force.forceMode();

      if (forceLinear == null) {
        forceLinear = new DVector3();
      }

      if (moment == null) {
        moment = new DVector3();
      }

      if (applicationPoint == null) {
        applicationPoint = new DVector3();
        mode |= ForceMode.APPLICATION_POINT_RELATIVE;
      }

      ForceModeApplication.apply(mode, this, forceLinear, moment, applicationPoint);
    }
  }

  public void updateLights(float scale, VectorLike scaledOffset) {
    if (disabled) {
      return;
    }
    if (light != null) {
      DVector3C position = body.getPosition();
      VectorLike lightPosition = VectorHelper.fromDVector3C(position).mul(scale).add(scaledOffset);
      light.set(Color.WHITE, VectorHelper.toVector3(lightPosition), 1000);
    }
  }


  @Override
  public void setup(Environment env, float scale) {
    this.fixture.setup(scale);
    if (fixture.doEmitLight()) {
      light = new PointLight();
      env.add(light);
    }
  }

  public void render(ModelBatch batch, Environment env, float scale, VectorLike scaledOffset) {
    if (disabled) {
      return;
    }

    DVector3C position = body.getPosition();
    VectorLike translation = VectorHelper.fromDVector3C(position).mul(scale).add(scaledOffset);

    // https://en.wikipedia.org/wiki/Rotation_matrix
    DMatrix3C bodyRotation = body.getRotation();
    Quaternion quaternion = new Quaternion().setFromMatrix(new Matrix3(new float[]{(float) bodyRotation.get00(), (float) bodyRotation.get01(), (float) bodyRotation.get02(), (float) bodyRotation.get10(), (float) bodyRotation.get11(), (float) bodyRotation.get12(), (float) bodyRotation.get20(), (float) bodyRotation.get21(), (float) bodyRotation.get22()}));

    fixture.modelInstance.transform.set(new Matrix4().translate(VectorHelper.toVector3(translation)).rotate(quaternion));
    batch.render(fixture.modelInstance, env);

    // Display trace if any
    if (properties.getTraceHandler() != null) {
      properties.getTraceHandler().render(position, scale, scaledOffset, world.isPaused());
    }
  }
  public DBody getBody() {
    return body;
  }
  public List<Force> getForces() {
    return forces;
  }

  public void setMass(Number value) {
    massCached = BigDecimalHelper.of(value);
  }

  @Override
  public BigDecimal getX() {
    return BigDecimal.valueOf(this.getBody().getPosition().get0());
  }
  @Override
  public BigDecimal getY() {
    return BigDecimal.valueOf(this.getBody().getPosition().get1());
  }
  @Override
  public BigDecimal getZ() {
    return BigDecimal.valueOf(this.getBody().getPosition().get2());
  }

  public BigDecimal getMass() {
    if (massCached == null) {
      massCached = BigDecimal.valueOf(body.getMass().getMass());
    }
    return massCached;
  }

  public VectorLike getPosition() {
    return VectorHelper.fromDVector3C(getBody().getPosition());
  }

  public void setPosition(VectorLike pos) {
    this.getBody().setPosition(VectorHelper.fromInternal(pos));
  }

  public void setVelocity(VectorLike pos) {
    this.getBody().setLinearVel(VectorHelper.fromInternal(pos));
  }


  public VectorLike getVelocity() {
    return VectorHelper.fromDVector3C(getBody().getLinearVel());
  }


  /**
   * Initialize the object properties
   */
  public void init(T scope, World world) {
    // To override
  }

  public void build() {
    // Build fixture and other properties
    this.propertiesBuilder.applyOn(world, this);
  }

  public Fixture getFixture() {
    return this.fixture;
  }
  public void setFixture(Fixture fixture) {
    this.fixture = fixture;
  }

  public String getName() {
    return this.name;
  }
  public PropertiesBuilder getPropertiesBuilder() {
    return this.propertiesBuilder;
  }

  public PhysicalEntityProperties properties() {
    return this.properties;
  }
  public void setName(String name) {
    this.name = name;
  }
}
