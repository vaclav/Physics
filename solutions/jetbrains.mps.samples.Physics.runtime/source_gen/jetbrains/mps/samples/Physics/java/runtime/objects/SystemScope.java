package jetbrains.mps.samples.Physics.java.runtime.objects;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import java.util.ArrayList;
import org.ode4j.math.DMatrix3C;
import java.math.BigDecimal;
import org.ode4j.math.DVector3;
import org.ode4j.ode.OdeMath;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import java.math.MathContext;

public abstract class SystemScope extends VectorLike implements EntityLike {
  protected ArrayList<EntityLike> nested = new ArrayList();

  protected VectorLike initialPosition;
  protected VectorLike initialVelocity;
  protected DMatrix3C initialRotation;
  protected BigDecimal computedMass;

  public SystemScope(VectorLike position, VectorLike velocity, DMatrix3C rotation) {
    this.initialPosition = position;
    this.initialVelocity = velocity;
    this.initialRotation = rotation;
  }

  public ArrayList<EntityLike> getNested() {
    return this.nested;
  }


  protected <E extends EntityLike> E withEntity(E entity) {
    this.nested.add(entity);
    return entity;
  }


  /**
   * Compute the absolute initial position compared to a relative one
   */
  public VectorLike getAbsoluteInitialPosition(VectorLike position) {
    if (initialRotation != null) {
      DVector3 result = new DVector3();
      OdeMath.dMultiply0_331(result, initialRotation, VectorHelper.fromInternal(position));
      position = VectorHelper.fromDVector3C(result);
    }

    return position.add(initialPosition);

  }

  public VectorLike getAbsoluteInitialVelocity(VectorLike velocity) {
    // Rotated velocity + initial velocity
    if (initialRotation != null) {
      DVector3 result = new DVector3();
      OdeMath.dMultiply0_331(result, initialRotation, VectorHelper.fromInternal(velocity));
      velocity = VectorHelper.fromDVector3C(result);
    }

    return velocity.add(initialVelocity);
  }

  public VectorLike getInitialVelocity() {
    return this.initialVelocity;
  }

  @Override
  public void build() {
    for (EntityLike entity : nested) {
      entity.build();
    }
  }

  @Override
  public BigDecimal getMass() {
    if (computedMass == null) {
      computedMass = BigDecimal.ZERO;
      for (EntityLike entity : nested) {
        computedMass = computedMass.add(entity.getMass());
      }
    }
    return computedMass;
  }

  @Override
  public VectorLike getPosition() {
    // Return position of the scope as center of mass
    VectorLike position = InternalVector.ZERO;
    for (EntityLike entity : nested) {
      position = position.add(entity.getPosition().mul(entity.getMass()));
    }
    return position.mul(BigDecimal.ONE.divide(getMass(), MathContext.DECIMAL32));
  }

  @Override
  public BigDecimal getX() {
    return initialPosition.getX();
  }
  @Override
  public BigDecimal getY() {
    return initialPosition.getY();
  }
  @Override
  public BigDecimal getZ() {
    return initialPosition.getZ();
  }
}
