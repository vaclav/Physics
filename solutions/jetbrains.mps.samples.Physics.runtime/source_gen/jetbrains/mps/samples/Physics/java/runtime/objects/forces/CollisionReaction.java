package jetbrains.mps.samples.Physics.java.runtime.objects.forces;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import org.ode4j.ode.DGeom;

public interface CollisionReaction {

  /**
   * Priority of the reaction, high value means high priority
   */
  int getPriority();


  /**
   * Whether different reactions with small priority should be ignored after the current priority
   */
  boolean preventDifferentReaction();


  /**
   * Apply the reaction on both objects, the target object refer to the object the current reaction is applied on
   */
  void react(World world, PhysicalEntity target, DGeom targetGeom, PhysicalEntity otherObject, DGeom otherGeom);

  static void apply(World world, PhysicalEntity e1, DGeom g1, PhysicalEntity e2, DGeom g2) {
  }

  static boolean hasPriority(PhysicalEntity self, PhysicalEntity compared) {
    CollisionReaction selfReaction = self.properties().getCollisionReaction();
    CollisionReaction cmpReaction = compared.properties().getCollisionReaction();

    return selfReaction.getPriority() > cmpReaction.getPriority() || (selfReaction.getPriority() == cmpReaction.getPriority() && self.getMass().compareTo(compared.getMass()) >= 0);
  }
}
