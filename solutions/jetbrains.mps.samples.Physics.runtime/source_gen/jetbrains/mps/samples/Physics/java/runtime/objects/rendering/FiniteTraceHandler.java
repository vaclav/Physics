package jetbrains.mps.samples.Physics.java.runtime.objects.rendering;

/*Generated by MPS */

import org.ode4j.math.DVector3C;
import processing.core.PGraphics;

public class FiniteTraceHandler extends TraceHandler {
  public static final int MAX_CAPACITY = 600;

  private float[][] content;
  private int offset;
  private int currentCapacity;

  public FiniteTraceHandler(Color aspect) {
    super(aspect);
    this.content = new float[MAX_CAPACITY][3];
    this.offset = 0;
    this.currentCapacity = 0;
  }

  private void writeAt(DVector3C positions, int cursor, float scale) {
    content[cursor][0] = (float) (positions.get0() * scale);
    content[cursor][1] = (float) (positions.get1() * scale);
    content[cursor][2] = (float) (positions.get2() * scale);
  }

  @Override
  protected void write(DVector3C positions, float scale) {
    if (currentCapacity < MAX_CAPACITY) {
      // Write and increase capacity
      writeAt(positions, currentCapacity, scale);
      currentCapacity += 1;
    } else {
      // Write and shift offset
      writeAt(positions, offset, scale);
      offset += 1;
      if (offset >= MAX_CAPACITY) {
        offset = 0;
      }
    }
  }

  @Override
  protected void vertices(PGraphics ctx) {
    for (int i = 0; i < currentCapacity; i++) {
      int cursor = (i + offset) % MAX_CAPACITY;
      ctx.vertex(content[cursor][0], content[cursor][1], content[cursor][2]);
    }
  }
}
