package jetbrains.mps.samples.Physics.java.runtime;

/*Generated by MPS */

import com.badlogic.gdx.InputAdapter;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;

public class CompositeRenderer extends InputAdapter implements ApplicationListener {
  private Simulation[] simulations;

  public CompositeRenderer(Simulation... simulations) {
    this.simulations = simulations;
  }

  @Override
  public void create() {
    Gdx.input.setInputProcessor(this);
    for (Simulation sim : simulations) {
      sim.create();
    }
  }

  @Override
  public void resize(int width, int height) {
    int viewWidth = width / simulations.length;
    int offset = 0;
    for (Simulation sim : simulations) {
      sim.resize(viewWidth, height);
      sim.setOffsetX(offset);
      offset += viewWidth;
    }
  }

  @Override
  public boolean keyDown(int code) {
    // Spacebar
    if (code == Input.Keys.SPACE) {
      boolean paused = simulations[0].isPaused();
      for (Simulation sim : simulations) {
        if (paused) {
          sim.resume();
        } else {
          sim.pause();
        }
      }
    }
    return super.keyDown(code);
  }

  @Override
  public void render() {
    for (Simulation sim : simulations) {
      sim.render();
    }
  }

  @Override
  public void pause() {
    for (Simulation sim : simulations) {
      sim.pause();
    }
  }
  @Override
  public void resume() {
    for (Simulation sim : simulations) {
      sim.resume();
    }
  }
  @Override
  public void dispose() {
    for (Simulation sim : simulations) {
      sim.dispose();
    }
  }
}
