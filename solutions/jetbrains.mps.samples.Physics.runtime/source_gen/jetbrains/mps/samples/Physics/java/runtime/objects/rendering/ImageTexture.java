package jetbrains.mps.samples.Physics.java.runtime.objects.rendering;

/*Generated by MPS */

import com.badlogic.gdx.graphics.g3d.Material;
import com.badlogic.gdx.Net;
import com.badlogic.gdx.files.FileHandle;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.URI;
import java.net.http.HttpResponse;
import java.io.IOException;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;

public class ImageTexture extends Texture {
  private String url;

  public ImageTexture(String url) {
    this.url = url;
  }

  @Override
  public Material getMaterial(boolean emissive) {
    if (url.startsWith("https://") || url.startsWith("http://")) {
      Net.HttpRequest request = new Net.HttpRequest(Net.HttpMethods.GET);
      request.setUrl(url);
      final FileHandle tmpFile = FileHandle.tempFile("texture");
      try {
        // this is probably not the proper way to do it (gdx has its own http client and loaders, though it does not support combining them it seems)
        HttpClient.newHttpClient().send(HttpRequest.newBuilder().GET().uri(URI.create(url)).build(), HttpResponse.BodyHandlers.ofFile(tmpFile.file().toPath()));
      } catch (IOException | InterruptedException e) {
        Gdx.app.error("images", "failed to load", e);
        throw new RuntimeException(e);
      }
      return new Material(TextureAttribute.createDiffuse(new com.badlogic.gdx.graphics.Texture(tmpFile)));
    } else {
      return new Material(TextureAttribute.createDiffuse(new com.badlogic.gdx.graphics.Texture(url)));
    }
  }

  @Override
  public Texture mergeWith(Texture other, float participation) {
    // No simple way to merge an image texture
    if (participation > 0.5) {
      return this;
    } else {
      return other;
    }
  }
}
