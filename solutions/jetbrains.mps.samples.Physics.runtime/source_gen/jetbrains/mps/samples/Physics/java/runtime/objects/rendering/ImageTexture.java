package jetbrains.mps.samples.Physics.java.runtime.objects.rendering;

/*Generated by MPS */

import com.badlogic.gdx.graphics.g3d.Material;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute;
import com.badlogic.gdx.Net;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;

public class ImageTexture extends Texture {
  private String url;
  private com.badlogic.gdx.graphics.Texture loadedImage;

  public ImageTexture(String url) {
    this.url = url;
  }

  @Override
  public Material getMaterial(boolean emissive) {
    final Material material = new Material();
    material.set(ColorAttribute.createDiffuse(Color.WHITE));
    material.set(FloatAttribute.createShininess(1.f));

    // TODO check this
    if (emissive) {
      material.set(ColorAttribute.createAmbient(Color.WHITE));
    }

    if (url.startsWith("https://") || url.startsWith("http://")) {
      Net.HttpRequest request = new Net.HttpRequest(Net.HttpMethods.GET);
      request.setUrl(url);
      Gdx.net.sendHttpRequest(request, new Net.HttpResponseListener() {
        @Override
        public void handleHttpResponse(Net.HttpResponse httpResponse) {
          final FileHandle tmpFile = FileHandle.tempFile("texture");
          tmpFile.write(httpResponse.getResultAsStream(), false);
          Gdx.app.postRunnable(() -> {
            loadedImage = new com.badlogic.gdx.graphics.Texture(tmpFile);
            material.set(TextureAttribute.createDiffuse(loadedImage));
          });
        }
        @Override
        public void failed(Throwable t) {
          Gdx.app.error("images", "failed to load", t);
        }
        @Override
        public void cancelled() {
          Gdx.app.log("images", "load cancelled");
        }
      });
    } else {
      loadedImage = new com.badlogic.gdx.graphics.Texture(url);
    }


    return material;
  }


  @Override
  public Texture mergeWith(Texture other, float participation) {
    // No simple way to merge an image texture
    if (participation > 0.5) {
      return this;
    } else {
      return other;
    }
  }
}
