package jetbrains.mps.samples.Physics.runtime.objects;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.runtime.vectors.VectorLike;
import java.util.ArrayList;
import java.math.BigDecimal;
import jetbrains.mps.samples.Physics.runtime.vectors.InternalVector;

public abstract class SystemScope extends VectorLike implements EntityLike {
  protected ArrayList<EntityLike> nested = new ArrayList();

  protected VectorLike initialPosition;
  protected VectorLike initialVelocity;
  protected BigDecimal computedMass;

  public SystemScope(VectorLike position, VectorLike velocity) {
    this.initialPosition = position;
    this.initialVelocity = velocity;
  }

  public ArrayList<EntityLike> getNested() {
    return this.nested;
  }


  protected <E extends EntityLike> E withEntity(E entity) {
    this.nested.add(entity);
    return entity;
  }

  public VectorLike getInitialPosition() {
    return this.initialPosition;
  }
  public VectorLike getInitialVelocity() {
    return this.initialVelocity;
  }

  @Override
  public BigDecimal getMass() {
    if (computedMass == null) {
      computedMass = BigDecimal.ZERO;
      for (EntityLike entity : nested) {
        computedMass = computedMass.add(entity.getMass());
      }
    }
    return computedMass;
  }

  @Override
  public VectorLike getPosition() {
    // Return position of the scope as center of mass 
    VectorLike position = InternalVector.ZERO;
    for (EntityLike entity : nested) {
      position = position.add(entity.getPosition().mul(entity.getMass()));
    }
    return position.mul(BigDecimal.ONE.divide(getMass()));
  }

  @Override
  public BigDecimal getX() {
    return initialPosition.getX();
  }
  @Override
  public BigDecimal getY() {
    return initialPosition.getY();
  }
  @Override
  public BigDecimal getZ() {
    return initialPosition.getZ();
  }
}
