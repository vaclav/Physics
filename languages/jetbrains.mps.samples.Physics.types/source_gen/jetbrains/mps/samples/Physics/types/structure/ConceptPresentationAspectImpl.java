package jetbrains.mps.samples.Physics.types.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_DirectionType;
  private ConceptPresentation props_ForceType;
  private ConceptPresentation props_ObjectType;
  private ConceptPresentation props_VectorType;
  private ConceptPresentation props_WorldType;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.DirectionType:
        if (props_DirectionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("type of object giving a direction for a vector");
          cpb.rawPresentation("direction");
          props_DirectionType = cpb.create();
        }
        return props_DirectionType;
      case LanguageConceptSwitch.ForceType:
        if (props_ForceType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("force");
          props_ForceType = cpb.create();
        }
        return props_ForceType;
      case LanguageConceptSwitch.ObjectType:
        if (props_ObjectType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("type of a physical object");
          cpb.rawPresentation("object");
          props_ObjectType = cpb.create();
        }
        return props_ObjectType;
      case LanguageConceptSwitch.VectorType:
        if (props_VectorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("vector");
          props_VectorType = cpb.create();
        }
        return props_VectorType;
      case LanguageConceptSwitch.WorldType:
        if (props_WorldType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("type of a world");
          cpb.rawPresentation("world");
          props_WorldType = cpb.create();
        }
        return props_WorldType;
    }
    return null;
  }
}
