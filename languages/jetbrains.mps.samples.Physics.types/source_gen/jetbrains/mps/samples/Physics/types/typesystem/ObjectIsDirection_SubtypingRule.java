package jetbrains.mps.samples.Physics.types.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ObjectIsDirection_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public ObjectIsDirection_SubtypingRule() {
  }
  public SNode getSubOrSuperType(SNode objectType, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    return createDirectionType_1qus2t_a0a1();
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ObjectType$sZ;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean isWeak() {
    return false;
  }
  public boolean surelyKeepsConcept() {
    return true;
  }
  private static SNode createDirectionType_1qus2t_a0a1() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DirectionType$vJ);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ObjectType$sZ = MetaAdapterFactory.getConcept(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, 0x6520d39c9501de46L, "jetbrains.mps.samples.Physics.types.structure.ObjectType");
    /*package*/ static final SConcept DirectionType$vJ = MetaAdapterFactory.getConcept(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, 0x6520d39c950a1448L, "jetbrains.mps.samples.Physics.types.structure.DirectionType");
  }
}
