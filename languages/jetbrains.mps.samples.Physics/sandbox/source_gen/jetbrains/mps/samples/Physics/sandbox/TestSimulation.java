package jetbrains.mps.samples.Physics.sandbox;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.runtime.Simulation;
import jetbrains.mps.samples.Physics.runtime.objects.World;
import jetbrains.mps.samples.Physics.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.runtime.vectors.InternalVector;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.runtime.objects.rendering.SphereFixture;
import java.util.Arrays;
import jetbrains.mps.samples.Physics.runtime.objects.forces.Force;
import org.ode4j.math.DVector3C;
import java.math.BigDecimal;
import java.math.RoundingMode;
import jetbrains.mps.samples.Physics.runtime.Renderer;

public class TestSimulation extends Simulation {

  @Override
  protected void init(World world) {
    PhysicalEntity Ho = new PhysicalEntity(world);
    PhysicalEntity Ha = new PhysicalEntity(world);
    Ho.getBody().setPosition(new InternalVector(((Number) new BigInteger("-396")), ((Number) new BigInteger("4")), ((Number) new BigInteger("4"))).toDVector3C());
    Ho.setFixture(new SphereFixture(world, 200), ((Number) new BigInteger("456")));
    Ho.getForces().addAll(Arrays.asList(new Force() {
      @Override
      public DVector3C getForce(World world, PhysicalEntity targetEntity) {
        return Ha.minus(Ho).resize(((Number) new BigDecimal("0.1").setScale(1, RoundingMode.DOWN))).toDVector3C();
      }
    }));
    world.addEntity(Ho);
    Ha.getBody().setPosition(new InternalVector(((Number) new BigInteger("100")), ((Number) new BigInteger("100")), ((Number) new BigInteger("100"))).toDVector3C());
    Ha.setFixture(new SphereFixture(world, 100), ((Number) new BigInteger("100")));
    Ha.getForces().addAll(Arrays.asList(new Force() {
      @Override
      public DVector3C getForce(World world, PhysicalEntity targetEntity) {
        return Ho.minus(Ha).resize(((Number) new BigDecimal("0.1").setScale(1, RoundingMode.DOWN))).toDVector3C();
      }
    }));
    world.addEntity(Ha);
  }

  public static void main(String[] args) {
    Renderer.afterInit(new TestSimulation());
    Renderer.main(args);
  }
}
