package jetbrains.mps.samples.Physics.sample;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder.FixtureBuilder;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder.Prop;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.Color;
import java.util.Arrays;

public class SolarSystemSystemScope extends SystemScope {
  public final EarthSystemSystemScope EarthNested;
  public final PhysicalEntity Sun;

  public SolarSystemSystemScope(World world, VectorLike position, VectorLike velocity) {
    super(position, velocity);
    // Save this as scope (to simplify generated mapping) 
    final SolarSystemSystemScope scope = this;

    //  Instanciate objects 
    Sun = withEntity(new Sun1PhysicalEntity(world));
    EarthNested = withEntity(new EarthSystemSystemScope(world, position.add(InternalVector.ZERO), velocity.add(InternalVector.ZERO)));

    // Initialize them 
    Sun.init(this, world, new FixtureBuilder());
  }

  public static class Sun1PhysicalEntity extends BaseObjectAbstractEntity<SolarSystemSystemScope> {

    public Sun1PhysicalEntity(World world) {
      super(world);
    }

    @Override
    public void init(final SolarSystemSystemScope scope, final World world, FixtureBuilder fixtureProperties) {
      // Escape this for nested forces 
      Sun1PhysicalEntity currentEntity = this;

      // Set static properties of Sun 
      this.setMass(((Number) new BigInteger("1300")));
      this.getBody().setPosition(VectorHelper.fromInternal(new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("-600"))).add(scope.getInitialPosition())));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of Sun 
      super.init(scope, world, fixtureProperties);

      //  Styles (if any) and forces 
      fixtureProperties.set(Prop.SHAPE, "shape");
      fixtureProperties.set(Prop.TEXTURE, new Color(255, 0, 0));
      fixtureProperties.set(Prop.EMIT_LIGHT, true);
      fixtureProperties.set(Prop.SPHERE_RADIUS, ((Number) new BigInteger("250")));
      this.setFixture(fixtureProperties.build(world));
      this.getForces().addAll(Arrays.asList());

      // Bind fixture and mass together 
      this.bindFixture();
      world.addEntity(this);
    }
  }

}
