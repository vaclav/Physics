package jetbrains.mps.samples.Physics.forces;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.forces.Force;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import java.util.function.Function;
import org.iets3.core.expr.genjava.base.rt.rt.ParameterSetWrapper;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import org.ode4j.math.DVector3C;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import java.math.BigInteger;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.pcollections.TreePVector;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class InteractionForceForce {
  public static Force get(World world, SystemScope scope, PhysicalEntity currentEntity, double time, Function<ParameterSetWrapper, VectorLike> map) {
    Force force = new Force<SystemScope>() {

      @Override
      public DVector3C linearForce(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {

        return VectorHelper.toDVector3C(new _FunctionTypes._return_P0_E0<VectorLike>() {
          public VectorLike invoke() {
            VectorLike seed = new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("0")));
            for (VectorLike current : ListSequence.fromList(TreePVector.from(TreePVector.from(world.getEntities().stream().filter(new Predicate<PhysicalEntity>() {
              public boolean test(PhysicalEntity o) {
                return new Function<ParameterSetWrapper, Boolean>() {
                  public Boolean apply(ParameterSetWrapper param) {
                    PhysicalEntity it = (PhysicalEntity) param.parameters.get(0);
                    return it != currentEntity;
                  }
                }.apply(new ParameterSetWrapper(o));
              }
            }).collect(Collectors.<PhysicalEntity>toList())).stream().map(new Function<PhysicalEntity, VectorLike>() {
              public VectorLike apply(PhysicalEntity param) {
                return map.apply(new ParameterSetWrapper(param));
              }
            }).collect(Collectors.<VectorLike>toList())))) {
              seed = ((VectorLike) current).add(seed);
            }
            return seed;
          }
        }.invoke());
      }

      @Override
      public DVector3C moment(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
        return null;
      }

      @Override
      public DVector3C applicationPoint(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
        return null;
      }

      @Override
      public int forceMode() {
        return 16;
      }
    };
    return force;
  }
}
