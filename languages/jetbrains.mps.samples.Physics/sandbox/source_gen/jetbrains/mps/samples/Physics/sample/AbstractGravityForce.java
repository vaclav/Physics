package jetbrains.mps.samples.Physics.sample;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.Force;
import org.ode4j.math.DVector3C;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import java.math.BigDecimal;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;

public class AbstractGravityForce<T extends SystemScope> implements Force<T> {
  private Number G;

  public AbstractGravityForce(Number G1) {
    this.G = G1;
  }

  @Override
  public DVector3C compute(World world, T scope, PhysicalEntity currentEntity, long time) {

    VectorLike sum = InternalVector.ZERO;
    for (PhysicalEntity otherEntity : world.getEntities()) {
      if (otherEntity != currentEntity) {
        sum = sum.add(otherEntity.minus(currentEntity).resize(AH.div(AH.mul(AH.mul(G, otherEntity.getMass()), currentEntity.getMass()), BigDecimal.valueOf(Math.pow(currentEntity.minus(otherEntity).length().doubleValue(), ((Number) new BigInteger("2")).doubleValue())))));
      }
    }
    return VectorHelper.fromInternal(sum);
  }
}
