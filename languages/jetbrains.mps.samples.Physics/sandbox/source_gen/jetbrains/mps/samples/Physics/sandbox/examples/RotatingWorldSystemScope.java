package jetbrains.mps.samples.Physics.sandbox.examples;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import org.ode4j.math.DMatrix3C;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.runtime.RotationHelper;
import java.math.BigDecimal;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import org.nevec.rjm.BigDecimalMath;
import java.math.MathContext;

public class RotatingWorldSystemScope extends SystemScope {
  public final CollisionWorldSystemScope CollisionWorld1;

  public RotatingWorldSystemScope(World world, VectorLike position, VectorLike velocity, DMatrix3C rotation) {
    super(position, velocity, rotation);
    // Save this as scope (to simplify generated mapping) 
    final RotatingWorldSystemScope scope = this;

    //  Instanciate objects 
    CollisionWorld1 = withEntity(new CollisionWorldSystemScope(world, getAbsoluteInitialPosition(new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("0")))), getAbsoluteInitialVelocity(InternalVector.ZERO), VectorHelper.addRotation(initialRotation, RotationHelper.eulerAnglesToMatrix(((BigDecimal) AH.mul(AH.div(BigDecimalMath.pi(MathContext.DECIMAL32), ((Number) new BigInteger("4"))), ((Number) new BigInteger("1")))).negate(), ((Number) new BigInteger("0")), AH.mul(AH.div(BigDecimalMath.pi(MathContext.DECIMAL32), ((Number) new BigInteger("2"))), ((Number) new BigInteger("1")))))));

    // Initialize them 
  }


}
