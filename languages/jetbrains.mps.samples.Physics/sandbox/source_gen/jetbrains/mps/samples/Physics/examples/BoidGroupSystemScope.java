package jetbrains.mps.samples.Physics.examples;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import org.ode4j.math.DMatrix3C;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import org.iets3.core.expr.simpleTypes.runtime.AH;
import java.util.Arrays;

public class BoidGroupSystemScope extends SystemScope {
  public final PhysicalEntity A3;
  public final PhysicalEntity B3;
  public final PhysicalEntity C3;
  public final PhysicalEntity D3;
  public final PhysicalEntity E;
  public final PhysicalEntity F;
  public final PhysicalEntity G;

  public BoidGroupSystemScope(World world, VectorLike position, VectorLike velocity, DMatrix3C rotation) {
    super(position, velocity, rotation);
    // Save this as scope (to simplify generated mapping) 
    final BoidGroupSystemScope scope = this;

    //  Instanciate objects 
    A3 = withEntity(new A5PhysicalEntity(world, "A4", scope));
    B3 = withEntity(new B5PhysicalEntity(world, "B4", scope));
    C3 = withEntity(new C5PhysicalEntity(world, "C4", scope));
    D3 = withEntity(new D5PhysicalEntity(world, "D4", scope));
    E = withEntity(new E2PhysicalEntity(world, "E1", scope));
    F = withEntity(new F2PhysicalEntity(world, "F1", scope));
    G = withEntity(new G2PhysicalEntity(world, "G1", scope));

    // Initialize them 
    A3.init(this, world);
    B3.init(this, world);
    C3.init(this, world);
    D3.init(this, world);
    E.init(this, world);
    F.init(this, world);
    G.init(this, world);
  }

  public static class A5PhysicalEntity extends BoidAbstractEntity<BoidGroupSystemScope> {

    public A5PhysicalEntity(World world, String name, BoidGroupSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final BoidGroupSystemScope scope, final World world) {
      // Escape this for nested forces 
      A5PhysicalEntity currentEntity = this;

      // Set static properties of A 
      this.setMass(((Number) new BigInteger("5")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("0"))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getAbsoluteInitialVelocity(new InternalVector(((Number) (AH.mul(((Number) new BigInteger("3")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1")))))))));

      //  Forces and visual of the parent objects of A 
      super.init(scope, world);

      //  Styles (if any) and forces 
      this.getForces().addAll(Arrays.asList());
    }
  }
  public static class B5PhysicalEntity extends BoidAbstractEntity<BoidGroupSystemScope> {

    public B5PhysicalEntity(World world, String name, BoidGroupSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final BoidGroupSystemScope scope, final World world) {
      // Escape this for nested forces 
      B5PhysicalEntity currentEntity = this;

      // Set static properties of B 
      this.setMass(((Number) new BigInteger("5")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) (AH.mul(((Number) new BigInteger("50")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("-3")), ((Number) new BigInteger("1")))))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of B 
      super.init(scope, world);

      //  Styles (if any) and forces 
      this.getForces().addAll(Arrays.asList());
    }
  }
  public static class C5PhysicalEntity extends BoidAbstractEntity<BoidGroupSystemScope> {

    public C5PhysicalEntity(World world, String name, BoidGroupSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final BoidGroupSystemScope scope, final World world) {
      // Escape this for nested forces 
      C5PhysicalEntity currentEntity = this;

      // Set static properties of C 
      this.setMass(((Number) new BigInteger("5")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) (AH.mul(((Number) new BigInteger("15")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("-90")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("5")), ((Number) new BigInteger("1")))))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of C 
      super.init(scope, world);

      //  Styles (if any) and forces 
      this.getForces().addAll(Arrays.asList());
    }
  }
  public static class D5PhysicalEntity extends BoidAbstractEntity<BoidGroupSystemScope> {

    public D5PhysicalEntity(World world, String name, BoidGroupSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final BoidGroupSystemScope scope, final World world) {
      // Escape this for nested forces 
      D5PhysicalEntity currentEntity = this;

      // Set static properties of D 
      this.setMass(((Number) new BigInteger("5")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) (AH.mul(((Number) new BigInteger("-40")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1")))))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of D 
      super.init(scope, world);

      //  Styles (if any) and forces 
      this.getForces().addAll(Arrays.asList());
    }
  }
  public static class E2PhysicalEntity extends BoidAbstractEntity<BoidGroupSystemScope> {

    public E2PhysicalEntity(World world, String name, BoidGroupSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final BoidGroupSystemScope scope, final World world) {
      // Escape this for nested forces 
      E2PhysicalEntity currentEntity = this;

      // Set static properties of E 
      this.setMass(((Number) new BigInteger("5")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) (AH.mul(((Number) new BigInteger("30")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("-5")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1")))))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of E 
      super.init(scope, world);

      //  Styles (if any) and forces 
      this.getForces().addAll(Arrays.asList());
    }
  }
  public static class F2PhysicalEntity extends BoidAbstractEntity<BoidGroupSystemScope> {

    public F2PhysicalEntity(World world, String name, BoidGroupSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final BoidGroupSystemScope scope, final World world) {
      // Escape this for nested forces 
      F2PhysicalEntity currentEntity = this;

      // Set static properties of F 
      this.setMass(((Number) new BigInteger("5")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) (AH.mul(((Number) new BigInteger("45")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("24")), ((Number) new BigInteger("1")))))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of F 
      super.init(scope, world);

      //  Styles (if any) and forces 
      this.getForces().addAll(Arrays.asList());
    }
  }
  public static class G2PhysicalEntity extends BoidAbstractEntity<BoidGroupSystemScope> {

    public G2PhysicalEntity(World world, String name, BoidGroupSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final BoidGroupSystemScope scope, final World world) {
      // Escape this for nested forces 
      G2PhysicalEntity currentEntity = this;

      // Set static properties of G 
      this.setMass(((Number) new BigInteger("5")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) (AH.mul(((Number) new BigInteger("5")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("103")), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1")))))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of G 
      super.init(scope, world);

      //  Styles (if any) and forces 
      this.getForces().addAll(Arrays.asList());
    }
  }

}
