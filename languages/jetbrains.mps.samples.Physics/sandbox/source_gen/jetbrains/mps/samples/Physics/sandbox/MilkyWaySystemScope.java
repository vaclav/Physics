package jetbrains.mps.samples.Physics.sandbox;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.runtime.objects.World;
import jetbrains.mps.samples.Physics.runtime.vectors.VectorLike;
import jetbrains.mps.samples.Physics.runtime.vectors.InternalVector;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.math.BigInteger;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import java.util.Arrays;

public class MilkyWaySystemScope extends SystemScope {
  public final SystemScope SolarSystem1;
  public final PhysicalEntity FloatingDog;
  public final PhysicalEntity Something;
  public final PhysicalEntity A;

  public MilkyWaySystemScope(World world, VectorLike position, VectorLike velocity) {
    super(position, velocity);
    //  Instanciate objects 
    FloatingDog = withEntity(new FloatingDog1PhysicalEntity(world));
    Something = withEntity(new Something1PhysicalEntity(world));
    A = withEntity(new A1PhysicalEntity(world));
    SolarSystem1 = withEntity(new SolarSystemSystemScope(world, position.add(new InternalVector(((Number) new BigDecimal("4.999999999999999").setScale(15, RoundingMode.DOWN)), ((Number) new BigDecimal("4.0").setScale(1, RoundingMode.DOWN)), ((Number) new BigDecimal("4.0").setScale(1, RoundingMode.DOWN)))), velocity.add(InternalVector.ZERO)));

    // Initialize them 
    FloatingDog.init(this, world);
    Something.init(this, world);
    A.init(this, world);
  }

  public static class FloatingDog1PhysicalEntity extends RandomObjectAbstractEntity<MilkyWaySystemScope> {

    public FloatingDog1PhysicalEntity(World world) {
      super(world);
    }

    @Override
    public void init(final MilkyWaySystemScope scope, final World world) {
      // Escape this for nested forces 
      FloatingDog1PhysicalEntity currentEntity = this;

      // Set static properties of Floating dog 
      this.setMass(((Number) new BigInteger("30")));
      this.getBody().setPosition(new InternalVector(((Number) new BigInteger("4")), AH.add(((Number) new BigInteger("50000")), scope.SolarSystem1.getMass()), ((Number) new BigInteger("6"))).add(scope.SolarSystem1).add(scope.getInitialPosition()).toDVector3C());

      //  Forces and visual of the parent objects of Floating dog 
      super.init(scope, world);

      //  Visual (if any) and forces 
      this.getForces().addAll(Arrays.asList(new FrictionForce(((Number) new BigInteger("4")))));

      // Bind fixture and mass together 
      this.bindFixture();
      world.addEntity(this);
    }
  }
  public static class Something1PhysicalEntity extends RandomObjectAbstractEntity<MilkyWaySystemScope> {

    public Something1PhysicalEntity(World world) {
      super(world);
    }

    @Override
    public void init(final MilkyWaySystemScope scope, final World world) {
      // Escape this for nested forces 
      Something1PhysicalEntity currentEntity = this;

      // Set static properties of Something 
      this.setMass(((Number) new BigInteger("30")));
      this.getBody().setPosition(scope.FloatingDog.minus(currentEntity).resize(((Number) new BigInteger("45"))).add(scope.getInitialPosition()).toDVector3C());

      //  Forces and visual of the parent objects of Something 
      super.init(scope, world);

      //  Visual (if any) and forces 
      this.getForces().addAll(Arrays.asList());

      // Bind fixture and mass together 
      this.bindFixture();
      world.addEntity(this);
    }
  }
  public static class A1PhysicalEntity extends RandomObjectAbstractEntity<MilkyWaySystemScope> {

    public A1PhysicalEntity(World world) {
      super(world);
    }

    @Override
    public void init(final MilkyWaySystemScope scope, final World world) {
      // Escape this for nested forces 
      A1PhysicalEntity currentEntity = this;

      // Set static properties of A 
      this.setMass(((Number) new BigInteger("30")));
      this.getBody().setPosition(new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("0"))).minus(currentEntity).resize(((Number) new BigInteger("40"))).add(scope.getInitialPosition()).toDVector3C());
      this.getBody().setLinearVel(currentEntity.minus(currentEntity).resize(((Number) new BigInteger("40"))).add(scope.getInitialVelocity()).toDVector3C());

      //  Forces and visual of the parent objects of A 
      super.init(scope, world);

      //  Visual (if any) and forces 
      this.getForces().addAll(Arrays.asList());

      // Bind fixture and mass together 
      this.bindFixture();
      world.addEntity(this);
    }
  }

}
