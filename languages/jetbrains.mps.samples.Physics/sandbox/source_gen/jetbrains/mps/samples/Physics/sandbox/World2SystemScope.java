package jetbrains.mps.samples.Physics.sandbox;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.runtime.objects.World;
import jetbrains.mps.samples.Physics.runtime.vectors.VectorLike;
import jetbrains.mps.samples.Physics.runtime.objects.rendering.builder.FixtureBuilder;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.runtime.vectors.InternalVector;
import jetbrains.mps.samples.Physics.runtime.objects.rendering.builder.Prop;
import jetbrains.mps.samples.Physics.runtime.objects.rendering.Color;
import java.util.Arrays;
import jetbrains.mps.samples.Physics.runtime.objects.forces.Force;
import org.ode4j.math.DVector3C;
import java.math.BigDecimal;
import java.math.RoundingMode;

public class World2SystemScope extends SystemScope {
  public final PhysicalEntity Ho2;
  public final PhysicalEntity Ha;

  public World2SystemScope(World world, VectorLike position, VectorLike velocity) {
    super(position, velocity);
    //  Instanciate objects 
    Ho2 = withEntity(new Ho3PhysicalEntity(world));
    Ha = withEntity(new Ha1PhysicalEntity(world));

    // Initialize them 
    Ho2.init(this, world, new FixtureBuilder());
    Ha.init(this, world, new FixtureBuilder());
  }

  public static class Ho3PhysicalEntity extends BaseObjectAbstractEntity<World2SystemScope> {

    public Ho3PhysicalEntity(World world) {
      super(world);
    }

    @Override
    public void init(final World2SystemScope scope, final World world, FixtureBuilder fixtureProperties) {
      // Escape this for nested forces 
      Ho3PhysicalEntity currentEntity = this;

      // Set static properties of Ho 
      this.setMass(AH.add(((Number) new BigInteger("456")), ((Number) new BigInteger("45"))));
      this.getBody().setPosition(new InternalVector(((Number) new BigInteger("4")), ((Number) new BigInteger("4")), ((Number) new BigInteger("4"))).add(scope.getInitialPosition()).toDVector3C());
      this.getBody().setLinearVel(scope.getInitialVelocity().toDVector3C());

      //  Forces and visual of the parent objects of Ho 
      super.init(scope, world, fixtureProperties);

      //  Styles (if any) and forces 
      fixtureProperties.set(Prop.SHAPE, "shape");
      fixtureProperties.set(Prop.TEXTURE, new Color(255, 255, 255));
      fixtureProperties.set(Prop.SPHERE_RADIUS, ((Number) new BigInteger("200")));
      this.setFixture(fixtureProperties.build(world));
      this.getForces().addAll(Arrays.asList(new Force() {
        @Override
        public DVector3C getForce(World world, PhysicalEntity targetEntity, long time) {
          return scope.Ha.minus(currentEntity).resize(((Number) new BigDecimal("0.1").setScale(1, RoundingMode.DOWN))).toDVector3C();
        }
      }));

      // Bind fixture and mass together 
      this.bindFixture();
      world.addEntity(this);
    }
  }
  public static class Ha1PhysicalEntity extends BaseObjectAbstractEntity<World2SystemScope> {

    public Ha1PhysicalEntity(World world) {
      super(world);
    }

    @Override
    public void init(final World2SystemScope scope, final World world, FixtureBuilder fixtureProperties) {
      // Escape this for nested forces 
      Ha1PhysicalEntity currentEntity = this;

      // Set static properties of Ha 
      this.setMass(((Number) new BigInteger("100")));
      this.getBody().setPosition(new InternalVector(((Number) new BigInteger("100")), ((Number) new BigInteger("100")), ((Number) new BigInteger("100"))).add(scope.getInitialPosition()).toDVector3C());
      this.getBody().setLinearVel(scope.getInitialVelocity().toDVector3C());

      //  Forces and visual of the parent objects of Ha 
      super.init(scope, world, fixtureProperties);

      //  Styles (if any) and forces 
      fixtureProperties.set(Prop.SHAPE, "shape");
      fixtureProperties.set(Prop.TEXTURE, new Color(255, 255, 255));
      fixtureProperties.set(Prop.SPHERE_RADIUS, ((Number) new BigInteger("100")));
      this.setFixture(fixtureProperties.build(world));
      this.getForces().addAll(Arrays.asList(new Force() {
        @Override
        public DVector3C getForce(World world, PhysicalEntity targetEntity, long time) {
          return scope.Ho2.minus(currentEntity).resize(((Number) new BigDecimal("0.1").setScale(1, RoundingMode.DOWN))).toDVector3C();
        }
      }));

      // Bind fixture and mass together 
      this.bindFixture();
      world.addEntity(this);
    }
  }

}
