package jetbrains.mps.samples.Physics.examples;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.forces.Force;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import org.ode4j.math.DVector3C;
import java.util.function.Function;
import org.iets3.core.expr.genjava.base.rt.rt.ParameterSetWrapper;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import java.math.BigDecimal;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;

public class GravitationForce {
  public static Force get(World world, SystemScope scope, PhysicalEntity currentEntity, double time, Number G) {
    Force force = new Force<SystemScope>() {
      private Force cached;

      @Override
      public DVector3C linearForce(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
        cached = InteractionForceForce.get(world, scope, currentEntity, time, new Function<ParameterSetWrapper, VectorLike>() {
          public VectorLike apply(ParameterSetWrapper param) {
            PhysicalEntity it = (PhysicalEntity) param.parameters.get(0);
            return it.minus(currentEntity).resize(AH.div(AH.mul(AH.mul(G, it.getMass()), currentEntity.getMass()), BigDecimal.valueOf(Math.pow(currentEntity.minus(it).length().doubleValue(), ((Number) new BigInteger("2")).doubleValue()))));
          }
        });

        return VectorHelper.toDVector3C(cached.linearForce(world, scope, currentEntity, time));
      }

      @Override
      public DVector3C moment(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
        return VectorHelper.toDVector3C(cached.moment(world, scope, currentEntity, time));
      }

      @Override
      public DVector3C applicationPoint(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
        return VectorHelper.toDVector3C(cached.applicationPoint(world, scope, currentEntity, time));
      }

      @Override
      public int forceMode() {
        return 16;
      }
    };
    return force;
  }
}
