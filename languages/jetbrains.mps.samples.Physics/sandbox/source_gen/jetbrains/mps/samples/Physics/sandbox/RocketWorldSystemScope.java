package jetbrains.mps.samples.Physics.sandbox;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder.Prop;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.Color;
import java.util.Arrays;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.Force;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.iets3.core.expr.genjava.base.rt.rt.ParameterSetWrapper;
import java.util.function.Function;
import org.ode4j.math.DVector3C;
import java.math.BigDecimal;
import java.math.RoundingMode;
import org.iets3.core.expr.base.runtime.runtime.MinMaxHelper;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.CollisionReaction;

public class RocketWorldSystemScope extends SystemScope {
  public final PhysicalEntity RocketEuropaS452G;
  public final PhysicalEntity Ground3;

  public RocketWorldSystemScope(World world, VectorLike position, VectorLike velocity) {
    super(position, velocity);
    // Save this as scope (to simplify generated mapping) 
    final RocketWorldSystemScope scope = this;

    //  Instanciate objects 
    RocketEuropaS452G = withEntity(new RocketEuropaS452G2PhysicalEntity(world, "RocketEuropaS452G1", scope));
    Ground3 = withEntity(new Ground5PhysicalEntity(world, "Ground4", scope));

    // Initialize them 
    RocketEuropaS452G.init(this, world);
    Ground3.init(this, world);
  }

  public static class RocketEuropaS452G2PhysicalEntity extends BaseObjectAbstractEntity<RocketWorldSystemScope> {

    public RocketEuropaS452G2PhysicalEntity(World world, String name, RocketWorldSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final RocketWorldSystemScope scope, final World world) {
      // Escape this for nested forces 
      RocketEuropaS452G2PhysicalEntity currentEntity = this;

      // Set static properties of Rocket Europa-S452G 
      this.setMass(((Number) new BigInteger("1")));
      this.getBody().setPosition(VectorHelper.fromInternal(new InternalVector(AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("10")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1")))).add(scope.getInitialPosition())));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of Rocket Europa-S452G 
      super.init(scope, world);

      //  Styles (if any) and forces 
      fixtureProperties.set(Prop.TEXTURE, new Color(255, 0, 0));
      fixtureProperties.set(Prop.SHAPE, "box");
      fixtureProperties.set(Prop.BOX_X, AH.mul(((Number) new BigInteger("5")), ((Number) new BigInteger("1"))));
      fixtureProperties.set(Prop.BOX_Y, AH.mul(((Number) new BigInteger("20")), ((Number) new BigInteger("1"))));
      fixtureProperties.set(Prop.BOX_Z, AH.mul(((Number) new BigInteger("5")), ((Number) new BigInteger("1"))));
      this.getForces().addAll(Arrays.asList(new Force<RocketWorldSystemScope>() {
        private Force internal;

        public void init() {
          internal = new _FunctionTypes._return_P0_E0<Force>() {
            public Force invoke() {
              ParameterSetWrapper param = new ParameterSetWrapper();
              return new Function<ParameterSetWrapper, Force>() {
                public Force apply(ParameterSetWrapper param) {
                  return new Force<SystemScope>() {
                    private DVector3C cached;

                    @Override
                    public DVector3C linearForce(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
                      if (cached == null) {
                        cached = VectorHelper.fromInternal(new InternalVector(((Number) new BigDecimal("0.0").setScale(1, RoundingMode.DOWN)), AH.mul(AH.mul(currentEntity.getMass(), ((Number) new BigDecimal("-9.81").setScale(2, RoundingMode.DOWN))), AH.mul(((Number) new BigInteger("1")), ((Number) new BigInteger("1")))), ((Number) new BigInteger("0"))));
                      }
                      return cached;

                    }
                    @Override
                    public DVector3C applicationPoint(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
                      return null;
                    }

                    @Override
                    public int forceMode() {
                      return 0;
                    }
                  };
                }
              }.apply(param);
            }
          }.invoke();
        }

        @Override
        public DVector3C linearForce(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          if (internal == null) {
            init();
          }
          return internal.linearForce(world, scope, currentEntity, time);
        }
        @Override
        public DVector3C applicationPoint(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          if (internal == null) {
            init();
          }

          return internal.applicationPoint(world, scope, currentEntity, time);
        }
      }, /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      new Force<RocketWorldSystemScope>() {

        @Override
        public DVector3C linearForce(final World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          return VectorHelper.fromInternal(new InternalVector(((Number) new BigInteger("0")), AH.mul(((Number) new BigInteger("30")), ((Number) new BigInteger("1"))), ((Number) new BigInteger("0"))).mul(((Number) MinMaxHelper.max(new _FunctionTypes._return_P0_E0<List<BigDecimal>>() {
            public List<BigDecimal> invoke() {
              List<BigDecimal> l = ListSequence.fromList(new ArrayList<BigDecimal>());
              ListSequence.fromList(l).addElement((BigDecimal) AH.add(AH.mul(AH.mul(BigDecimal.valueOf(world.getTime()), ((Number) new BigInteger("1"))), ((BigDecimal) ((Number) new BigDecimal("0.2").setScale(1, RoundingMode.DOWN))).negate()), ((Number) new BigInteger("2"))));
              ListSequence.fromList(l).addElement((BigDecimal) ((Number) new BigDecimal("0.0").setScale(1, RoundingMode.DOWN)));
              return l;
            }
          }.invoke(), true, null))));

        }
        @Override
        public DVector3C applicationPoint(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          return null;
        }

        @Override
        public int forceMode() {
          return 4;
        }
      }, new Force<RocketWorldSystemScope>() {

        @Override
        public DVector3C linearForce(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          return VectorHelper.fromInternal(new InternalVector(AH.mul(((Number) new BigInteger("1")), ((Number) new BigInteger("1"))), ((Number) new BigInteger("0")), ((Number) new BigInteger("0"))));

        }
        @Override
        public DVector3C applicationPoint(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          return VectorHelper.fromInternal(new InternalVector(((Number) new BigInteger("0")), AH.mul(((Number) new BigInteger("5")), ((Number) new BigInteger("1"))), ((Number) new BigInteger("0"))));
        }

        @Override
        public int forceMode() {
          return 30;
        }
      }));
    }
  }
  public static class Ground5PhysicalEntity extends BaseObjectAbstractEntity<RocketWorldSystemScope> {

    public Ground5PhysicalEntity(World world, String name, RocketWorldSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final RocketWorldSystemScope scope, final World world) {
      // Escape this for nested forces 
      Ground5PhysicalEntity currentEntity = this;

      // Set static properties of Ground 
      this.setMass(((Number) new BigInteger("1")));
      this.getBody().setPosition(VectorHelper.fromInternal(new InternalVector(AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("-1")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1")))).add(scope.getInitialPosition())));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of Ground 
      super.init(scope, world);

      //  Styles (if any) and forces 
      fixtureProperties.set(Prop.COLLISION_REACT, CollisionReaction.IGNORE);
      fixtureProperties.set(Prop.BOX_X, AH.mul(((Number) new BigInteger("200")), ((Number) new BigInteger("1"))));
      fixtureProperties.set(Prop.BOX_Y, AH.mul(((Number) new BigInteger("2")), ((Number) new BigInteger("1"))));
      fixtureProperties.set(Prop.BOX_Z, AH.mul(((Number) new BigInteger("200")), ((Number) new BigInteger("1"))));
      fixtureProperties.set(Prop.SHAPE, "box");
      this.getForces().addAll(Arrays.asList());
    }
  }

}
