package jetbrains.mps.samples.Physics.sandbox;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import java.math.BigDecimal;
import java.math.RoundingMode;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder.PropKey;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.ColorTexture;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.Color;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.SimpleCollisionReaction;
import java.util.Arrays;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.Force;
import org.ode4j.math.DVector3C;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.iets3.core.expr.genjava.base.rt.rt.ParameterSetWrapper;
import java.util.function.Function;
import org.pcollections.TreePVector;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import jetbrains.mps.samples.Physics.java.common.vectors.BigDecimalHelper;
import java.math.MathContext;
import jetbrains.mps.samples.Physics.java.runtime.RotationHelper;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.ImageTexture;

public class RocketWorldSystemScope extends SystemScope {
  public final PhysicalEntity RocketEuropaS452G;
  public final PhysicalEntity Earth3;

  public RocketWorldSystemScope(World world, VectorLike position, VectorLike velocity) {
    super(position, velocity);
    // Save this as scope (to simplify generated mapping) 
    final RocketWorldSystemScope scope = this;

    //  Instanciate objects 
    RocketEuropaS452G = withEntity(new RocketEuropaS452G2PhysicalEntity(world, "RocketEuropaS452G1", scope));
    Earth3 = withEntity(new Earth5PhysicalEntity(world, "Earth4", scope));

    // Initialize them 
    RocketEuropaS452G.init(this, world);
    Earth3.init(this, world);
  }

  public static class RocketEuropaS452G2PhysicalEntity extends BaseObjectAbstractEntity<RocketWorldSystemScope> {

    public RocketEuropaS452G2PhysicalEntity(World world, String name, RocketWorldSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final RocketWorldSystemScope scope, final World world) {
      // Escape this for nested forces 
      RocketEuropaS452G2PhysicalEntity currentEntity = this;

      // Set static properties of Rocket Europa-S452G 
      this.setMass(((Number) new BigDecimal("1.21E+4").setScale(5, RoundingMode.DOWN)));
      this.getBody().setPosition(VectorHelper.fromInternal(new InternalVector(AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("10")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1")))).add(scope.getInitialPosition())));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of Rocket Europa-S452G 
      super.init(scope, world);

      //  Styles (if any) and forces 
      propertiesBuilder.set(PropKey.TEXTURE, new ColorTexture(new Color(255, 0, 0), new Color(0, 0, 0)));
      propertiesBuilder.set(PropKey.COLLISION_REACT, SimpleCollisionReaction.IGNORE.reaction);
      propertiesBuilder.set(PropKey.SHAPE, "box");
      propertiesBuilder.set(PropKey.BOX_X, AH.mul(((Number) new BigInteger("5")), ((Number) new BigInteger("1"))));
      propertiesBuilder.set(PropKey.BOX_Y, AH.mul(((Number) new BigInteger("30")), ((Number) new BigInteger("1"))));
      propertiesBuilder.set(PropKey.BOX_Z, AH.mul(((Number) new BigInteger("5")), ((Number) new BigInteger("1"))));
      this.getForces().addAll(Arrays.asList(new Force<RocketWorldSystemScope>() {
        private Force cached;

        @Override
        public DVector3C linearForce(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          if (cached == null) {
            cached = new _FunctionTypes._return_P0_E0<Force>() {
              public Force invoke() {
                ParameterSetWrapper param = new ParameterSetWrapper();
                return new Function<ParameterSetWrapper, Force>() {
                  public Force apply(ParameterSetWrapper param) {
                    return new Force<SystemScope>() {
                      private Force cached;

                      @Override
                      public DVector3C linearForce(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
                        if (cached == null) {
                          cached = new _FunctionTypes._return_P0_E0<Force>() {
                            public Force invoke() {
                              ParameterSetWrapper param = new ParameterSetWrapper();
                              param.parameters.add(AH.mul(((Number) new BigDecimal("6.67430e-11").setScale(9, RoundingMode.DOWN)), ((Number) new BigInteger("1"))));
                              return new Function<ParameterSetWrapper, Force>() {
                                public Force apply(ParameterSetWrapper param) {
                                  Number G = (Number) param.parameters.get(0);
                                  return new Force<SystemScope>() {

                                    @Override
                                    public DVector3C linearForce(final World world, SystemScope scope, final PhysicalEntity currentEntity, double time) {

                                      return VectorHelper.anyToDVector3C(new _FunctionTypes._return_P0_E0<VectorLike>() {
                                        public VectorLike invoke() {
                                          VectorLike seed = new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("0")));
                                          for (Object current : TreePVector.from(TreePVector.from(world.getEntities().stream().filter(new Predicate<PhysicalEntity>() {
                                            public boolean test(PhysicalEntity o) {
                                              return new Function<ParameterSetWrapper, Boolean>() {
                                                public Boolean apply(ParameterSetWrapper param) {
                                                  PhysicalEntity it = (PhysicalEntity) param.parameters.get(0);
                                                  return it != currentEntity;
                                                }
                                              }.apply(new ParameterSetWrapper(o));
                                            }
                                          }).collect(Collectors.toList())).stream().map(new Function<PhysicalEntity, VectorLike>() {
                                            public VectorLike apply(PhysicalEntity param) {
                                              return new Function<ParameterSetWrapper, VectorLike>() {
                                                public VectorLike apply(ParameterSetWrapper param) {
                                                  PhysicalEntity it = (PhysicalEntity) param.parameters.get(0);
                                                  return it.minus(currentEntity).resize(AH.div(AH.mul(AH.mul(G, it.getMass()), currentEntity.getMass()), BigDecimal.valueOf(Math.pow(currentEntity.minus(it).length().doubleValue(), ((Number) new BigInteger("2")).doubleValue()))));
                                                }
                                              }.apply(new ParameterSetWrapper(param));
                                            }
                                          }).collect(Collectors.toList()))) {
                                            seed = seed.add(((VectorLike) current));
                                          }
                                          return seed;
                                        }
                                      }.invoke());

                                    }
                                    @Override
                                    public DVector3C applicationPoint(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
                                      return null;
                                    }

                                    @Override
                                    public int forceMode() {
                                      return 0;
                                    }
                                  };
                                }
                              }.apply(param);
                            }
                          }.invoke();
                        }

                        return VectorHelper.anyToDVector3C(cached.linearForce(world, scope, currentEntity, time));

                      }
                      @Override
                      public DVector3C applicationPoint(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
                        return null;
                      }

                      @Override
                      public int forceMode() {
                        return 24;
                      }
                    };
                  }
                }.apply(param);
              }
            }.invoke();
          }

          return VectorHelper.anyToDVector3C(cached.linearForce(world, scope, currentEntity, time));

        }
        @Override
        public DVector3C applicationPoint(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          return null;
        }

        @Override
        public int forceMode() {
          return 24;
        }
      }, /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      /* 
       * Actual boost
       */
      new Force<RocketWorldSystemScope>() {

        @Override
        public DVector3C linearForce(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {

          return VectorHelper.anyToDVector3C(new InternalVector(((Number) new BigInteger("0")), AH.mul(((Number) new BigInteger("10000")), ((Number) new BigInteger("1"))), ((Number) new BigInteger("0"))).mul(BigDecimal.ONE.divide(BigDecimalHelper.of((AH.add(AH.mul(BigDecimal.valueOf(world.getTime()), ((Number) new BigInteger("1"))), ((Number) new BigDecimal("0.5").setScale(1, RoundingMode.DOWN))))), MathContext.DECIMAL32)));

        }
        @Override
        public DVector3C applicationPoint(World world, RocketWorldSystemScope scope, PhysicalEntity currentEntity, double time) {
          return null;
        }

        @Override
        public int forceMode() {
          return 28;
        }
      }));
    }
  }
  public static class Earth5PhysicalEntity extends BaseObjectAbstractEntity<RocketWorldSystemScope> {

    public Earth5PhysicalEntity(World world, String name, RocketWorldSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final RocketWorldSystemScope scope, final World world) {
      // Escape this for nested forces 
      Earth5PhysicalEntity currentEntity = this;

      // Set static properties of Earth 
      this.setMass(((Number) new BigDecimal("5.972E+24").setScale(7, RoundingMode.DOWN)));
      this.getBody().setPosition(VectorHelper.fromInternal(new InternalVector(AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("-6371015")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("0")), ((Number) new BigInteger("1")))).add(scope.getInitialPosition())));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));
      this.getBody().setRotation(RotationHelper.eulerAnglesToMatrix(AH.mul(((Number) new BigInteger("-14")), ((Number) new BigDecimal("0.01666666666666666666666666666666667").setScale(35, RoundingMode.DOWN))), ((Number) new BigInteger("0")), AH.mul(AH.sub(((Number) new BigInteger("180")), ((Number) new BigDecimal("40.4085").setScale(4, RoundingMode.DOWN))), ((Number) new BigDecimal("0.01666666666666666666666666666666667").setScale(35, RoundingMode.DOWN)))));

      //  Forces and visual of the parent objects of Earth 
      super.init(scope, world);

      //  Styles (if any) and forces 
      propertiesBuilder.set(PropKey.PAUSE_ON_COLLISION, true);
      propertiesBuilder.set(PropKey.SPHERE_RADIUS, AH.mul(((Number) new BigInteger("6371")), ((Number) new BigDecimal("1E+3").setScale(0, RoundingMode.DOWN))));
      propertiesBuilder.set(PropKey.TEXTURE, new ImageTexture("https://upload.wikimedia.org/wikipedia/commons/4/4d/Whole_world_-_land_and_oceans.jpg"));
      propertiesBuilder.set(PropKey.SHAPE, "sphere");
      this.getForces().addAll(Arrays.asList());
    }
  }

}
