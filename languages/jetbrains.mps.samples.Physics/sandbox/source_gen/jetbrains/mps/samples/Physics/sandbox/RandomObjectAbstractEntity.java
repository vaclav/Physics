package jetbrains.mps.samples.Physics.sandbox;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.runtime.objects.World;
import jetbrains.mps.samples.Physics.runtime.objects.rendering.builder.FixtureBuilder;
import jetbrains.mps.samples.Physics.runtime.objects.rendering.builder.Prop;
import jetbrains.mps.samples.Physics.runtime.objects.rendering.Color;
import java.math.BigInteger;
import java.util.Arrays;

public abstract class RandomObjectAbstractEntity<T extends SystemScope> extends BaseObjectAbstractEntity<T> {

  public RandomObjectAbstractEntity(World world) {
    super(world);
  }


  @Override
  public void init(T scope, World world, FixtureBuilder fixtureProperties) {
    super.init(scope, world, fixtureProperties);

    // Escape this for nested forces 
    RandomObjectAbstractEntity currentEntity = this;

    // Apply styles 
    fixtureProperties.set(Prop.SHAPE, "shape");
    fixtureProperties.set(Prop.TEXTURE, new Color(255, 255, 255));
    fixtureProperties.set(Prop.BOX_X, ((Number) new BigInteger("40")));
    fixtureProperties.set(Prop.BOX_Y, ((Number) new BigInteger("40")));
    fixtureProperties.set(Prop.BOX_Z, ((Number) new BigInteger("40")));

    // Forces 
    this.getForces().addAll(Arrays.asList());
  }
}
