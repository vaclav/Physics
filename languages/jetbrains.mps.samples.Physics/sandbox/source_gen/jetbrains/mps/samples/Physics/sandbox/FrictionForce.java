package jetbrains.mps.samples.Physics.sandbox;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.runtime.objects.forces.Force;
import org.ode4j.math.DVector3C;
import jetbrains.mps.samples.Physics.runtime.objects.World;
import jetbrains.mps.samples.Physics.runtime.objects.PhysicalEntity;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import java.math.BigInteger;

public class FrictionForce implements Force {
  private Number ratio;

  public FrictionForce(Number ratio1) {
    this.ratio = ratio1;
  }

  @Override
  public DVector3C getForce(World world, PhysicalEntity targetEntity) {
    return targetEntity.getVelocityInternalVector().mul(-1).minus(targetEntity).resize(AH.mul(Math.pow(targetEntity.getVelocityInternalVector().length().doubleValue(), ((Number) new BigInteger("2")).doubleValue()), ratio)).toDVector3C();
  }
}
