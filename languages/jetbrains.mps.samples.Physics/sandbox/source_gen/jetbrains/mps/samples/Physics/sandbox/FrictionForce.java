package jetbrains.mps.samples.Physics.sandbox;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.forces.Force;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.ode4j.math.DVector3C;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import java.math.BigInteger;
import org.iets3.core.expr.simpleTypes.runtime.AH;

public class FrictionForce {
  public static Force get(World world, SystemScope scope, PhysicalEntity currentEntity, double time, Number ratio) {
    Force force = new _FunctionTypes._return_P0_E0<Force<SystemScope>>() {
      public Force<SystemScope> invoke() {

        return new Force<SystemScope>() {

          @Override
          public DVector3C linearForce(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {

            return VectorHelper.toDVector3C(currentEntity.getVelocity().mul(-1).minus(new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("0")))).resize(AH.mul(AH.mul(currentEntity.getVelocity().length(), ratio), ((Number) (AH.mul(((Number) new BigInteger("1")), ((Number) new BigInteger("1"))))))));
          }

          @Override
          public DVector3C moment(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
            return null;
          }

          @Override
          public DVector3C applicationPoint(World world, SystemScope scope, PhysicalEntity currentEntity, double time) {
            return null;
          }

          @Override
          public int forceMode() {
            return 0;
          }
        };
      }
    }.invoke();
    return force;
  }
}
