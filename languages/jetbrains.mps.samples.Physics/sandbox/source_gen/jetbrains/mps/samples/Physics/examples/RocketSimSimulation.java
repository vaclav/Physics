package jetbrains.mps.samples.Physics.examples;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.Simulation;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import org.ode4j.math.DMatrix3;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import processing.core.PGraphics;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.MetricsRenderer;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder.PropKey;
import jetbrains.mps.samples.Physics.java.runtime.Renderer;
import jetbrains.mps.samples.Physics.java.runtime.CompositeRendererCallback;

public class RocketSimSimulation extends Simulation {
  protected RocketWorldSystemScope scope;

  public RocketSimSimulation() {
    super(AH.mul(((Number) new BigInteger("1")), ((Number) new BigInteger("60"))).doubleValue(), 1 / AH.mul(((Number) new BigInteger("10")), ((Number) new BigInteger("1"))).floatValue());
  }

  @Override
  protected void init(World world) {
    this.initScope(world);
    this.scope.build();
  }

  protected void initScope(World world) {
    this.scope = new RocketWorldSystemScope(world, InternalVector.ZERO, InternalVector.ZERO, new DMatrix3(1, 0, 0, 0, 1, 0, 0, 0, 1));

  }


  @Override
  public VectorLike getCameraPosition(PGraphics graphics) {
    VectorLike currentEntity = this.scope;

    return scope.RocketEuropaS452G.getPosition().add((scope.RocketEuropaS452G.getPosition().add(scope.Earth.getPosition())).resize(AH.mul(((Number) new BigInteger("300")), ((Number) new BigInteger("1")))));
  }

  @Override
  public VectorLike getCameraFocus(PGraphics graphics) {
    VectorLike currentEntity = this.scope;

    return scope.Earth;
  }

  @Override
  protected void renderMetrics(PGraphics ctx) {
    this.metricsRenderer.renderMetric(ctx, "Rocket speed", MetricsRenderer.anyToString(scope.RocketEuropaS452G.getVelocity().length()) + " mps");
    this.metricsRenderer.renderMetric(ctx, "Height", MetricsRenderer.anyToString(AH.sub(scope.RocketEuropaS452G.minus(scope.Earth).length(), scope.Earth.getPropertiesBuilder().get(PropKey.SPHERE_RADIUS))) + " m^1");
  }

  public static void main(String[] args) {
    Renderer.afterInit(new CompositeRendererCallback(new RocketSimSimulation()));
    Renderer.main(args);
  }
}
