package jetbrains.mps.samples.Physics.examples;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.Simulation;
import org.iets3.core.expr.simpleTypes.runtime.AH;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import org.ode4j.math.DMatrix3;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import jetbrains.mps.samples.Physics.java.runtime.CompositeRenderer;
import jetbrains.mps.samples.Physics.java.runtime.Renderer;

public class RotationAndCollisionSimSimulation extends Simulation {
  protected RotationAndCollisionSystemScope scope;

  public RotationAndCollisionSimSimulation() {
    super(((Number) (AH.mul(((Number) new BigInteger("15")), ((Number) new BigInteger("1"))))).doubleValue(), 1);
  }

  @Override
  protected void init(World world) {
    this.initScope(world);
    this.scope.build();
  }

  protected void initScope(World world) {
    this.scope = new RotationAndCollisionSystemScope(world, InternalVector.ZERO, InternalVector.ZERO, new DMatrix3(1, 0, 0, 0, 1, 0, 0, 0, 1));

  }


  @Override
  public VectorLike getCameraPosition() {
    VectorLike currentEntity = this.scope;

    return new InternalVector(((Number) (AH.mul(((Number) new BigInteger("50")), ((Number) new BigInteger("1"))))), ((Number) new BigInteger("0")), ((Number) (AH.mul(((Number) new BigInteger("150")), ((Number) new BigInteger("1"))))));
  }

  @Override
  public VectorLike getCameraFocus() {
    VectorLike currentEntity = this.scope;

    return scope.MovingBlock;
  }

  @Override
  protected void renderMetrics(SpriteBatch ctx, ShapeRenderer shapeRenderer) {
  }

  public static void main(String[] args) {
    CompositeRenderer views = new CompositeRenderer(new RotationAndCollisionSimSimulation(), new RotationAndCollisionSim1AlternativeView0());
    new Renderer(views).startApp("RotationAndCollisionSim");
  }
}
