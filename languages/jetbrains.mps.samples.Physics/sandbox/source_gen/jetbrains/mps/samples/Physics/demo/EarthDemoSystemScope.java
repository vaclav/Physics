package jetbrains.mps.samples.Physics.demo;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import org.ode4j.math.DMatrix3C;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import org.iets3.core.expr.simpleTypes.runtime.AH;
import java.math.BigDecimal;
import java.math.RoundingMode;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder.PropKey;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.ImageTexture;
import java.util.Arrays;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.FiniteTraceHandler;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.Color;

public class EarthDemoSystemScope extends SystemScope {
  public final PhysicalEntity Earth;
  public final PhysicalEntity Moon;

  public EarthDemoSystemScope(World world, VectorLike position, VectorLike velocity, DMatrix3C rotation) {
    super(position, velocity, rotation);
    // Save this as scope (to simplify generated mapping) 
    final EarthDemoSystemScope scope = this;

    //  Instanciate objects 
    Earth = withEntity(new Earth2PhysicalEntity(world, "Earth1", scope));
    Moon = withEntity(new Moon2PhysicalEntity(world, "Moon1", scope));

    // Initialize them 
    Earth.init(this, world);
    Moon.init(this, world);
  }

  public static class Earth2PhysicalEntity extends PlanetAbstractEntity<EarthDemoSystemScope> {

    public Earth2PhysicalEntity(World world, String name, EarthDemoSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final EarthDemoSystemScope scope, final World world) {
      // Escape this for nested forces 
      Earth2PhysicalEntity currentEntity = this;

      // Set static properties of Earth 
      this.setMass(((Number) new BigInteger("800")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("0"))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));
      this.getBody().setAngularVel(VectorHelper.fromInternal(new InternalVector(((Number) new BigInteger("0")), AH.div(((Number) (AH.mul(((Number) new BigInteger("360")), ((Number) new BigDecimal("0.01745328627927352441191151881987859").setScale(35, RoundingMode.DOWN))))), ((Number) (AH.mul(((Number) new BigInteger("1")), ((Number) new BigInteger("1")))))), ((Number) new BigInteger("0")))));

      //  Forces and visual of the parent objects of Earth 
      super.init(scope, world);

      //  Styles (if any) and forces 
      propertiesBuilder.set(PropKey.TEXTURE, new ImageTexture("https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Land_shallow_topo_2048.jpg/1024px-Land_shallow_topo_2048.jpg"));
      this.getForces().addAll(Arrays.asList());
    }
  }
  public static class Moon2PhysicalEntity extends PlanetAbstractEntity<EarthDemoSystemScope> {

    public Moon2PhysicalEntity(World world, String name, EarthDemoSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final EarthDemoSystemScope scope, final World world) {
      // Escape this for nested forces 
      Moon2PhysicalEntity currentEntity = this;

      // Set static properties of Moon 
      this.setMass(((Number) new BigInteger("100")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) (AH.mul(((Number) new BigDecimal("0.0").setScale(1, RoundingMode.DOWN)), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigDecimal("0.0").setScale(1, RoundingMode.DOWN)), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigDecimal("20.0").setScale(1, RoundingMode.DOWN)), ((Number) new BigInteger("1")))))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getAbsoluteInitialVelocity(new InternalVector(((Number) (AH.mul(((Number) new BigDecimal("16.0").setScale(1, RoundingMode.DOWN)), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigDecimal("0.0").setScale(1, RoundingMode.DOWN)), ((Number) new BigInteger("1"))))), ((Number) (AH.mul(((Number) new BigDecimal("9.797174393178826E-16").setScale(31, RoundingMode.DOWN)), ((Number) new BigInteger("1")))))))));

      //  Forces and visual of the parent objects of Moon 
      super.init(scope, world);

      //  Styles (if any) and forces 
      propertiesBuilder.set(PropKey.TEXTURE, new ImageTexture("https://moon.nasa.gov/system/resources/detail_files/119_colormap_1500.jpg"));
      propertiesBuilder.set(PropKey.TRACE, new FiniteTraceHandler(new Color(220, 220, 220)));
      this.getForces().addAll(Arrays.asList());
    }
  }

}
