package jetbrains.mps.samples.Physics.examples;

/*Generated by MPS */

import jetbrains.mps.samples.Physics.java.runtime.objects.SystemScope;
import jetbrains.mps.samples.Physics.java.runtime.objects.PhysicalEntity;
import jetbrains.mps.samples.Physics.java.runtime.objects.World;
import jetbrains.mps.samples.Physics.java.common.vectors.VectorLike;
import org.ode4j.math.DMatrix3C;
import java.math.BigInteger;
import jetbrains.mps.samples.Physics.java.runtime.VectorHelper;
import jetbrains.mps.samples.Physics.java.common.vectors.InternalVector;
import org.iets3.core.expr.genjava.simpleTypes.rt.rt.AH;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.builder.PropKey;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Arrays;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.ColorTexture;
import jetbrains.mps.samples.Physics.java.runtime.objects.rendering.Color;
import jetbrains.mps.samples.Physics.java.runtime.objects.forces.Force;
import org.ode4j.math.DVector3C;

public class TorqueSystemScope extends SystemScope {
  public final PhysicalEntity Light;
  public final PhysicalEntity SampleBox;

  public TorqueSystemScope(World world, VectorLike position, VectorLike velocity, DMatrix3C rotation) {
    super(position, velocity, rotation);
    // Save this as scope (to simplify generated mapping) 
    final TorqueSystemScope scope = this;

    //  Instanciate objects 
    Light = withEntity(new Light2PhysicalEntity(world, "Light1", scope));
    SampleBox = withEntity(new SampleBox2PhysicalEntity(world, "SampleBox1", scope));

    // Initialize them 
    Light.init(this, world);
    SampleBox.init(this, world);
  }

  public static class Light2PhysicalEntity extends BaseObjectAbstractEntity<TorqueSystemScope> {

    public Light2PhysicalEntity(World world, String name, TorqueSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final TorqueSystemScope scope, final World world) {
      // Escape this for nested forces 
      Light2PhysicalEntity currentEntity = this;

      // Set static properties of Light 
      this.setMass(((Number) new BigInteger("1")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(AH.mul(((Number) new BigInteger("60")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("60")), ((Number) new BigInteger("1"))), AH.mul(((Number) new BigInteger("60")), ((Number) new BigInteger("1")))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of Light 
      super.init(scope, world);

      //  Styles (if any) and forces 
      propertiesBuilder.set(PropKey.EMIT_LIGHT, true);
      propertiesBuilder.set(PropKey.SPHERE_RADIUS, AH.mul(((Number) new BigDecimal("0.1").setScale(1, RoundingMode.DOWN)), ((Number) new BigInteger("1"))));
      this.getForces().addAll(Arrays.asList());
    }
  }
  public static class SampleBox2PhysicalEntity extends BaseObjectAbstractEntity<TorqueSystemScope> {

    public SampleBox2PhysicalEntity(World world, String name, TorqueSystemScope scope) {
      super(world, name, scope);
    }

    @Override
    public void init(final TorqueSystemScope scope, final World world) {
      // Escape this for nested forces 
      SampleBox2PhysicalEntity currentEntity = this;

      // Set static properties of SampleBox 
      this.setMass(((Number) new BigInteger("50")));
      this.getBody().setPosition(VectorHelper.fromInternal(scope.getAbsoluteInitialPosition(new InternalVector(((Number) new BigInteger("0")), ((Number) new BigInteger("0")), ((Number) new BigInteger("0"))))));
      this.getBody().setLinearVel(VectorHelper.fromInternal(scope.getInitialVelocity()));

      //  Forces and visual of the parent objects of SampleBox 
      super.init(scope, world);

      //  Styles (if any) and forces 
      propertiesBuilder.set(PropKey.SHAPE, "box");
      propertiesBuilder.set(PropKey.TEXTURE, new ColorTexture(new Color(255, 0, 0), null));
      propertiesBuilder.set(PropKey.BOX_X, AH.mul(((Number) new BigInteger("50")), ((Number) new BigInteger("1"))));
      propertiesBuilder.set(PropKey.BOX_Y, AH.mul(((Number) new BigInteger("30")), ((Number) new BigInteger("1"))));
      propertiesBuilder.set(PropKey.BOX_Z, AH.mul(((Number) new BigInteger("10")), ((Number) new BigInteger("1"))));
      this.getForces().addAll(Arrays.asList(new Force<TorqueSystemScope>() {

        @Override
        public DVector3C linearForce(World world, TorqueSystemScope scope, PhysicalEntity currentEntity, double time) {

          return null;
        }

        @Override
        public DVector3C moment(World world, TorqueSystemScope scope, PhysicalEntity currentEntity, double time) {
          return VectorHelper.toDVector3C(new InternalVector(AH.mul(((Number) new BigInteger("3")), ((Number) new BigInteger("1"))), ((Number) new BigInteger("0")), ((Number) new BigInteger("0"))));
        }

        @Override
        public DVector3C applicationPoint(World world, TorqueSystemScope scope, PhysicalEntity currentEntity, double time) {
          return null;
        }

        @Override
        public int forceMode() {
          return 10;
        }
      }, new Force<TorqueSystemScope>() {

        @Override
        public DVector3C linearForce(World world, TorqueSystemScope scope, PhysicalEntity currentEntity, double time) {

          return null;
        }

        @Override
        public DVector3C moment(World world, TorqueSystemScope scope, PhysicalEntity currentEntity, double time) {
          return VectorHelper.toDVector3C(new InternalVector(((Number) new BigInteger("0")), AH.mul(((Number) new BigInteger("1")), ((Number) new BigInteger("1"))), ((Number) new BigInteger("0"))));
        }

        @Override
        public DVector3C applicationPoint(World world, TorqueSystemScope scope, PhysicalEntity currentEntity, double time) {
          return null;
        }

        @Override
        public int forceMode() {
          return 10;
        }
      }));
    }
  }

}
