package main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.samples.Physics.plugin.PositioningResolver;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static void mappingScript_CodeBlock_1(final MappingScriptContext _context) {
    ListSequence.fromList(SModelOperations.roots(_context.getModel(), CONCEPTS.Simulation$oX)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        PositioningResolver.resolveAll(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.world$qRPN), LINKS.target$12L0));
      }
    });

  }
  public static void mappingScript_CodeBlock_2(final MappingScriptContext _context) {
    final SNode originalRef = createAbstractObjectReference_x583g4_a0a0c();
    final SNode baseObject = SNodeOperations.copyNode(SLinkOperations.getTarget(originalRef, LINKS.target$OiAw));

    // Set BaseObject the root of all objects (to apply default styles) 
    ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.AbstractObjectDefinition$O)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, LINKS.parent$OiBt) == null) || SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.parent$OiBt), LINKS.target$OiAw) == SLinkOperations.getTarget(originalRef, LINKS.target$OiAw);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SLinkOperations.setTarget(it, LINKS.parent$OiBt, createAbstractObjectReference_x583g4_a0a0a0a0e0c(baseObject));
      }
    });

    SModelOperations.addRootNode(_context.getModel(), baseObject);
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("3489632902467729511", new SCB(i++));
    mscbMethods.put("1159415042436192181", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(mscbMethods.containsKey(id))) {
      return super.getScriptCodeBlock(identity);
    }
    return mscbMethods.get(id);
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_1(ctx);
          return;
        case 1:
          QueriesGenerated.mappingScript_CodeBlock_2(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }
  private static SNode createAbstractObjectReference_x583g4_a0a0c() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.AbstractObjectReference$1j);
    n0.setReference(LINKS.target$OiAw, new SNodePointer(facade.createModelReference("r:aa986633-cc42-458c-810b-5cb4eea90bce(jetbrains.mps.samples.Physics.baseobject)"), facade.createNodeId("1159415042435848499")));
    return n0.getResult();
  }
  private static SNode createAbstractObjectReference_x583g4_a0a0a0a0e0c(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.AbstractObjectReference$1j);
    n0.setReferenceTarget(LINKS.target$OiAw, p0);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Simulation$oX = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, "jetbrains.mps.samples.Physics.structure.Simulation");
    /*package*/ static final SConcept AbstractObjectDefinition$O = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e43L, "jetbrains.mps.samples.Physics.structure.AbstractObjectDefinition");
    /*package*/ static final SConcept AbstractObjectReference$1j = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e44L, "jetbrains.mps.samples.Physics.structure.AbstractObjectReference");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink world$qRPN = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, 0x3cd406ea6def9f02L, "world");
    /*package*/ static final SReferenceLink target$12L0 = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x5d5cbb75843c860L, 0x5d5cbb75843c861L, "target");
    /*package*/ static final SReferenceLink target$OiAw = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e44L, 0x1441545e2a5b1e45L, "target");
    /*package*/ static final SContainmentLink parent$OiBt = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e43L, 0x1441545e2a5b1e47L, "parent");
  }
}
