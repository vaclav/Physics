package jetbrains.mps.samples.Physics.plugin;

/*Generated by MPS */

import java.math.MathContext;
import java.math.BigDecimal;

public class InternalVector {
  private static final MathContext ctx = new MathContext(10);
  public BigDecimal x;
  public BigDecimal y;
  public BigDecimal z;

  public InternalVector(BigDecimal x, BigDecimal y, BigDecimal z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }

  public BigDecimal lengthSquared() {
    return x.pow(2).add(y.pow(2)).add(z.pow(2));
  }

  public BigDecimal length() {
    return lengthSquared().sqrt(ctx);
  }

  /**
   * Compute and returns the polar angle (theta / θ)
   * 
   * @return polar angle
   */
  public BigDecimal getPolarAngle() {
    double acos = Math.acos(z.divide(length()).doubleValue());
    return BigDecimal.valueOf(acos);
  }

  /**
   * Compute and returns the azimuthal angle (phi / φ)
   * 
   * @return azimutal angle
   */
  public BigDecimal getAzimutalAngle() {
    double atan = Math.atan(y.divide(x).doubleValue());
    return BigDecimal.valueOf(atan);
  }


  /**
   * Get an internal vector from spherical coordinates
   */
  public static InternalVector fromSpherical(BigDecimal length, BigDecimal theta, BigDecimal phi) {
    double thetaDouble = theta.doubleValue();
    double phiDouble = phi.doubleValue();
    BigDecimal sinTheta = BigDecimal.valueOf(Math.sin(thetaDouble));

    return new InternalVector(length.multiply(sinTheta).multiply(BigDecimal.valueOf(Math.cos(phiDouble))), length.multiply(sinTheta).multiply(BigDecimal.valueOf(Math.sin(phiDouble))), length.multiply(BigDecimal.valueOf(Math.cos(thetaDouble))));
  }

}
