package jetbrains.mps.samples.Physics.plugin;

/*Generated by MPS */

import java.math.MathContext;
import java.math.BigDecimal;
import java.math.RoundingMode;

public class InternalVector {
  private static final MathContext ctx = MathContext.DECIMAL128;
  public BigDecimal x;
  public BigDecimal y;
  public BigDecimal z;

  public InternalVector(BigDecimal x, BigDecimal y, BigDecimal z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }

  public InternalVector toUnit() {
    BigDecimal length = length();
    return new InternalVector(x.divide(length, ctx), y.divide(length, ctx), z.divide(length, ctx));
  }
  public InternalVector add(InternalVector v) {
    return new InternalVector(x.add(v.x, ctx), y.add(v.y, ctx), z.add(v.z, ctx));
  }
  public InternalVector minus(InternalVector v) {
    return new InternalVector(x.subtract(v.x, ctx), y.subtract(v.y, ctx), z.subtract(v.z, ctx));
  }
  public InternalVector mul(BigDecimal factor) {
    return new InternalVector(x.multiply(factor, ctx), y.multiply(factor, ctx), z.multiply(factor, ctx));
  }
  public InternalVector resize(BigDecimal newLength) {
    InternalVector unit = this.mul(BigDecimal.ONE.divide(length(), ctx));
    return (BigDecimal.ONE.equals(newLength) ? unit : unit.mul(newLength));
  }

  public BigDecimal lengthSquared() {
    return x.pow(2, ctx).add(y.pow(2, ctx), ctx).add(z.pow(2, ctx), ctx);
  }

  public BigDecimal length() {
    return lengthSquared().sqrt(ctx);
  }

  /**
   * Compute and returns the polar angle (theta / θ)
   * 
   * @return polar angle
   */
  public BigDecimal getPolarAngle() {
    double acos = Math.acos(z.divide(length(), ctx).doubleValue());
    return BigDecimal.valueOf(acos);
  }

  /**
   * Compute and returns the azimuthal angle (phi / φ)
   * 
   * @return azimutal angle
   */
  public BigDecimal getAzimutalAngle() {
    double atan = Math.atan(y.divide(x, ctx).doubleValue());
    return BigDecimal.valueOf(atan);
  }


  /**
   * Get an internal vector from spherical coordinates
   */
  public static InternalVector fromSpherical(BigDecimal length, BigDecimal theta, BigDecimal phi) {
    double thetaDouble = theta.doubleValue();
    double phiDouble = phi.doubleValue();
    BigDecimal sinTheta = BigDecimal.valueOf(Math.sin(thetaDouble));

    return new InternalVector(length.multiply(sinTheta, ctx).multiply(BigDecimal.valueOf(Math.cos(phiDouble)), ctx), length.multiply(sinTheta, ctx).multiply(BigDecimal.valueOf(Math.sin(phiDouble)), ctx), length.multiply(BigDecimal.valueOf(Math.cos(thetaDouble)), ctx));
  }

  public static InternalVector zero() {
    return new InternalVector(BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO);
  }


  @Override
  public String toString() {
    return "[" + "x=" + x.setScale(2, RoundingMode.HALF_UP) + ", y=" + y.setScale(2, RoundingMode.HALF_UP) + ", z=" + z.setScale(2, RoundingMode.HALF_UP) + "]";
  }
}
