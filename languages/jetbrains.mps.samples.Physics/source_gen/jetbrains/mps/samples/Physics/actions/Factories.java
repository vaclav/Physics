package jetbrains.mps.samples.Physics.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class Factories {
  public static class NodeFactory_7746015835359887684 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.RelativePosition$bt)) {
          SLinkOperations.setTarget(newNode, LINKS.relativeFrom$tMdv, SLinkOperations.getTarget(pos, LINKS.relativeFrom$tMdv));
        }
      }
    }
  }
  public static class NodeFactory_7746015835360008992 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.AbsolutePosition$Ws)) {
          SPropertyOperations.assign(newNode, PROPS.x$5qM0, SPropertyOperations.getInteger(pos, PROPS.x$5qM0));
          SPropertyOperations.assign(newNode, PROPS.y$5qMY, SPropertyOperations.getInteger(pos, PROPS.y$5qMY));
          SPropertyOperations.assign(newNode, PROPS.z$5qOr, SPropertyOperations.getInteger(pos, PROPS.z$5qOr));
        }
      }
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.RelativeCartesianPosition$rV)) {
          SPropertyOperations.assign(newNode, PROPS.x$5qM0, SPropertyOperations.getInteger(pos, PROPS.dx$5r22));
          SPropertyOperations.assign(newNode, PROPS.y$5qMY, SPropertyOperations.getInteger(pos, PROPS.dy$5r30));
          SPropertyOperations.assign(newNode, PROPS.z$5qOr, SPropertyOperations.getInteger(pos, PROPS.dz$5r4t));
        }
      }
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.RelativePolarPosition$qu)) {
          SPropertyOperations.assign(newNode, PROPS.x$5qM0, SPropertyOperations.getInteger(pos, PROPS.angleX$5rkS));
          SPropertyOperations.assign(newNode, PROPS.y$5qMY, SPropertyOperations.getInteger(pos, PROPS.angleY$5rw1));
          SPropertyOperations.assign(newNode, PROPS.z$5qOr, SPropertyOperations.getInteger(pos, PROPS.angleZ$5rxu));
        }
      }
    }
  }
  public static class NodeFactory_7746015835360021003 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.AbsolutePosition$Ws)) {
          SPropertyOperations.assign(newNode, PROPS.dx$5r22, SPropertyOperations.getInteger(pos, PROPS.x$5qM0));
          SPropertyOperations.assign(newNode, PROPS.dy$5r30, SPropertyOperations.getInteger(pos, PROPS.y$5qMY));
          SPropertyOperations.assign(newNode, PROPS.dz$5r4t, SPropertyOperations.getInteger(pos, PROPS.z$5qOr));
        }
      }
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.RelativeCartesianPosition$rV)) {
          SPropertyOperations.assign(newNode, PROPS.dx$5r22, SPropertyOperations.getInteger(pos, PROPS.dx$5r22));
          SPropertyOperations.assign(newNode, PROPS.dy$5r30, SPropertyOperations.getInteger(pos, PROPS.dy$5r30));
          SPropertyOperations.assign(newNode, PROPS.dz$5r4t, SPropertyOperations.getInteger(pos, PROPS.dz$5r4t));
        }
      }
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.RelativePolarPosition$qu)) {
          SPropertyOperations.assign(newNode, PROPS.dx$5r22, SPropertyOperations.getInteger(pos, PROPS.angleX$5rkS));
          SPropertyOperations.assign(newNode, PROPS.dy$5r30, SPropertyOperations.getInteger(pos, PROPS.angleY$5rw1));
          SPropertyOperations.assign(newNode, PROPS.dz$5r4t, SPropertyOperations.getInteger(pos, PROPS.angleZ$5rxu));
        }
      }
    }
  }
  public static class NodeFactory_7746015835360026452 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.AbsolutePosition$Ws)) {
          SPropertyOperations.assign(newNode, PROPS.angleX$5rkS, SPropertyOperations.getInteger(pos, PROPS.x$5qM0));
          SPropertyOperations.assign(newNode, PROPS.angleY$5rw1, SPropertyOperations.getInteger(pos, PROPS.y$5qMY));
          SPropertyOperations.assign(newNode, PROPS.angleZ$5rxu, SPropertyOperations.getInteger(pos, PROPS.z$5qOr));
          SPropertyOperations.assign(newNode, PROPS.distance$5rzq, 0);
        }
      }
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.RelativeCartesianPosition$rV)) {
          SPropertyOperations.assign(newNode, PROPS.angleX$5rkS, SPropertyOperations.getInteger(pos, PROPS.dx$5r22));
          SPropertyOperations.assign(newNode, PROPS.angleY$5rw1, SPropertyOperations.getInteger(pos, PROPS.dy$5r30));
          SPropertyOperations.assign(newNode, PROPS.angleZ$5rxu, SPropertyOperations.getInteger(pos, PROPS.dz$5r4t));
          SPropertyOperations.assign(newNode, PROPS.distance$5rzq, 0);
        }
      }
      {
        final SNode pos = sampleNode;
        if (SNodeOperations.isInstanceOf(pos, CONCEPTS.RelativePolarPosition$qu)) {
          SPropertyOperations.assign(newNode, PROPS.angleX$5rkS, SPropertyOperations.getInteger(pos, PROPS.angleX$5rkS));
          SPropertyOperations.assign(newNode, PROPS.angleY$5rw1, SPropertyOperations.getInteger(pos, PROPS.angleY$5rw1));
          SPropertyOperations.assign(newNode, PROPS.angleZ$5rxu, SPropertyOperations.getInteger(pos, PROPS.angleZ$5rxu));
          SPropertyOperations.assign(newNode, PROPS.distance$5rzq, SPropertyOperations.getInteger(pos, PROPS.distance$5rzq));
        }
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RelativePosition$bt = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282df4L, "jetbrains.mps.samples.Physics.structure.RelativePosition");
    /*package*/ static final SConcept AbsolutePosition$Ws = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282deaL, "jetbrains.mps.samples.Physics.structure.AbsolutePosition");
    /*package*/ static final SConcept RelativeCartesianPosition$rV = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282e01L, "jetbrains.mps.samples.Physics.structure.RelativeCartesianPosition");
    /*package*/ static final SConcept RelativePolarPosition$qu = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282dfeL, "jetbrains.mps.samples.Physics.structure.RelativePolarPosition");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink relativeFrom$tMdv = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282df4L, 0x6b7f605cb32fba86L, "relativeFrom");
  }

  private static final class PROPS {
    /*package*/ static final SProperty x$5qM0 = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282deaL, 0x6b7f605cb3282debL, "x");
    /*package*/ static final SProperty y$5qMY = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282deaL, 0x6b7f605cb3282dedL, "y");
    /*package*/ static final SProperty z$5qOr = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282deaL, 0x6b7f605cb3282df0L, "z");
    /*package*/ static final SProperty dx$5r22 = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282e01L, 0x6b7f605cb3282df5L, "dx");
    /*package*/ static final SProperty dy$5r30 = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282e01L, 0x6b7f605cb3282df7L, "dy");
    /*package*/ static final SProperty dz$5r4t = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282e01L, 0x6b7f605cb3282dfaL, "dz");
    /*package*/ static final SProperty angleX$5rkS = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282dfeL, 0x6b7f605cb3282e07L, "angleX");
    /*package*/ static final SProperty angleY$5rw1 = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282dfeL, 0x6b7f605cb3282e09L, "angleY");
    /*package*/ static final SProperty angleZ$5rxu = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282dfeL, 0x6b7f605cb3282e0cL, "angleZ");
    /*package*/ static final SProperty distance$5rzq = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3282dfeL, 0x6b7f605cb3282e10L, "distance");
  }
}
