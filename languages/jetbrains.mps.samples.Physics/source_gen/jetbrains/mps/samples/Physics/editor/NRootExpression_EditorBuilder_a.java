package jetbrains.mps.samples.Physics.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import java.awt.geom.Rectangle2D;
import java.util.List;
import de.itemis.mps.editor.math.runtime.IMathSymbol;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import de.itemis.mps.editor.math.runtime.MathCellLayout;
import de.itemis.mps.editor.math.runtime.MathLayoutableCell;
import de.itemis.mps.editor.math.runtime.EditorCell_MathBase;
import java.awt.Graphics2D;
import java.awt.Color;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.awt.RenderingHints;
import java.awt.geom.Path2D;
import de.itemis.mps.editor.math.runtime.MathDrawUtil;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_DeleteSmart;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SEmptyContainmentSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/*package*/ class NRootExpression_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public NRootExpression_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createMathBase_1();
  }

  private EditorCell createMathBase_0(EditorContext editorContext, SNode node) {
    double[] scales = new double[]{0.75, 1.0};
    final double[] shared_bodynSpace = new double[1];
    final Rectangle2D.Double[] shared_nBounds = new Rectangle2D.Double[1];
    final List<IMathSymbol> symbols = ListSequence.fromList(new ArrayList<IMathSymbol>());
    MathCellLayout layout = new MathCellLayout() {
      protected void layout(MathLayoutableCell cell, List<MathLayoutableCell> childCells, List<IMathSymbol> symbols) {
        if (ListSequence.fromList(childCells).getElement(0) == null) {
          shared_nBounds[0] = new Rectangle2D.Double(0, 0, 0, ListSequence.fromList(childCells).getElement(1).getHeight() / 2);
        } else {
          shared_nBounds[0] = new Rectangle2D.Double();
          shared_nBounds[0].setRect(ListSequence.fromList(childCells).getElement(0).getBounds());
        }

        shared_bodynSpace[0] = Math.pow(ListSequence.fromList(childCells).getElement(1).getHeight(), 0.5);
        shared_nBounds[0].width = Math.max(shared_nBounds[0].width, shared_bodynSpace[0] * 2);

        if (ListSequence.fromList(childCells).getElement(0) != null) {
          shared_nBounds[0].x = 0;
          shared_nBounds[0].y = 1;
        }
        ListSequence.fromList(childCells).getElement(1).setX(shared_nBounds[0].width + shared_bodynSpace[0]);
        ListSequence.fromList(childCells).getElement(1).setY(shared_nBounds[0].height - ListSequence.fromList(childCells).getElement(1).getHeight() * 0.5 + 2);

        if (ListSequence.fromList(childCells).getElement(1).getY() < 3) {
          shared_nBounds[0].y = -ListSequence.fromList(childCells).getElement(1).getY() + 1;
          ListSequence.fromList(childCells).getElement(1).setY(3);
        }
        cell.setHeight(ListSequence.fromList(childCells).getElement(1).getBounds().getMaxY() + 2);

        if (ListSequence.fromList(childCells).getElement(0) != null) {
          ListSequence.fromList(childCells).getElement(0).setX(shared_nBounds[0].getX());
          ListSequence.fromList(childCells).getElement(0).setY(shared_nBounds[0].getMaxY() - ListSequence.fromList(childCells).getElement(0).getHeight());
        }
        cell.setWidth(shared_nBounds[0].width + shared_bodynSpace[0] + ListSequence.fromList(childCells).getElement(1).getWidth() + 8);
      }

      @Override
      protected int getCenterY(MathLayoutableCell cell, List<MathLayoutableCell> childCells, List<IMathSymbol> symbols) {
        return (int) (shared_nBounds[0].getMaxY() - cell.getY());
      }
    };
    EditorCell_MathBase editorCell = new EditorCell_MathBase(editorContext, node, layout, scales, symbols) {
      protected void paint(Graphics2D g, List<MathLayoutableCell> childCells, MathLayoutableCell cell, List<IMathSymbol> symbols) {
        Color symbolColor = cell.getEditorCell().getStyle().get(StyleAttributes.getInstance().<Color>getAttribute("de.itemis.mps.editor.math", "math-symbol-color"));
        if (symbolColor == null) {
          symbolColor = cell.getEditorCell().getStyle().get(StyleAttributes.TEXT_COLOR);
        }

        for (IMathSymbol symbol : ListSequence.fromList(symbols).where(new IWhereFilter<IMathSymbol>() {
          public boolean accept(IMathSymbol it) {
            return it != null && it.isDrawAutomatically();
          }
        })) {
          Graphics2D g2 = (Graphics2D) g.create();
          g2.setColor(symbolColor);
          g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
          g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
          g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
          symbol.paint(g2);
          g2.dispose();
        }
        Rectangle2D bodyBounds = ListSequence.fromList(childCells).getElement(1).getBounds();
        Path2D.Double pathAll = new Path2D.Double();
        pathAll.moveTo(shared_nBounds[0].getX(), shared_nBounds[0].getMaxY());
        pathAll.lineTo(shared_nBounds[0].getMaxX() - shared_bodynSpace[0], shared_nBounds[0].getMaxY());
        pathAll.lineTo(shared_nBounds[0].getMaxX(), bodyBounds.getMaxY());
        pathAll.lineTo(ListSequence.fromList(childCells).getElement(1).getX(), ListSequence.fromList(childCells).getElement(1).getY() - 1);
        pathAll.lineTo(bodyBounds.getMaxX() + 2, ListSequence.fromList(childCells).getElement(1).getY() - 1);
        pathAll.lineTo(bodyBounds.getMaxX() + 2, ListSequence.fromList(childCells).getElement(1).getY() + 5);
        new MathDrawUtil(g).setThinStroke(ListSequence.fromList(childCells).getElement(1).getBounds());
        g.draw(pathAll);


        double thickUpperRight = shared_nBounds[0].getMaxX() - shared_bodynSpace[0];
        double thickTop = shared_nBounds[0].getMaxY();
        double thickLowerRight = shared_nBounds[0].getMaxX() + 1;
        double thickBottom = bodyBounds.getMaxY() + 1;

        double thickness = (thickBottom - thickTop) / 17;

        double thickUpperLeft = thickUpperRight - thickness;
        double thickLowerLeft = thickLowerRight - thickness;

        Path2D.Double pathThick = new Path2D.Double();
        pathThick.moveTo(thickUpperRight, thickTop);
        pathThick.lineTo(thickLowerRight, thickBottom);
        pathThick.lineTo(thickLowerLeft, thickBottom);
        pathThick.lineTo(thickUpperLeft, thickTop);
        pathThick.closePath();
        new MathDrawUtil(g).setThinStroke(ListSequence.fromList(childCells).getElement(1).getBounds());
        g.fill(pathThick);
      }
      @Override
      protected void init(SNode node, List<MathLayoutableCell> childCells, MathLayoutableCell cell, List<IMathSymbol> symbols) {
      }
    };
    editorCell.setCellId("MathBase_qk9sgi_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createRefNode_0());
    editorCell.addEditorCell(createRefNode_1());
    editorCell.init();
    return editorCell;
  }
  private EditorCell createMathBase_1() {
    return createMathBase_0(getEditorContext(), myNode);
  }
  private EditorCell createRefNode_0() {
    SingleRoleCellProvider provider = new exponentSingleRoleHandler_qk9sgi_a0a(myNode, LINKS.exponent$SsDH, getEditorContext());
    return provider.createCell();
  }
  private static class exponentSingleRoleHandler_qk9sgi_a0a extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public exponentSingleRoleHandler_qk9sgi_a0a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.exponent$SsDH, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.exponent$SsDH, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.exponent$SsDH);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.exponent$SsDH));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_exponent");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no exponent>";
    }
  }
  private EditorCell createRefNode_1() {
    SingleRoleCellProvider provider = new expressionSingleRoleHandler_qk9sgi_a1a(myNode, LINKS.expression$tVRI, getEditorContext());
    return provider.createCell();
  }
  private static class expressionSingleRoleHandler_qk9sgi_a1a extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public expressionSingleRoleHandler_qk9sgi_a1a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.expression$tVRI, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.expression$tVRI, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.expression$tVRI);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.expression$tVRI));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_expression");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no expression>";
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink exponent$SsDH = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x5abff817741099d3L, 0x5abff8177410ff45L, "exponent");
    /*package*/ static final SContainmentLink expression$tVRI = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x5abff817741099d3L, 0x5abff81774111c3aL, "expression");
  }
}
