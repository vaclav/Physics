package jetbrains.mps.samples.Physics.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class trace_isTexture_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public trace_isTexture_SubtypingRule() {
  }
  public SNode getSubOrSuperType(SNode traceStyleKey, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    return createTextureStyleKey_oe1l1_a0a1();
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.TraceStyleKey$P4;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean isWeak() {
    return false;
  }
  public boolean surelyKeepsConcept() {
    return true;
  }
  private static SNode createTextureStyleKey_oe1l1_a0a1() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.TextureStyleKey$PE);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TraceStyleKey$P4 = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x19a1be2f7ee8f855L, "jetbrains.mps.samples.Physics.structure.TraceStyleKey");
    /*package*/ static final SConcept TextureStyleKey$PE = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x101711d69774b3a0L, "jetbrains.mps.samples.Physics.structure.TextureStyleKey");
  }
}
