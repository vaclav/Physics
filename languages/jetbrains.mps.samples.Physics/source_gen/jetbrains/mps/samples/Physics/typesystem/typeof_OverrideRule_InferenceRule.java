package jetbrains.mps.samples.Physics.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_OverrideRule_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_OverrideRule_InferenceRule() {
  }
  public void applyRule(final SNode overrideRule, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode targetType = typeCheckingContext.typeOf(SLinkOperations.getTarget(overrideRule, LINKS.target$ne7z), "r:34dc5c2b-d71f-4a9a-9011-74cd28ad1a10(jetbrains.mps.samples.Physics.typesystem)", "3004491438924289742", true);
      typeCheckingContext.whenConcrete(targetType, new Runnable() {
        public void run() {
          {
            final SNode replaceType = typeCheckingContext.typeOf(SLinkOperations.getTarget(overrideRule, LINKS.newValue$njwU), "r:34dc5c2b-d71f-4a9a-9011-74cd28ad1a10(jetbrains.mps.samples.Physics.typesystem)", "3004491438924291210", true);
            typeCheckingContext.whenConcrete(replaceType, new Runnable() {
              public void run() {
                if (!(typeCheckingContext.isSingleTypeComputation())) {
                  {
                    SNode _nodeToCheck_1029348928467 = overrideRule;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:34dc5c2b-d71f-4a9a-9011-74cd28ad1a10(jetbrains.mps.samples.Physics.typesystem)", "3004491438924292703", 0, null);
                    typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.getExpandedNode(replaceType), (SNode) typeCheckingContext.getExpandedNode(targetType), true, true, _info_12389875345);
                  }
                }
              }
            }, "r:34dc5c2b-d71f-4a9a-9011-74cd28ad1a10(jetbrains.mps.samples.Physics.typesystem)", "3004491438924291160", false, false);
          }
        }
      }, "r:34dc5c2b-d71f-4a9a-9011-74cd28ad1a10(jetbrains.mps.samples.Physics.typesystem)", "3004491438924289680", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.OverrideRule$Db;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink target$ne7z = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3238375e772f9fedL, 0x3238375e772f9feeL, "target");
    /*package*/ static final SContainmentLink newValue$njwU = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3238375e772f9fedL, 0x3238375e772f9ff0L, "newValue");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept OverrideRule$Db = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3238375e772f9fedL, "jetbrains.mps.samples.Physics.structure.OverrideRule");
  }
}
