package jetbrains.mps.samples.Physics.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myInteractionForce__BehaviorDescriptor = new InteractionForce__BehaviorDescriptor();
  private final BHDescriptor myInteractedObjectExpression__BehaviorDescriptor = new InteractedObjectExpression__BehaviorDescriptor();
  private final BHDescriptor myCurrentObjectExpression__BehaviorDescriptor = new CurrentObjectExpression__BehaviorDescriptor();
  private final BHDescriptor myObjectDistanceWithTarget__BehaviorDescriptor = new ObjectDistanceWithTarget__BehaviorDescriptor();
  private final BHDescriptor myVectorOppositeTarget__BehaviorDescriptor = new VectorOppositeTarget__BehaviorDescriptor();
  private final BHDescriptor myITargetObject__BehaviorDescriptor = new ITargetObject__BehaviorDescriptor();
  private final BHDescriptor myITargetExpression__BehaviorDescriptor = new ITargetExpression__BehaviorDescriptor();
  private final BHDescriptor myTargetableObjectExpression__BehaviorDescriptor = new TargetableObjectExpression__BehaviorDescriptor();
  private final BHDescriptor myAbstractForceCallParameter__BehaviorDescriptor = new AbstractForceCallParameter__BehaviorDescriptor();
  private final BHDescriptor myShapeStyleKey__BehaviorDescriptor = new ShapeStyleKey__BehaviorDescriptor();
  private final BHDescriptor myTextureStyleKey__BehaviorDescriptor = new TextureStyleKey__BehaviorDescriptor();
  private final BHDescriptor myForce__BehaviorDescriptor = new Force__BehaviorDescriptor();
  private final BHDescriptor myStaticForce__BehaviorDescriptor = new StaticForce__BehaviorDescriptor();
  private final BHDescriptor myDynamicForce__BehaviorDescriptor = new DynamicForce__BehaviorDescriptor();
  private final BHDescriptor myAbstractObjectDefinition__BehaviorDescriptor = new AbstractObjectDefinition__BehaviorDescriptor();
  private final BHDescriptor myVectorExpression__BehaviorDescriptor = new VectorExpression__BehaviorDescriptor();
  private final BHDescriptor myAbstractForceCall__BehaviorDescriptor = new AbstractForceCall__BehaviorDescriptor();
  private final BHDescriptor myTraceStyleKey__BehaviorDescriptor = new TraceStyleKey__BehaviorDescriptor();
  private final BHDescriptor myIUseSpecificExpressions__BehaviorDescriptor = new IUseSpecificExpressions__BehaviorDescriptor();
  private final BHDescriptor myWorldNestedObjectTarget__BehaviorDescriptor = new WorldNestedObjectTarget__BehaviorDescriptor();
  private final BHDescriptor myCurrentWorldExpression__BehaviorDescriptor = new CurrentWorldExpression__BehaviorDescriptor();
  private final BHDescriptor myIMayTargetWorld__BehaviorDescriptor = new IMayTargetWorld__BehaviorDescriptor();
  private final BHDescriptor myIProvideCurrentWorld__BehaviorDescriptor = new IProvideCurrentWorld__BehaviorDescriptor();
  private final BHDescriptor myObjectAngularVelocityTarget__BehaviorDescriptor = new ObjectAngularVelocityTarget__BehaviorDescriptor();
  private final BHDescriptor myCollisionStyleKey__BehaviorDescriptor = new CollisionStyleKey__BehaviorDescriptor();
  private final BHDescriptor myObjectStyleDotTarget__BehaviorDescriptor = new ObjectStyleDotTarget__BehaviorDescriptor();
  private final BHDescriptor myStyleKey__BehaviorDescriptor = new StyleKey__BehaviorDescriptor();
  private final BHDescriptor myVectorResizeTarget__BehaviorDescriptor = new VectorResizeTarget__BehaviorDescriptor();
  private final BHDescriptor myAbstractForce__BehaviorDescriptor = new AbstractForce__BehaviorDescriptor();
  private final BHDescriptor myICanBeOverridden__BehaviorDescriptor = new ICanBeOverridden__BehaviorDescriptor();
  private final BHDescriptor myOverrideRule__BehaviorDescriptor = new OverrideRule__BehaviorDescriptor();
  private final BHDescriptor myIObjectDefinition__BehaviorDescriptor = new IObjectDefinition__BehaviorDescriptor();
  private final BHDescriptor myWorldInclusion__BehaviorDescriptor = new WorldInclusion__BehaviorDescriptor();
  private final BHDescriptor myILocalized__BehaviorDescriptor = new ILocalized__BehaviorDescriptor();
  private final BHDescriptor myIObjectDotTarget__BehaviorDescriptor = new IObjectDotTarget__BehaviorDescriptor();
  private final BHDescriptor myIWorldDotTarget__BehaviorDescriptor = new IWorldDotTarget__BehaviorDescriptor();
  private final BHDescriptor myConditionalForce__BehaviorDescriptor = new ConditionalForce__BehaviorDescriptor();
  private final BHDescriptor myIForceWithCache__BehaviorDescriptor = new IForceWithCache__BehaviorDescriptor();
  private final BHDescriptor myObjectVelocityTarget__BehaviorDescriptor = new ObjectVelocityTarget__BehaviorDescriptor();
  private final BHDescriptor myMomentForce__BehaviorDescriptor = new MomentForce__BehaviorDescriptor();
  private final BHDescriptor myICurrentObjectContext__BehaviorDescriptor = new ICurrentObjectContext__BehaviorDescriptor();
  private final BHDescriptor myCartesianCoordinates__BehaviorDescriptor = new CartesianCoordinates__BehaviorDescriptor();
  private final BHDescriptor myObjectMassTarget__BehaviorDescriptor = new ObjectMassTarget__BehaviorDescriptor();
  private final BHDescriptor myObjectPositionTarget__BehaviorDescriptor = new ObjectPositionTarget__BehaviorDescriptor();
  private final BHDescriptor myWorldMassCenterTarget__BehaviorDescriptor = new WorldMassCenterTarget__BehaviorDescriptor();
  private final BHDescriptor myVectorComponentTarget__BehaviorDescriptor = new VectorComponentTarget__BehaviorDescriptor();
  private final BHDescriptor myWorldDefinition__BehaviorDescriptor = new WorldDefinition__BehaviorDescriptor();
  private final BHDescriptor myObjectDefinition__BehaviorDescriptor = new ObjectDefinition__BehaviorDescriptor();
  private final BHDescriptor mySimulation__BehaviorDescriptor = new Simulation__BehaviorDescriptor();
  private final BHDescriptor myObjectReferenceExpression__BehaviorDescriptor = new ObjectReferenceExpression__BehaviorDescriptor();
  private final BHDescriptor myDirectionalCoordinates__BehaviorDescriptor = new DirectionalCoordinates__BehaviorDescriptor();
  private final BHDescriptor myIForceDotTarget__BehaviorDescriptor = new IForceDotTarget__BehaviorDescriptor();
  private final BHDescriptor mySimpleForce__BehaviorDescriptor = new SimpleForce__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAbstractForce__BehaviorDescriptor;
      case 1:
        return myAbstractForceCall__BehaviorDescriptor;
      case 2:
        return myAbstractForceCallParameter__BehaviorDescriptor;
      case 3:
        return myAbstractObjectDefinition__BehaviorDescriptor;
      case 4:
        return myCartesianCoordinates__BehaviorDescriptor;
      case 5:
        return myCollisionStyleKey__BehaviorDescriptor;
      case 6:
        return myConditionalForce__BehaviorDescriptor;
      case 7:
        return myCurrentObjectExpression__BehaviorDescriptor;
      case 8:
        return myCurrentWorldExpression__BehaviorDescriptor;
      case 9:
        return myDirectionalCoordinates__BehaviorDescriptor;
      case 10:
        return myDynamicForce__BehaviorDescriptor;
      case 11:
        return myForce__BehaviorDescriptor;
      case 12:
        return myICanBeOverridden__BehaviorDescriptor;
      case 13:
        return myICurrentObjectContext__BehaviorDescriptor;
      case 14:
        return myIForceDotTarget__BehaviorDescriptor;
      case 15:
        return myIForceWithCache__BehaviorDescriptor;
      case 16:
        return myILocalized__BehaviorDescriptor;
      case 17:
        return myIMayTargetWorld__BehaviorDescriptor;
      case 18:
        return myIObjectDefinition__BehaviorDescriptor;
      case 19:
        return myIObjectDotTarget__BehaviorDescriptor;
      case 20:
        return myIProvideCurrentWorld__BehaviorDescriptor;
      case 21:
        return myITargetExpression__BehaviorDescriptor;
      case 22:
        return myITargetObject__BehaviorDescriptor;
      case 23:
        return myIUseSpecificExpressions__BehaviorDescriptor;
      case 24:
        return myIWorldDotTarget__BehaviorDescriptor;
      case 25:
        return myInteractedObjectExpression__BehaviorDescriptor;
      case 26:
        return myInteractionForce__BehaviorDescriptor;
      case 27:
        return myMomentForce__BehaviorDescriptor;
      case 28:
        return myObjectAngularVelocityTarget__BehaviorDescriptor;
      case 29:
        return myObjectDefinition__BehaviorDescriptor;
      case 30:
        return myObjectDistanceWithTarget__BehaviorDescriptor;
      case 31:
        return myObjectMassTarget__BehaviorDescriptor;
      case 32:
        return myObjectPositionTarget__BehaviorDescriptor;
      case 33:
        return myObjectReferenceExpression__BehaviorDescriptor;
      case 34:
        return myObjectStyleDotTarget__BehaviorDescriptor;
      case 35:
        return myObjectVelocityTarget__BehaviorDescriptor;
      case 36:
        return myOverrideRule__BehaviorDescriptor;
      case 37:
        return myShapeStyleKey__BehaviorDescriptor;
      case 38:
        return mySimpleForce__BehaviorDescriptor;
      case 39:
        return mySimulation__BehaviorDescriptor;
      case 40:
        return myStaticForce__BehaviorDescriptor;
      case 41:
        return myStyleKey__BehaviorDescriptor;
      case 42:
        return myTargetableObjectExpression__BehaviorDescriptor;
      case 43:
        return myTextureStyleKey__BehaviorDescriptor;
      case 44:
        return myTraceStyleKey__BehaviorDescriptor;
      case 45:
        return myVectorComponentTarget__BehaviorDescriptor;
      case 46:
        return myVectorExpression__BehaviorDescriptor;
      case 47:
        return myVectorOppositeTarget__BehaviorDescriptor;
      case 48:
        return myVectorResizeTarget__BehaviorDescriptor;
      case 49:
        return myWorldDefinition__BehaviorDescriptor;
      case 50:
        return myWorldInclusion__BehaviorDescriptor;
      case 51:
        return myWorldMassCenterTarget__BehaviorDescriptor;
      case 52:
        return myWorldNestedObjectTarget__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3126c7c72470af86L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x14f63a14438be6a0L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xd84d5bfb280c701L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e43L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa8bL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x298a87ff7e3fd75dL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x491f8a8da74947aeL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x339d8f0ab547716L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x22ff7dd8e3ba6db5L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6d74ae1e883a4471L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a580635L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a58062fL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3238375e772f9f4dL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x53152ae9d76cb28bL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x78d08d83b98a634eL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x491f8a8da749c297L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df3fe05L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x22ff7dd8e3c8bd76L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6def9fa4L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x43a656410180f6c1L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x22ff7dd8e3c8f846L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xb0d6374ec7d87e1L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xb0d6374ec6d3ff3L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x19a1be2f7ef2e456L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x43a6564101814135L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x339d8f0ab4d9124L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x339d8f0ab4d56baL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x4dc483d31ef92c33L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x26ef53906b115c9bL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3278f43L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x339d8f0ab560d03L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c95047fcaL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c9504a71bL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba5bL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x29b2190b93c8e27bL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x4a4717912b4b2f7eL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3238375e772f9fedL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x101711d69774a67aL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x78d08d83b98d8960L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a580632L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x2b1dfd95e2c40d23L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xb0d6374ec7f738eL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x101711d69774b3a0L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x19a1be2f7ee8f855L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c9504b3d7L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x14f63a1443864979L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x339d8f0ab6a0bccL), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x306daaa2cbe24f94L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3278f40L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df343a0L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c9504a750L), MetaIdFactory.conceptId(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x22ff7dd8e3878c9cL)).seal();
}
