package jetbrains.mps.samples.Physics.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class UnitProviderChunk__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x765c880a454f5efbL, "jetbrains.mps.samples.Physics.structure.UnitProviderChunk");

  public static final SMethod<Void> addGenericDependecy_id94IdDK$n_l = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addGenericDependecy").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("94IdDK$n_l").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> allReferenceableContentsInChunk_id6clJcrKmVSn = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("allReferenceableContentsInChunk").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6clJcrKmVSn").build();
  public static final SMethod<Iterable<SNode>> dependencies_id6clJcrJYPM5 = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("dependencies").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6clJcrJYPM5").build();
  public static final SMethod<Iterable<SNode>> externallyReferenceableContentsInChunk_id6clJcrKmX4x = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("externallyReferenceableContentsInChunk").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6clJcrKmX4x").build();
  public static final SMethod<Boolean> allowNonIdentifierNames_id5HxjapwgqKm = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("allowNonIdentifierNames").modifiers(SModifiersImpl.create(9, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5HxjapwgqKm").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(addGenericDependecy_id94IdDK$n_l, allReferenceableContentsInChunk_id6clJcrKmVSn, dependencies_id6clJcrJYPM5, externallyReferenceableContentsInChunk_id6clJcrKmX4x, allowNonIdentifierNames_id5HxjapwgqKm);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void addGenericDependecy_id94IdDK$n_l(@NotNull SNode __thisNode__, SNode dep) {
  }
  /*package*/ static Iterable<SNode> allReferenceableContentsInChunk_id6clJcrKmVSn(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(Collections.<SNode>emptyList());
  }
  /*package*/ static Iterable<SNode> dependencies_id6clJcrJYPM5(@NotNull SNode __thisNode__) {
    List<SNode> deps = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(deps).addElement(createDefaultGenericChunkDependency_eoi7po_a0a1a2());
    ListSequence.fromList(deps).addElement(createDefaultGenericChunkDependency_eoi7po_a0a2a2());
    return deps;
  }
  /*package*/ static Iterable<SNode> externallyReferenceableContentsInChunk_id6clJcrKmX4x(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(Collections.<SNode>emptyList());
  }
  /*package*/ static boolean allowNonIdentifierNames_id5HxjapwgqKm(@NotNull SAbstractConcept __thisConcept__) {
    return true;
  }

  /*package*/ UnitProviderChunk__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        addGenericDependecy_id94IdDK$n_l(node, (SNode) parameters[0]);
        return null;
      case 1:
        return (T) ((Iterable<SNode>) allReferenceableContentsInChunk_id6clJcrKmVSn(node));
      case 2:
        return (T) ((Iterable<SNode>) dependencies_id6clJcrJYPM5(node));
      case 3:
        return (T) ((Iterable<SNode>) externallyReferenceableContentsInChunk_id6clJcrKmX4x(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 4:
        return (T) ((Boolean) allowNonIdentifierNames_id5HxjapwgqKm(concept));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static SNode createDefaultGenericChunkDependency_eoi7po_a0a1a2() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DefaultGenericChunkDependency$9e);
    n0.setReference(LINKS.chunk$n8YY, new SNodePointer(facade.createModelReference("r:1881124b-7ac4-4b0f-a7dd-12953ac3263b(org.iets3.core.expr.typetags.units.si.units)"), facade.createNodeId("6866407013261692060")));
    return n0.getResult();
  }
  private static SNode createDefaultGenericChunkDependency_eoi7po_a0a2a2() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DefaultGenericChunkDependency$9e);
    n0.setReference(LINKS.chunk$n8YY, new SNodePointer(facade.createModelReference("r:1881124b-7ac4-4b0f-a7dd-12953ac3263b(org.iets3.core.expr.typetags.units.si.units)"), facade.createNodeId("7092451331179151120")));
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DefaultGenericChunkDependency$9e = MetaAdapterFactory.getConcept(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xa5e2d2ae6f5954dL, "com.mbeddr.core.base.structure.DefaultGenericChunkDependency");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink chunk$n8YY = MetaAdapterFactory.getReferenceLink(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xa5e2d2ae6f5954dL, 0xa5e2d2ae6f69c27L, "chunk");
  }
}
