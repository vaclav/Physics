package jetbrains.mps.samples.Physics.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class DotExpressionHelper {
  public static SNode getContextTarget(SNode source) {
    {
      final SNode parent = SNodeOperations.getParent(source);
      if (SNodeOperations.isInstanceOf(parent, CONCEPTS.DotExpression$Af)) {
        {
          final SNode context = SLinkOperations.getTarget(parent, LINKS.expr$xFwa);
          if (SNodeOperations.isInstanceOf(context, CONCEPTS.DotExpression$Af)) {
            return SLinkOperations.getTarget(context, LINKS.target$NL8Z);
          }
        }
        return SLinkOperations.getTarget(parent, LINKS.expr$xFwa);
      }
    }
    return null;
  }


  /**
   * Check whether the previous dot target is instance of the given concept.
   * 
   * For example in the given parent expression C.D.A.B.<currentNode>, it would check if
   * B is of the provided concept
   */
  public static boolean hasParentContextTargetOf(SNode parentNode, SAbstractConcept concept) {
    {
      final SNode parentDot = parentNode;
      if (SNodeOperations.isInstanceOf(parentDot, CONCEPTS.DotExpression$Af)) {
        {
          final SNode context = SLinkOperations.getTarget(parentDot, LINKS.expr$xFwa);
          if (SNodeOperations.isInstanceOf(context, CONCEPTS.DotExpression$Af)) {
            return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(context, LINKS.target$NL8Z), SNodeOperations.asSConcept(concept));
          }
        }
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(parentDot, LINKS.expr$xFwa), SNodeOperations.asSConcept(concept));
      }
    }

    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DotExpression$Af = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L, "org.iets3.core.expr.base.structure.DotExpression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expr$xFwa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L, 0x46ff3b3d86cd0f6bL, "expr");
    /*package*/ static final SContainmentLink target$NL8Z = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L, 0x7cef88020a0f424bL, "target");
  }
}
