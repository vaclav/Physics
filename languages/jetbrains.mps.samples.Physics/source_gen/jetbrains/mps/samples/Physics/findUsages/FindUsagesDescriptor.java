package jetbrains.mps.samples.Physics.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.BaseFindUsagesDescriptor;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IInterfacedFinder;
import jetbrains.mps.smodel.runtime.FinderRegistry;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class FindUsagesDescriptor extends BaseFindUsagesDescriptor {
  /*package*/ static final SModelReference DECLARING_MODEL = PersistenceFacade.getInstance().createModelReference("r:4a437d36-246c-43cd-b8b4-f748a821fcf5(jetbrains.mps.samples.Physics.findUsages)");

  public FindUsagesDescriptor() {
  }

  @Override
  public IInterfacedFinder instantiate(int token) throws IllegalArgumentException {
    switch (token) {
      case 0:
        return new FindOverridenValue_Finder();
      default:
        throw new IllegalArgumentException(String.format("Illegal identifier of a finder implementation: %d", token));
    }
  }

  @Override
  public void init(FinderRegistry reg) {
    reg.add(CONCEPTS.OverrideRule$Db, 0, "FindOverridenValue");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept OverrideRule$Db = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3238375e772f9fedL, "jetbrains.mps.samples.Physics.structure.OverrideRule");
  }
}
