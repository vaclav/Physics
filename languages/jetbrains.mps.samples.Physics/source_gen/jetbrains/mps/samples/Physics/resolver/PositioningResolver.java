package jetbrains.mps.samples.Physics.resolver;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class PositioningResolver {
  private List<ObjectToPosition> objects;

  public PositioningResolver(SNode world) {
    this.objects = Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getChildren(world), CONCEPTS.ILocalized$9a)).select(new ISelector<SNode, ObjectToPosition>() {
      public ObjectToPosition select(SNode it) {
        return new ObjectToPosition(it);
      }
    }).toListSequence();
  }

  public void computeDependencies() {
    ListSequence.fromList(objects).visitAll(new IVisitor<ObjectToPosition>() {
      public void visit(final ObjectToPosition object) {
        ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(object.getContent(), LINKS.location$DoV0), CONCEPTS.ObjectReference$qq, false, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
          public void visit(SNode reference) {
            // Reference to a defined object in scope --> resolve directly from the map 
            {
              final SNode localized = SLinkOperations.getTarget(reference, LINKS.target$EWj0);
              if (SNodeOperations.isInstanceOf(localized, CONCEPTS.ILocalized$9a)) {
                ListSequence.fromList(object.getDependencies()).addElement(ListSequence.fromList(objects).findFirst(new IWhereFilter<ObjectToPosition>() {
                  public boolean accept(ObjectToPosition it) {
                    return Objects.equals(it.getContent(), localized);
                  }
                }));
              }
            }

            // Reference to a world definition --> find matching inclusion 
            {
              final SNode definition = SLinkOperations.getTarget(reference, LINKS.target$EWj0);
              if (SNodeOperations.isInstanceOf(definition, CONCEPTS.WorldDefinition$Xn)) {
                ListSequence.fromList(object.getDependencies()).addElement(ListSequence.fromList(objects).findFirst(new IWhereFilter<ObjectToPosition>() {
                  public boolean accept(ObjectToPosition it) {
                    return Objects.equals(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(it.getContent(), CONCEPTS.WorldInclusion$vO), LINKS.world$ZN60), LINKS.target$12L0), definition);
                  }
                }));
              }
            }
          }
        });
      }
    });
  }

  public void solve(final SNode untilTargetSolved) {
    int maxIterations = ListSequence.fromList(objects).count() + 1;
    final ObjectToPosition target = ListSequence.fromList(objects).findFirst(new IWhereFilter<ObjectToPosition>() {
      public boolean accept(ObjectToPosition it) {
        return Objects.equals(it.getContent(), untilTargetSolved);
      }
    });

    while (ListSequence.fromList(objects).any(new IWhereFilter<ObjectToPosition>() {
      public boolean accept(ObjectToPosition it) {
        return !(it.isResolved());
      }
    }) && maxIterations-- > 0 && target.isResolved() != true) {
      ListSequence.fromList(objects).where(new IWhereFilter<ObjectToPosition>() {
        public boolean accept(ObjectToPosition it) {
          return it.missingDependencies() == 0 && !(it.isResolved());
        }
      }).visitAll(new IVisitor<ObjectToPosition>() {
        public void visit(ObjectToPosition it) {
          it.resolve();
        }
      });
    }

    if (maxIterations <= 0) {
      throw new ClassCircularityError("circular dependencies for positioning");
    }
  }

  public static void resolve(SNode world) {
    PositioningResolver resolver = new PositioningResolver(world);
    resolver.computeDependencies();
    resolver.solve(null);
  }

  public static void resolveOne(SNode object) {
    PositioningResolver resolver = new PositioningResolver(SNodeOperations.getNodeAncestor(object, CONCEPTS.WorldDefinition$Xn, false, false));
    resolver.computeDependencies();
    resolver.solve(object);
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept ILocalized$9a = MetaAdapterFactory.getInterfaceConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df3fe05L, "jetbrains.mps.samples.Physics.structure.ILocalized");
    /*package*/ static final SConcept ObjectReference$qq = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba5bL, "jetbrains.mps.samples.Physics.structure.ObjectReference");
    /*package*/ static final SConcept WorldDefinition$Xn = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3278f40L, "jetbrains.mps.samples.Physics.structure.WorldDefinition");
    /*package*/ static final SConcept WorldInclusion$vO = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df343a0L, "jetbrains.mps.samples.Physics.structure.WorldInclusion");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink location$DoV0 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df3fe05L, 0x3cd406ea6df3fe06L, "location");
    /*package*/ static final SReferenceLink target$EWj0 = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba5bL, 0x6b7f605cb32fba5cL, "target");
    /*package*/ static final SContainmentLink world$ZN60 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df343a0L, 0x3cd406ea6df343a1L, "world");
    /*package*/ static final SReferenceLink target$12L0 = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x5d5cbb75843c860L, 0x5d5cbb75843c861L, "target");
  }
}
