package jetbrains.mps.samples.Physics.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbsoluteVector = 0;
  public static final int AbsoluteVectorBase = 1;
  public static final int AbstractObjectDefinition = 2;
  public static final int AbstractObjectReference = 3;
  public static final int BoxVisual = 4;
  public static final int BuiltInColor = 5;
  public static final int CartesianCoordinates = 6;
  public static final int Coordinates = 7;
  public static final int CustomColor = 8;
  public static final int CustomForceReference = 9;
  public static final int DynamicForce = 10;
  public static final int Force = 11;
  public static final int FromOrientationVectorBase = 12;
  public static final int InwardTarget = 13;
  public static final int ObjectDefinition = 14;
  public static final int ObjectReference = 15;
  public static final int Orientation = 16;
  public static final int OutwardTarget = 17;
  public static final int Picture = 18;
  public static final int RelativeVector = 19;
  public static final int SameAsTarget = 20;
  public static final int Simulation = 21;
  public static final int SphereVisual = 22;
  public static final int SphericalCoordinates = 23;
  public static final int StatefulForce = 24;
  public static final int StaticForce = 25;
  public static final int Texture = 26;
  public static final int Vector = 27;
  public static final int VectorBase = 28;
  public static final int Visual = 29;
  public static final int WorldDefinition = 30;
  public static final int WorldReference = 31;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xbe81eb124eda4d0eL, 0x89be7493500ab874L);
    builder.put(0x584bed834756868eL, AbsoluteVector);
    builder.put(0x14f63a14438be7b4L, AbsoluteVectorBase);
    builder.put(0x1441545e2a5b1e43L, AbstractObjectDefinition);
    builder.put(0x1441545e2a5b1e44L, AbstractObjectReference);
    builder.put(0x1441545e2a5b1e58L, BoxVisual);
    builder.put(0x1441545e2a5b1e65L, BuiltInColor);
    builder.put(0x584bed834752fa8bL, CartesianCoordinates);
    builder.put(0x584bed834752fa6dL, Coordinates);
    builder.put(0x14f63a14438863e1L, CustomColor);
    builder.put(0x14f63a14438be6a0L, CustomForceReference);
    builder.put(0x1441545e2a580635L, DynamicForce);
    builder.put(0x1441545e2a58062fL, Force);
    builder.put(0x14f63a14438be7b3L, FromOrientationVectorBase);
    builder.put(0x14f63a14438795e1L, InwardTarget);
    builder.put(0x6b7f605cb3278f43L, ObjectDefinition);
    builder.put(0x6b7f605cb32fba5bL, ObjectReference);
    builder.put(0x14f63a14438795e0L, Orientation);
    builder.put(0x14f63a14438795e2L, OutwardTarget);
    builder.put(0x14f63a144388655eL, Picture);
    builder.put(0x584bed834752fa6bL, RelativeVector);
    builder.put(0x14f63a14438795e3L, SameAsTarget);
    builder.put(0x6b7f605cb32fba58L, Simulation);
    builder.put(0x1441545e2a5b1e57L, SphereVisual);
    builder.put(0x584bed834752fa8fL, SphericalCoordinates);
    builder.put(0x1441545e2a580636L, StatefulForce);
    builder.put(0x1441545e2a580632L, StaticForce);
    builder.put(0x1441545e2a5b1e64L, Texture);
    builder.put(0x14f63a1443864979L, Vector);
    builder.put(0x14f63a14438be7b0L, VectorBase);
    builder.put(0x1441545e2a5b1e50L, Visual);
    builder.put(0x6b7f605cb3278f40L, WorldDefinition);
    builder.put(0x5d5cbb75843c860L, WorldReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
