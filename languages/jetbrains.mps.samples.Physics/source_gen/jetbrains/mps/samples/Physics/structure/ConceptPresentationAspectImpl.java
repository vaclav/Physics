package jetbrains.mps.samples.Physics.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbsolutePosition;
  private ConceptPresentation props_ObjectDefinition;
  private ConceptPresentation props_ObjectReference;
  private ConceptPresentation props_Position;
  private ConceptPresentation props_RelativeCartesianPosition;
  private ConceptPresentation props_RelativePolarPosition;
  private ConceptPresentation props_RelativePosition;
  private ConceptPresentation props_Simulation;
  private ConceptPresentation props_WorldDefinition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbsolutePosition:
        if (props_AbsolutePosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("absolute position");
          props_AbsolutePosition = cpb.create();
        }
        return props_AbsolutePosition;
      case LanguageConceptSwitch.ObjectDefinition:
        if (props_ObjectDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ObjectDefinition = cpb.create();
        }
        return props_ObjectDefinition;
      case LanguageConceptSwitch.ObjectReference:
        if (props_ObjectReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba5bL, 0x6b7f605cb32fba5cL, "target", "", "");
          props_ObjectReference = cpb.create();
        }
        return props_ObjectReference;
      case LanguageConceptSwitch.Position:
        if (props_Position == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Position = cpb.create();
        }
        return props_Position;
      case LanguageConceptSwitch.RelativeCartesianPosition:
        if (props_RelativeCartesianPosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("cartesian position");
          props_RelativeCartesianPosition = cpb.create();
        }
        return props_RelativeCartesianPosition;
      case LanguageConceptSwitch.RelativePolarPosition:
        if (props_RelativePolarPosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("polar position");
          props_RelativePolarPosition = cpb.create();
        }
        return props_RelativePolarPosition;
      case LanguageConceptSwitch.RelativePosition:
        if (props_RelativePosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RelativePosition = cpb.create();
        }
        return props_RelativePosition;
      case LanguageConceptSwitch.Simulation:
        if (props_Simulation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Simulation = cpb.create();
        }
        return props_Simulation;
      case LanguageConceptSwitch.WorldDefinition:
        if (props_WorldDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WorldDefinition = cpb.create();
        }
        return props_WorldDefinition;
    }
    return null;
  }
}
