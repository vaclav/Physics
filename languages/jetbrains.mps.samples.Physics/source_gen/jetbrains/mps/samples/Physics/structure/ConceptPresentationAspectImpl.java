package jetbrains.mps.samples.Physics.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbsoluteCoordinates;
  private ConceptPresentation props_AbstractForce;
  private ConceptPresentation props_AbstractForceCall;
  private ConceptPresentation props_AbstractForceCallParameter;
  private ConceptPresentation props_AbstractObjectDefinition;
  private ConceptPresentation props_AbstractObjectReference;
  private ConceptPresentation props_AbstractVectorTarget;
  private ConceptPresentation props_AllObjectsExpression;
  private ConceptPresentation props_BooleanStyleKey;
  private ConceptPresentation props_BoxDepthStyle;
  private ConceptPresentation props_BoxHeightStyle;
  private ConceptPresentation props_BoxWidthStyle;
  private ConceptPresentation props_CachedObjectExpression;
  private ConceptPresentation props_CartesianCoordinates;
  private ConceptPresentation props_CollisionReactionExpression;
  private ConceptPresentation props_CollisionStyleKey;
  private ConceptPresentation props_ColorDefinition;
  private ConceptPresentation props_ColorExpression;
  private ConceptPresentation props_ColorTexture;
  private ConceptPresentation props_ColorType;
  private ConceptPresentation props_ConditionalForce;
  private ConceptPresentation props_CurrentObjectExpression;
  private ConceptPresentation props_CurrentWorldExpression;
  private ConceptPresentation props_CustomColor;
  private ConceptPresentation props_CylindricalCoordinates;
  private ConceptPresentation props_DefinedColorReference;
  private ConceptPresentation props_DirectionalCoordinates;
  private ConceptPresentation props_DisabledTraceExpression;
  private ConceptPresentation props_DynamicForce;
  private ConceptPresentation props_ElasticCollisionReaction;
  private ConceptPresentation props_EmitLightStyleKey;
  private ConceptPresentation props_EulerAnglesRotationExpression;
  private ConceptPresentation props_EulerAxisRotationExpression;
  private ConceptPresentation props_Force;
  private ConceptPresentation props_ForceApplicationPointTarget;
  private ConceptPresentation props_ForceComponentsTarget;
  private ConceptPresentation props_ForceMomentTarget;
  private ConceptPresentation props_ICanBeOverridden;
  private ConceptPresentation props_ICurrentObjectContext;
  private ConceptPresentation props_ICurrentWorldContext;
  private ConceptPresentation props_IForceDotTarget;
  private ConceptPresentation props_IForceWithApplicationPoint;
  private ConceptPresentation props_IForceWithCache;
  private ConceptPresentation props_IForceWithLinearForce;
  private ConceptPresentation props_ILocalized;
  private ConceptPresentation props_IMayTargetWorld;
  private ConceptPresentation props_IObjectDefinition;
  private ConceptPresentation props_IObjectDotTarget;
  private ConceptPresentation props_IOverrideProperties;
  private ConceptPresentation props_IProvideCurrentWorld;
  private ConceptPresentation props_IRuntimeContext;
  private ConceptPresentation props_IRuntimeExpression;
  private ConceptPresentation props_ITargetExpression;
  private ConceptPresentation props_ITargetObject;
  private ConceptPresentation props_IUseSpecificExpressions;
  private ConceptPresentation props_IUseStyleExpressions;
  private ConceptPresentation props_IWorldDotTarget;
  private ConceptPresentation props_InteractedObjectExpression;
  private ConceptPresentation props_InteractionForce;
  private ConceptPresentation props_MomentForce;
  private ConceptPresentation props_NumericDistanceStyleKey;
  private ConceptPresentation props_ObjectAngularVelocityTarget;
  private ConceptPresentation props_ObjectDefinition;
  private ConceptPresentation props_ObjectDistanceWithTarget;
  private ConceptPresentation props_ObjectMassTarget;
  private ConceptPresentation props_ObjectPositionTarget;
  private ConceptPresentation props_ObjectReferenceExpression;
  private ConceptPresentation props_ObjectStyleDotTarget;
  private ConceptPresentation props_ObjectVelocityTarget;
  private ConceptPresentation props_OverrideRule;
  private ConceptPresentation props_PauseOnCollisionStyleKey;
  private ConceptPresentation props_PictureTexture;
  private ConceptPresentation props_RelativeVector;
  private ConceptPresentation props_RotationExpression;
  private ConceptPresentation props_RotationMatrixExpression;
  private ConceptPresentation props_ShapeStyleExpression;
  private ConceptPresentation props_ShapeStyleKey;
  private ConceptPresentation props_SimpleCollisionReactionExpression;
  private ConceptPresentation props_SimpleForce;
  private ConceptPresentation props_Simulation;
  private ConceptPresentation props_SimulationAlternativeView;
  private ConceptPresentation props_SphereRadiusStyleKey;
  private ConceptPresentation props_SphericalCoordinates;
  private ConceptPresentation props_StatefulForce;
  private ConceptPresentation props_StaticForce;
  private ConceptPresentation props_StyleDefinition;
  private ConceptPresentation props_StyleKey;
  private ConceptPresentation props_StyleSpecificExpression;
  private ConceptPresentation props_TargetableObjectExpression;
  private ConceptPresentation props_TextureExpression;
  private ConceptPresentation props_TextureStyleKey;
  private ConceptPresentation props_TimeExpression;
  private ConceptPresentation props_TraceStyleKey;
  private ConceptPresentation props_VectorComponentTarget;
  private ConceptPresentation props_VectorExpression;
  private ConceptPresentation props_VectorOppositeTarget;
  private ConceptPresentation props_VectorResizeTarget;
  private ConceptPresentation props_VelocityVector;
  private ConceptPresentation props_WorldDefinition;
  private ConceptPresentation props_WorldInclusion;
  private ConceptPresentation props_WorldMassCenterTarget;
  private ConceptPresentation props_WorldNestedObjectTarget;
  private ConceptPresentation props_WorldReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbsoluteCoordinates:
        if (props_AbsoluteCoordinates == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbsoluteCoordinates = cpb.create();
        }
        return props_AbsoluteCoordinates;
      case LanguageConceptSwitch.AbstractForce:
        if (props_AbstractForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a1b0ae);
          props_AbstractForce = cpb.create();
        }
        return props_AbstractForce;
      case LanguageConceptSwitch.AbstractForceCall:
        if (props_AbstractForceCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("call of an external abstract force");
          cpb.rawPresentation("defined force");
          props_AbstractForceCall = cpb.create();
        }
        return props_AbstractForceCall;
      case LanguageConceptSwitch.AbstractForceCallParameter:
        if (props_AbstractForceCallParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xd84d5bfb280c701L, 0xd84d5bfb280d74aL, "argument", "", "");
          props_AbstractForceCallParameter = cpb.create();
        }
        return props_AbstractForceCallParameter;
      case LanguageConceptSwitch.AbstractObjectDefinition:
        if (props_AbstractObjectDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a4b0ae);
          props_AbstractObjectDefinition = cpb.create();
        }
        return props_AbstractObjectDefinition;
      case LanguageConceptSwitch.AbstractObjectReference:
        if (props_AbstractObjectReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e44L, 0x1441545e2a5b1e45L, "target", "", "");
          props_AbstractObjectReference = cpb.create();
        }
        return props_AbstractObjectReference;
      case LanguageConceptSwitch.AbstractVectorTarget:
        if (props_AbstractVectorTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractVectorTarget = cpb.create();
        }
        return props_AbstractVectorTarget;
      case LanguageConceptSwitch.AllObjectsExpression:
        if (props_AllObjectsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("target all objects within the simulation, runtime variable");
          cpb.rawPresentation("allObjects");
          props_AllObjectsExpression = cpb.create();
        }
        return props_AllObjectsExpression;
      case LanguageConceptSwitch.BooleanStyleKey:
        if (props_BooleanStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BooleanStyleKey = cpb.create();
        }
        return props_BooleanStyleKey;
      case LanguageConceptSwitch.BoxDepthStyle:
        if (props_BoxDepthStyle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("box-size-z");
          props_BoxDepthStyle = cpb.create();
        }
        return props_BoxDepthStyle;
      case LanguageConceptSwitch.BoxHeightStyle:
        if (props_BoxHeightStyle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("box-size-y");
          props_BoxHeightStyle = cpb.create();
        }
        return props_BoxHeightStyle;
      case LanguageConceptSwitch.BoxWidthStyle:
        if (props_BoxWidthStyle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("box-size-x");
          props_BoxWidthStyle = cpb.create();
        }
        return props_BoxWidthStyle;
      case LanguageConceptSwitch.CachedObjectExpression:
        if (props_CachedObjectExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("internal concept used for generation");
          cpb.presentationByReference(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x491f8a8da78a723bL, 0x491f8a8da78a723cL, "cacheOf", "", "");
          props_CachedObjectExpression = cpb.create();
        }
        return props_CachedObjectExpression;
      case LanguageConceptSwitch.CartesianCoordinates:
        if (props_CartesianCoordinates == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("cartesian coordinates");
          props_CartesianCoordinates = cpb.create();
        }
        return props_CartesianCoordinates;
      case LanguageConceptSwitch.CollisionReactionExpression:
        if (props_CollisionReactionExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CollisionReactionExpression = cpb.create();
        }
        return props_CollisionReactionExpression;
      case LanguageConceptSwitch.CollisionStyleKey:
        if (props_CollisionStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x298a87ff7e3fd75dL);
          cpb.deprecateProperty(0x298a87ff7e3fd776L, "reaction");
          cpb.rawPresentation("collision-reaction");
          props_CollisionStyleKey = cpb.create();
        }
        return props_CollisionStyleKey;
      case LanguageConceptSwitch.ColorDefinition:
        if (props_ColorDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("definition of a new named color that can be reused");
          cpb.presentationByName();
          props_ColorDefinition = cpb.create();
        }
        return props_ColorDefinition;
      case LanguageConceptSwitch.ColorExpression:
        if (props_ColorExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ColorExpression = cpb.create();
        }
        return props_ColorExpression;
      case LanguageConceptSwitch.ColorTexture:
        if (props_ColorTexture == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("color texture");
          props_ColorTexture = cpb.create();
        }
        return props_ColorTexture;
      case LanguageConceptSwitch.ColorType:
        if (props_ColorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("internal color type");
          cpb.rawPresentation("ColorType");
          props_ColorType = cpb.create();
        }
        return props_ColorType;
      case LanguageConceptSwitch.ConditionalForce:
        if (props_ConditionalForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConditionalForce");
          props_ConditionalForce = cpb.create();
        }
        return props_ConditionalForce;
      case LanguageConceptSwitch.CurrentObjectExpression:
        if (props_CurrentObjectExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("expression that targets the current object in a generic way");
          cpb.rawPresentation("self");
          props_CurrentObjectExpression = cpb.create();
        }
        return props_CurrentObjectExpression;
      case LanguageConceptSwitch.CurrentWorldExpression:
        if (props_CurrentWorldExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("expression that targets the current world in a generic way");
          cpb.rawPresentation("current world");
          props_CurrentWorldExpression = cpb.create();
        }
        return props_CurrentWorldExpression;
      case LanguageConceptSwitch.CustomColor:
        if (props_CustomColor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("custom color");
          props_CustomColor = cpb.create();
        }
        return props_CustomColor;
      case LanguageConceptSwitch.CylindricalCoordinates:
        if (props_CylindricalCoordinates == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("cylindrical coordinates");
          props_CylindricalCoordinates = cpb.create();
        }
        return props_CylindricalCoordinates;
      case LanguageConceptSwitch.DefinedColorReference:
        if (props_DefinedColorReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e65L, 0xb06f5069ab75031L, "color", "", "");
          props_DefinedColorReference = cpb.create();
        }
        return props_DefinedColorReference;
      case LanguageConceptSwitch.DirectionalCoordinates:
        if (props_DirectionalCoordinates == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("coordinates that rely on a length and a direction");
          cpb.rawPresentation("directional coordinates");
          props_DirectionalCoordinates = cpb.create();
        }
        return props_DirectionalCoordinates;
      case LanguageConceptSwitch.DisabledTraceExpression:
        if (props_DisabledTraceExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("disabled");
          props_DisabledTraceExpression = cpb.create();
        }
        return props_DisabledTraceExpression;
      case LanguageConceptSwitch.DynamicForce:
        if (props_DynamicForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("same as static force but provides dynamic variables to use in the expression");
          cpb.rawPresentation("dynamic force");
          props_DynamicForce = cpb.create();
        }
        return props_DynamicForce;
      case LanguageConceptSwitch.ElasticCollisionReaction:
        if (props_ElasticCollisionReaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("elastic reaction");
          props_ElasticCollisionReaction = cpb.create();
        }
        return props_ElasticCollisionReaction;
      case LanguageConceptSwitch.EmitLightStyleKey:
        if (props_EmitLightStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("emit-light");
          props_EmitLightStyleKey = cpb.create();
        }
        return props_EmitLightStyleKey;
      case LanguageConceptSwitch.EulerAnglesRotationExpression:
        if (props_EulerAnglesRotationExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("expression of euler angles rotation, rotating on x, then resulting y, then resulting z");
          cpb.rawPresentation("euler angles rotation");
          props_EulerAnglesRotationExpression = cpb.create();
        }
        return props_EulerAnglesRotationExpression;
      case LanguageConceptSwitch.EulerAxisRotationExpression:
        if (props_EulerAxisRotationExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("rotation using an axis to rotate around");
          cpb.rawPresentation("euler axis rotation");
          props_EulerAxisRotationExpression = cpb.create();
        }
        return props_EulerAxisRotationExpression;
      case LanguageConceptSwitch.Force:
        if (props_Force == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("may the force be with you");
          props_Force = cpb.create();
        }
        return props_Force;
      case LanguageConceptSwitch.ForceApplicationPointTarget:
        if (props_ForceApplicationPointTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("application point");
          props_ForceApplicationPointTarget = cpb.create();
        }
        return props_ForceApplicationPointTarget;
      case LanguageConceptSwitch.ForceComponentsTarget:
        if (props_ForceComponentsTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("components");
          props_ForceComponentsTarget = cpb.create();
        }
        return props_ForceComponentsTarget;
      case LanguageConceptSwitch.ForceMomentTarget:
        if (props_ForceMomentTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("moment");
          props_ForceMomentTarget = cpb.create();
        }
        return props_ForceMomentTarget;
      case LanguageConceptSwitch.ICanBeOverridden:
        if (props_ICanBeOverridden == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICanBeOverridden = cpb.create();
        }
        return props_ICanBeOverridden;
      case LanguageConceptSwitch.ICurrentObjectContext:
        if (props_ICurrentObjectContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICurrentObjectContext = cpb.create();
        }
        return props_ICurrentObjectContext;
      case LanguageConceptSwitch.ICurrentWorldContext:
        if (props_ICurrentWorldContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICurrentWorldContext = cpb.create();
        }
        return props_ICurrentWorldContext;
      case LanguageConceptSwitch.IForceDotTarget:
        if (props_IForceDotTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IForceDotTarget = cpb.create();
        }
        return props_IForceDotTarget;
      case LanguageConceptSwitch.IForceWithApplicationPoint:
        if (props_IForceWithApplicationPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IForceWithApplicationPoint = cpb.create();
        }
        return props_IForceWithApplicationPoint;
      case LanguageConceptSwitch.IForceWithCache:
        if (props_IForceWithCache == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IForceWithCache = cpb.create();
        }
        return props_IForceWithCache;
      case LanguageConceptSwitch.IForceWithLinearForce:
        if (props_IForceWithLinearForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IForceWithLinearForce = cpb.create();
        }
        return props_IForceWithLinearForce;
      case LanguageConceptSwitch.ILocalized:
        if (props_ILocalized == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ILocalized = cpb.create();
        }
        return props_ILocalized;
      case LanguageConceptSwitch.IMayTargetWorld:
        if (props_IMayTargetWorld == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMayTargetWorld = cpb.create();
        }
        return props_IMayTargetWorld;
      case LanguageConceptSwitch.IObjectDefinition:
        if (props_IObjectDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IObjectDefinition = cpb.create();
        }
        return props_IObjectDefinition;
      case LanguageConceptSwitch.IObjectDotTarget:
        if (props_IObjectDotTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IObjectDotTarget = cpb.create();
        }
        return props_IObjectDotTarget;
      case LanguageConceptSwitch.IOverrideProperties:
        if (props_IOverrideProperties == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IOverrideProperties = cpb.create();
        }
        return props_IOverrideProperties;
      case LanguageConceptSwitch.IProvideCurrentWorld:
        if (props_IProvideCurrentWorld == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IProvideCurrentWorld = cpb.create();
        }
        return props_IProvideCurrentWorld;
      case LanguageConceptSwitch.IRuntimeContext:
        if (props_IRuntimeContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRuntimeContext = cpb.create();
        }
        return props_IRuntimeContext;
      case LanguageConceptSwitch.IRuntimeExpression:
        if (props_IRuntimeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRuntimeExpression = cpb.create();
        }
        return props_IRuntimeExpression;
      case LanguageConceptSwitch.ITargetExpression:
        if (props_ITargetExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITargetExpression = cpb.create();
        }
        return props_ITargetExpression;
      case LanguageConceptSwitch.ITargetObject:
        if (props_ITargetObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITargetObject = cpb.create();
        }
        return props_ITargetObject;
      case LanguageConceptSwitch.IUseSpecificExpressions:
        if (props_IUseSpecificExpressions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IUseSpecificExpressions = cpb.create();
        }
        return props_IUseSpecificExpressions;
      case LanguageConceptSwitch.IUseStyleExpressions:
        if (props_IUseStyleExpressions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IUseStyleExpressions = cpb.create();
        }
        return props_IUseStyleExpressions;
      case LanguageConceptSwitch.IWorldDotTarget:
        if (props_IWorldDotTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IWorldDotTarget = cpb.create();
        }
        return props_IWorldDotTarget;
      case LanguageConceptSwitch.InteractedObjectExpression:
        if (props_InteractedObjectExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("other object");
          props_InteractedObjectExpression = cpb.create();
        }
        return props_InteractedObjectExpression;
      case LanguageConceptSwitch.InteractionForce:
        if (props_InteractionForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("force that results of the interaction of two elements");
          cpb.rawPresentation("interaction force");
          props_InteractionForce = cpb.create();
        }
        return props_InteractionForce;
      case LanguageConceptSwitch.MomentForce:
        if (props_MomentForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("force that only result as a moment");
          cpb.rawPresentation("moment force");
          props_MomentForce = cpb.create();
        }
        return props_MomentForce;
      case LanguageConceptSwitch.NumericDistanceStyleKey:
        if (props_NumericDistanceStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("style with a numeric value");
          props_NumericDistanceStyleKey = cpb.create();
        }
        return props_NumericDistanceStyleKey;
      case LanguageConceptSwitch.ObjectAngularVelocityTarget:
        if (props_ObjectAngularVelocityTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("angular velocity");
          props_ObjectAngularVelocityTarget = cpb.create();
        }
        return props_ObjectAngularVelocityTarget;
      case LanguageConceptSwitch.ObjectDefinition:
        if (props_ObjectDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ObjectDefinition = cpb.create();
        }
        return props_ObjectDefinition;
      case LanguageConceptSwitch.ObjectDistanceWithTarget:
        if (props_ObjectDistanceWithTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("compute distance between two position");
          cpb.rawPresentation("distance with");
          props_ObjectDistanceWithTarget = cpb.create();
        }
        return props_ObjectDistanceWithTarget;
      case LanguageConceptSwitch.ObjectMassTarget:
        if (props_ObjectMassTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mass");
          props_ObjectMassTarget = cpb.create();
        }
        return props_ObjectMassTarget;
      case LanguageConceptSwitch.ObjectPositionTarget:
        if (props_ObjectPositionTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("position");
          props_ObjectPositionTarget = cpb.create();
        }
        return props_ObjectPositionTarget;
      case LanguageConceptSwitch.ObjectReferenceExpression:
        if (props_ObjectReferenceExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba5bL, 0x6b7f605cb32fba5cL, "target", "", "");
          props_ObjectReferenceExpression = cpb.create();
        }
        return props_ObjectReferenceExpression;
      case LanguageConceptSwitch.ObjectStyleDotTarget:
        if (props_ObjectStyleDotTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ObjectStyleDotTarget");
          props_ObjectStyleDotTarget = cpb.create();
        }
        return props_ObjectStyleDotTarget;
      case LanguageConceptSwitch.ObjectVelocityTarget:
        if (props_ObjectVelocityTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("velocity");
          props_ObjectVelocityTarget = cpb.create();
        }
        return props_ObjectVelocityTarget;
      case LanguageConceptSwitch.OverrideRule:
        if (props_OverrideRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OverrideRule");
          props_OverrideRule = cpb.create();
        }
        return props_OverrideRule;
      case LanguageConceptSwitch.PauseOnCollisionStyleKey:
        if (props_PauseOnCollisionStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("pause-on-collision");
          props_PauseOnCollisionStyleKey = cpb.create();
        }
        return props_PauseOnCollisionStyleKey;
      case LanguageConceptSwitch.PictureTexture:
        if (props_PictureTexture == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("picture texture");
          props_PictureTexture = cpb.create();
        }
        return props_PictureTexture;
      case LanguageConceptSwitch.RelativeVector:
        if (props_RelativeVector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("coordinates relative to a point in space or another object");
          cpb.rawPresentation("relative coordinates");
          props_RelativeVector = cpb.create();
        }
        return props_RelativeVector;
      case LanguageConceptSwitch.RotationExpression:
        if (props_RotationExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("expression of a rotation");
          props_RotationExpression = cpb.create();
        }
        return props_RotationExpression;
      case LanguageConceptSwitch.RotationMatrixExpression:
        if (props_RotationMatrixExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("rotation matrix");
          props_RotationMatrixExpression = cpb.create();
        }
        return props_RotationMatrixExpression;
      case LanguageConceptSwitch.ShapeStyleExpression:
        if (props_ShapeStyleExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ShapeStyleExpression");
          props_ShapeStyleExpression = cpb.create();
        }
        return props_ShapeStyleExpression;
      case LanguageConceptSwitch.ShapeStyleKey:
        if (props_ShapeStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("shape of the object");
          cpb.rawPresentation("shape");
          props_ShapeStyleKey = cpb.create();
        }
        return props_ShapeStyleKey;
      case LanguageConceptSwitch.SimpleCollisionReactionExpression:
        if (props_SimpleCollisionReactionExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SimpleCollisionReactionExpression");
          props_SimpleCollisionReactionExpression = cpb.create();
        }
        return props_SimpleCollisionReactionExpression;
      case LanguageConceptSwitch.SimpleForce:
        if (props_SimpleForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("force with simple linear force and application point expression");
          props_SimpleForce = cpb.create();
        }
        return props_SimpleForce;
      case LanguageConceptSwitch.Simulation:
        if (props_Simulation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a97b0ae);
          props_Simulation = cpb.create();
        }
        return props_Simulation;
      case LanguageConceptSwitch.SimulationAlternativeView:
        if (props_SimulationAlternativeView == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SimulationAlternativeView");
          props_SimulationAlternativeView = cpb.create();
        }
        return props_SimulationAlternativeView;
      case LanguageConceptSwitch.SphereRadiusStyleKey:
        if (props_SphereRadiusStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sphere-radius");
          props_SphereRadiusStyleKey = cpb.create();
        }
        return props_SphereRadiusStyleKey;
      case LanguageConceptSwitch.SphericalCoordinates:
        if (props_SphericalCoordinates == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("spherical coordinates");
          props_SphericalCoordinates = cpb.create();
        }
        return props_SphericalCoordinates;
      case LanguageConceptSwitch.StatefulForce:
        if (props_StatefulForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a force defined by some state");
          props_StatefulForce = cpb.create();
        }
        return props_StatefulForce;
      case LanguageConceptSwitch.StaticForce:
        if (props_StaticForce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("force computed once and applied constantly");
          cpb.rawPresentation("static force");
          props_StaticForce = cpb.create();
        }
        return props_StaticForce;
      case LanguageConceptSwitch.StyleDefinition:
        if (props_StyleDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("style associated with an object");
          cpb.rawPresentation("StyleDefinition");
          props_StyleDefinition = cpb.create();
        }
        return props_StyleDefinition;
      case LanguageConceptSwitch.StyleKey:
        if (props_StyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("represent a style key, having the type its value should have");
          props_StyleKey = cpb.create();
        }
        return props_StyleKey;
      case LanguageConceptSwitch.StyleSpecificExpression:
        if (props_StyleSpecificExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("expression that can only be used in a style context");
          props_StyleSpecificExpression = cpb.create();
        }
        return props_StyleSpecificExpression;
      case LanguageConceptSwitch.TargetableObjectExpression:
        if (props_TargetableObjectExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TargetableObjectExpression = cpb.create();
        }
        return props_TargetableObjectExpression;
      case LanguageConceptSwitch.TextureExpression:
        if (props_TextureExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TextureExpression = cpb.create();
        }
        return props_TextureExpression;
      case LanguageConceptSwitch.TextureStyleKey:
        if (props_TextureStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("texture");
          props_TextureStyleKey = cpb.create();
        }
        return props_TextureStyleKey;
      case LanguageConceptSwitch.TimeExpression:
        if (props_TimeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("time");
          props_TimeExpression = cpb.create();
        }
        return props_TimeExpression;
      case LanguageConceptSwitch.TraceStyleKey:
        if (props_TraceStyleKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("allow to user to keep track of an object's location over time");
          cpb.rawPresentation("trace");
          props_TraceStyleKey = cpb.create();
        }
        return props_TraceStyleKey;
      case LanguageConceptSwitch.VectorComponentTarget:
        if (props_VectorComponentTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("vector component");
          props_VectorComponentTarget = cpb.create();
        }
        return props_VectorComponentTarget;
      case LanguageConceptSwitch.VectorExpression:
        if (props_VectorExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_VectorExpression = cpb.create();
        }
        return props_VectorExpression;
      case LanguageConceptSwitch.VectorOppositeTarget:
        if (props_VectorOppositeTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("opposite");
          props_VectorOppositeTarget = cpb.create();
        }
        return props_VectorOppositeTarget;
      case LanguageConceptSwitch.VectorResizeTarget:
        if (props_VectorResizeTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("resize to");
          props_VectorResizeTarget = cpb.create();
        }
        return props_VectorResizeTarget;
      case LanguageConceptSwitch.VelocityVector:
        if (props_VelocityVector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VelocityVector = cpb.create();
        }
        return props_VelocityVector;
      case LanguageConceptSwitch.WorldDefinition:
        if (props_WorldDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a89b0ae);
          props_WorldDefinition = cpb.create();
        }
        return props_WorldDefinition;
      case LanguageConceptSwitch.WorldInclusion:
        if (props_WorldInclusion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WorldInclusion = cpb.create();
        }
        return props_WorldInclusion;
      case LanguageConceptSwitch.WorldMassCenterTarget:
        if (props_WorldMassCenterTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mass center");
          props_WorldMassCenterTarget = cpb.create();
        }
        return props_WorldMassCenterTarget;
      case LanguageConceptSwitch.WorldNestedObjectTarget:
        if (props_WorldNestedObjectTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("allow to access an object inside a world definition");
          cpb.presentationByReference(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x22ff7dd8e3878c9cL, 0x22ff7dd8e38793cbL, "target", "", "");
          props_WorldNestedObjectTarget = cpb.create();
        }
        return props_WorldNestedObjectTarget;
      case LanguageConceptSwitch.WorldReference:
        if (props_WorldReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x5d5cbb75843c860L, 0x5d5cbb75843c861L, "target", "", "");
          props_WorldReference = cpb.create();
        }
        return props_WorldReference;
    }
    return null;
  }
}
