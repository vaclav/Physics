package jetbrains.mps.samples.Physics.iets3.ext.math.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.iets3.core.expr.base.runtime.runtime.PTF;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.IRuleConflictWarningProducer;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_NRootExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_NRootExpression_InferenceRule() {
  }
  public void applyRule(final SNode nRootExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode sqrtExpressionInnerType = typeCheckingContext.typeOf(SLinkOperations.getTarget(nRootExpression, LINKS.expression$kXvr), "r:eaef0861-3ed4-4442-afee-c90aaa3cdaec(jetbrains.mps.samples.Physics.iets3.ext.math.typesystem)", "3773364508684486821", true);
      typeCheckingContext.whenConcrete(sqrtExpressionInnerType, new Runnable() {
        public void run() {
          SNode exponentType = PTF.createRealType(SPropertyOperations.getString(nRootExpression, PROPS.exponent$i0Yd));

          {
            SNode _nodeToCheck_1029348928467 = nRootExpression;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:eaef0861-3ed4-4442-afee-c90aaa3cdaec(jetbrains.mps.samples.Physics.iets3.ext.math.typesystem)", "7396263120860250015", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:eaef0861-3ed4-4442-afee-c90aaa3cdaec(jetbrains.mps.samples.Physics.iets3.ext.math.typesystem)", "7396263120860246629", true), (SNode) typeCheckingContext.getOverloadedOperationType(nRootExpression, exponentType, typeCheckingContext.getExpandedNode(sqrtExpressionInnerType), new IRuleConflictWarningProducer() {
              public void produceWarning(String modelId, String ruleId) {
                typeCheckingContext.reportWarning(nRootExpression, "coflicting rules for overloaded operation type", modelId, ruleId, null, new NodeMessageTarget());

              }
            }), _info_12389875345);
          }
        }
      }, "r:eaef0861-3ed4-4442-afee-c90aaa3cdaec(jetbrains.mps.samples.Physics.iets3.ext.math.typesystem)", "3773364508684486707", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.NRootExpression$WQ;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expression$kXvr = MetaAdapterFactory.getContainmentLink(0xf9bdc72399df40ffL, 0x934cd1f848158f92L, 0x5abff817741099d3L, 0x5abff81774111c3aL, "expression");
  }

  private static final class PROPS {
    /*package*/ static final SProperty exponent$i0Yd = MetaAdapterFactory.getProperty(0xf9bdc72399df40ffL, 0x934cd1f848158f92L, 0x5abff817741099d3L, 0x4a2d0770b38f4fa2L, "exponent");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept NRootExpression$WQ = MetaAdapterFactory.getConcept(0xf9bdc72399df40ffL, 0x934cd1f848158f92L, 0x5abff817741099d3L, "jetbrains.mps.samples.Physics.iets3.ext.math.structure.NRootExpression");
  }
}
