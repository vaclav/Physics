package jetbrains.mps.samples.Physics.iets3.ext.math.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.BaseHelginsDescriptor;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.OverloadedOpsProvider_OneTypeSpecified;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.SubtypingManager;
import org.iets3.core.expr.base.behavior.Type__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.IRuleConflictWarningProducer;
import jetbrains.mps.lang.typesystem.runtime.OverloadedOperationsTypesProvider;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.math.BigDecimal;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.math.MathContext;
import org.nevec.rjm.BigDecimalMath;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.typechecking.TypecheckingFacade;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class TypesystemDescriptor extends BaseHelginsDescriptor {
  public TypesystemDescriptor() {
    {
      InferenceRule_Runtime inferenceRule = new typeof_NRootExpression_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    this.myOverloadedOperationsTypesProviders.add(new CustomOverloadedOperationsTypesProvider_a(CONCEPTS.NRootExpression$WQ));
    this.myOverloadedOperationsTypesProviders.add(new CustomOverloadedOperationsTypesProvider_b(CONCEPTS.PowerExpression$l7));
    {
      OverloadedOpsProvider_OneTypeSpecified provider = new OverloadedOpsProvider_OneTypeSpecified() {
        {
          this.myOperandType = createRealType_3ist9o_a0a0a0a0a0a0a3a0();
          this.myOperationConcept = CONCEPTS.ExpExpression$BA;
          this.myTypeIsExact = false;
          this.myIsStrong = false;
          this.myRuleModelId = "r:eaef0861-3ed4-4442-afee-c90aaa3cdaec(jetbrains.mps.samples.Physics.iets3.ext.math.typesystem)";
          this.myRuleNodeId = "9143082258461674507";
        }
        public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
          return createRealType_3ist9o_a0a1a0a0a0a0d0a();
        }
        public boolean isApplicable(SubtypingManager subtypingManager, SNode operation, SNode leftOperandType, SNode rightOperandType) {
          return (boolean) Type__BehaviorDescriptor.notRequiresSpecialCapability_id7McqtXG$h_u.invoke(SNodeOperations.cast(leftOperandType, CONCEPTS.Type$WK));
        }
        @Override
        public void reportConflict(IRuleConflictWarningProducer producer) {
          producer.produceWarning(myRuleModelId, myRuleNodeId);
        }
      };
      this.myOverloadedOperationsTypesProviders.add(provider);
    }
  }
  public static class CustomOverloadedOperationsTypesProvider_a extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider_a(SAbstractConcept concept) {
      this.myLeftOperandType = createRealType_3ist9o_a0a0a1();
      this.myRightOperandType = createRealType_3ist9o_a0b0a1();
      this.myOperationConcept = concept;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
      this.myRuleModelId = "r:eaef0861-3ed4-4442-afee-c90aaa3cdaec(jetbrains.mps.samples.Physics.iets3.ext.math.typesystem)";
      this.myRuleNodeId = "5344936513388877965";
    }
    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      {
        final SNode expression = rightOperandType;
        if (SNodeOperations.isInstanceOf(expression, CONCEPTS.NumberType$n)) {
          {
            final SNode exponent = leftOperandType;
            if (SNodeOperations.isInstanceOf(exponent, CONCEPTS.NumberType$n)) {
              // We expect the exponent to be constant (float string) 
              BigDecimal expDec = BigDecimal.ONE.divide(new BigDecimal(SPropertyOperations.getString(SLinkOperations.getTarget(exponent, LINKS.range$RnOa), PROPS.min$7OOG)), MathContext.DECIMAL128);

              // Then we compute the min/max value 
              BigDecimal minRoot = BigDecimalMath.pow(new BigDecimal(SPropertyOperations.getString(SLinkOperations.getTarget(expression, LINKS.range$RnOa), PROPS.min$7OOG)), expDec);
              BigDecimal maxRoot = BigDecimalMath.pow(new BigDecimal(SPropertyOperations.getString(SLinkOperations.getTarget(expression, LINKS.range$RnOa), PROPS.max$7P3H)), expDec);

              // Resulting number is computed 
              return createNumberType_3ist9o_a8a0a0a1b(minRoot.min(maxRoot).toString(), minRoot.max(maxRoot).toString());
            }
          }
        }
      }

      // Otherwise it would not be possible to compute more complex type 
      return createRealType_3ist9o_a3a1b();
    }
    public boolean isApplicable(SubtypingManager subtypingManager, SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return (boolean) Type__BehaviorDescriptor.notRequiresSpecialCapability_id7McqtXG$h_u.invoke(SNodeOperations.cast(leftOperandType, CONCEPTS.Type$WK)) && (boolean) Type__BehaviorDescriptor.notRequiresSpecialCapability_id7McqtXG$h_u.invoke(SNodeOperations.cast(rightOperandType, CONCEPTS.Type$WK));
    }
    @Override
    public void reportConflict(IRuleConflictWarningProducer producer) {
      producer.produceWarning(myRuleModelId, myRuleNodeId);
    }
    private static SNode createRealType_3ist9o_a0a0a1() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RealType$36);
      return n0.getResult();
    }
    private static SNode createRealType_3ist9o_a0b0a1() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RealType$36);
      return n0.getResult();
    }
    private static SNode createNumberType_3ist9o_a8a0a0a1b(String p0, String p1) {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.NumberType$n);
      {
        SNodeBuilder n1 = n0.forChild(LINKS.range$RnOa).init(CONCEPTS.NumberRangeSpec$3n);
        n1.setProperty(PROPS.min$7OOG, p0);
        n1.setProperty(PROPS.max$7P3H, p1);
      }
      return n0.getResult();
    }
    private static SNode createRealType_3ist9o_a3a1b() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RealType$36);
      return n0.getResult();
    }
  }
  public static class CustomOverloadedOperationsTypesProvider_b extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider_b(SAbstractConcept concept) {
      this.myLeftOperandType = createRealType_3ist9o_a0a0a2();
      this.myRightOperandType = createRealType_3ist9o_a0b0a2();
      this.myOperationConcept = concept;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
      this.myRuleModelId = "r:eaef0861-3ed4-4442-afee-c90aaa3cdaec(jetbrains.mps.samples.Physics.iets3.ext.math.typesystem)";
      this.myRuleNodeId = "7396263120860399018";
    }
    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x46ff3b3d86d0e74cL, "org.iets3.core.expr.simpleTypes.structure.RealType"));
    }
    public boolean isApplicable(SubtypingManager subtypingManager, SNode operation, SNode leftOperandType, SNode rightOperandType) {
      // Integer type already handled somewhere else 
      return (boolean) Type__BehaviorDescriptor.notRequiresSpecialCapability_id7McqtXG$h_u.invoke(SNodeOperations.cast(leftOperandType, CONCEPTS.Type$WK)) && (boolean) Type__BehaviorDescriptor.notRequiresSpecialCapability_id7McqtXG$h_u.invoke(SNodeOperations.cast(rightOperandType, CONCEPTS.Type$WK)) && !(TypecheckingFacade.getFromContext().isSubtype(rightOperandType, createIntegerType_3ist9o_b0a0a1a2c()));
    }
    @Override
    public void reportConflict(IRuleConflictWarningProducer producer) {
      producer.produceWarning(myRuleModelId, myRuleNodeId);
    }
    private static SNode createRealType_3ist9o_a0a0a2() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RealType$36);
      return n0.getResult();
    }
    private static SNode createRealType_3ist9o_a0b0a2() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RealType$36);
      return n0.getResult();
    }
    private static SNode createIntegerType_3ist9o_b0a0a1a2c() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.IntegerType$m0);
      return n0.getResult();
    }
  }
  private static SNode createRealType_3ist9o_a0a0a0a0a0a0a3a0() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RealType$36);
    return n0.getResult();
  }
  private static SNode createRealType_3ist9o_a0a1a0a0a0a0d0a() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RealType$36);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept NRootExpression$WQ = MetaAdapterFactory.getConcept(0xf9bdc72399df40ffL, 0x934cd1f848158f92L, 0x5abff817741099d3L, "jetbrains.mps.samples.Physics.iets3.ext.math.structure.NRootExpression");
    /*package*/ static final SConcept PowerExpression$l7 = MetaAdapterFactory.getConcept(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9c6144L, "org.iets3.core.expr.math.structure.PowerExpression");
    /*package*/ static final SConcept ExpExpression$BA = MetaAdapterFactory.getConcept(0xf9bdc72399df40ffL, 0x934cd1f848158f92L, 0x7ee2c0df37c860b9L, "jetbrains.mps.samples.Physics.iets3.ext.math.structure.ExpExpression");
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
    /*package*/ static final SConcept NumberType$n = MetaAdapterFactory.getConcept(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x7211e50064d40ea8L, "org.iets3.core.expr.simpleTypes.structure.NumberType");
    /*package*/ static final SConcept RealType$36 = MetaAdapterFactory.getConcept(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x46ff3b3d86d0e74cL, "org.iets3.core.expr.simpleTypes.structure.RealType");
    /*package*/ static final SConcept NumberRangeSpec$3n = MetaAdapterFactory.getConcept(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x127541598201af65L, "org.iets3.core.expr.simpleTypes.structure.NumberRangeSpec");
    /*package*/ static final SConcept IntegerType$m0 = MetaAdapterFactory.getConcept(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x46ff3b3d86d0e6d9L, "org.iets3.core.expr.simpleTypes.structure.IntegerType");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink range$RnOa = MetaAdapterFactory.getContainmentLink(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x7211e50064d40ea8L, 0x127541598201af78L, "range");
  }

  private static final class PROPS {
    /*package*/ static final SProperty min$7OOG = MetaAdapterFactory.getProperty(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x127541598201af65L, 0x127541598201af6fL, "min");
    /*package*/ static final SProperty max$7P3H = MetaAdapterFactory.getProperty(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x127541598201af65L, 0x127541598201af70L, "max");
  }
}
