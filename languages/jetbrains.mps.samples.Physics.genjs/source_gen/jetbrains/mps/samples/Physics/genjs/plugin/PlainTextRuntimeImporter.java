package jetbrains.mps.samples.Physics.genjs.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class PlainTextRuntimeImporter {
  private static final Logger LOG = LogManager.getLogger(PlainTextRuntimeImporter.class);
  public static SNode importFrom(String filename) {
    final List<SNode> lines = ListSequence.fromList(new ArrayList<SNode>());

    // Read file from java resources 
    try (InputStream fileStream = PlainTextRuntimeImporter.class.getResourceAsStream("/res/" + filename)) {
      // Get each line 
      new BufferedReader(new InputStreamReader(fileStream, StandardCharsets.UTF_8)).lines().forEach(new _Adapters._return_P1_E0_to_Consumer_adapter<String>(new _FunctionTypes._return_P1_E0<SNode, String>() {
        public SNode invoke(String it) {
          return ListSequence.fromList(lines).addElement(createTextLine_94agi1_a0a0a0a0b0d0a(it));
        }
      }));
    } catch (Exception e) {
      LoggingRuntime.logMsgView(Level.ERROR, "unable to read lines from " + filename, PlainTextRuntimeImporter.class, e, null);
    }

    return createTextFile_94agi1_a5a0(filename, lines);
  }
  private static SNode createTextLine_94agi1_a0a0a0a0b0d0a(String p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.TextLine$zd);
    n0.setProperty(PROPS.text$DMB3, p0);
    return n0.getResult();
  }
  private static SNode createTextFile_94agi1_a5a0(String p0, Iterable<? extends SNode> p1) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.TextFile$QX);
    n0.setProperty(PROPS.name$MnvL, p0);
    n0.forChild(LINKS.lines$DTIB).initNodeList(p1, CONCEPTS.TextLine$zd);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TextLine$zd = MetaAdapterFactory.getConcept(0xd5033ceef63244b6L, 0xb30889d4fbde34ffL, 0x180805c7b1d668a2L, "jetbrains.mps.build.startup.structure.TextLine");
    /*package*/ static final SConcept TextFile$QX = MetaAdapterFactory.getConcept(0xd5033ceef63244b6L, 0xb30889d4fbde34ffL, 0x180805c7b1d6687cL, "jetbrains.mps.build.startup.structure.TextFile");
  }

  private static final class PROPS {
    /*package*/ static final SProperty text$DMB3 = MetaAdapterFactory.getProperty(0xd5033ceef63244b6L, 0xb30889d4fbde34ffL, 0x180805c7b1d668a2L, 0x180805c7b1df77d9L, "text");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink lines$DTIB = MetaAdapterFactory.getContainmentLink(0xd5033ceef63244b6L, 0xb30889d4fbde34ffL, 0x180805c7b1d6687cL, 0x180805c7b1d668b1L, "lines");
  }
}
