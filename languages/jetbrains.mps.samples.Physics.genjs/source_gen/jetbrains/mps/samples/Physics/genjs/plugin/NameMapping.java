package jetbrains.mps.samples.Physics.genjs.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

/**
 * Classe used to make names for javascript generation
 * 
 * Mapping labels are not used in this case because of some implementation incompatibility
 *  with instance variables in ecmascript4mps (the variables, modules are not refered from
 * imports or this.something, a simple string is issue with no possibility to use mapping labels
 * in properties).
 */
public class NameMapping {
  private static final Logger LOG = LogManager.getLogger(NameMapping.class);
  public static String variableNameOf(SNode node) {
    return prefixedNameOf(node, "object");
  }
  public static String moduleNameOf(SNode node) {
    return prefixedNameOf(node, SNodeOperations.getConcept(node).getName().replace(" ", "_"));
  }
  public static String defaultExportNameOf(SNode node) {
    return prefixedNameOf(node, "defaultExport");
  }


  public static String nameOf(SNode node) {
    return prefixedNameOf(node, "_");
  }

  public static String prefixedNameOf(SNode node, String prefix) {
    {
      final SNode namedNode = node;
      if (SNodeOperations.isInstanceOf(namedNode, CONCEPTS.INamedConcept$Kd)) {
        return prefix + "_" + SPropertyOperations.getString(namedNode, PROPS.name$MnvL).replace(" ", "_") + "_" + node.hashCode();
      }
    }

    LoggingRuntime.logMsgView(Level.WARN, "node with no name issued to NameMapping.nameOf : " + BaseConcept__BehaviorDescriptor.getDetailedPresentation_id22G2W3WJ92t.invoke(node), NameMapping.class, null, null);
    return prefix + "_" + BaseConcept__BehaviorDescriptor.getDetailedPresentation_id22G2W3WJ92t.invoke(node).replace(" ", "_") + "_" + node.hashCode();
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept INamedConcept$Kd = MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
