package org.mar9000.mps.ecmascript.bundler.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.ScopeProvider__BehaviorDescriptor;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class JSInjectModule__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x8d94c08e449e484bL, 0x9e9ef3e97c8df28aL, 0x159ecb3ed37c0e17L, "org.mar9000.mps.ecmascript.bundler.structure.JSInjectModule");

  public static final SMethod<Scope> getBindings_id2l8t3D7B8EG = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getBindings").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2l8t3D7B8EG").build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getBindings_id2l8t3D7B8EG);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Scope getBindings_id2l8t3D7B8EG(@NotNull SNode __thisNode__, SAbstractConcept kind) {
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.module$xfZi) != null)) {
      SNode ancestor = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(__thisNode__, LINKS.module$xfZi), CONCEPTS.JSProgram$Dg, true, false);

      // Small barrier against circular dependencies 
      if (ancestor != SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.JSProgram$Dg, true, false)) {
        return ScopeProvider__BehaviorDescriptor.getScope_id52_Geb4QDV$.invoke(ancestor, kind, null);
      }
    }

    return new EmptyScope();
  }

  /*package*/ JSInjectModule__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Scope) getBindings_id2l8t3D7B8EG(node, (SAbstractConcept) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink module$xfZi = MetaAdapterFactory.getReferenceLink(0x8d94c08e449e484bL, 0x9e9ef3e97c8df28aL, 0x159ecb3ed37c0e17L, 0x159ecb3ed37f24c3L, "module");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept JSProgram$Dg = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2dcb72L, "org.mar9000.mps.ecmascript.structure.JSProgram");
  }
}
