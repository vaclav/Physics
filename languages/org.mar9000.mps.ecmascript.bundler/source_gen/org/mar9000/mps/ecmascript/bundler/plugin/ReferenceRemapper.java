package org.mar9000.mps.ecmascript.bundler.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class ReferenceRemapper {
  /**
   * Merge given ordered dependencies, remapping their references to copied values
   * 
   * @param orderedDependencies programs to bundle, in order of requirement
   */
  public static SNode remapAndMerge(List<SNode> orderedDependencies, SNode source) {
    final SNode output = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2dcb72L, "org.mar9000.mps.ecmascript.structure.JSProgram"));
    SPropertyOperations.assign(output, PROPS.name$MnvL, SPropertyOperations.getString(source, PROPS.name$MnvL));
    SLinkOperations.setTarget(output, LINKS.environment$NB94, SLinkOperations.getTarget(source, LINKS.environment$NB94));

    final Map<SNode, SNode> mappingLabel = MapSequence.fromMap(new HashMap<SNode, SNode>());

    // Copy and save root references
    Sequence.fromIterable(SLinkOperations.collectMany(orderedDependencies, LINKS.body$yN3j)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        final Wrappers._T<SNode> copy = new Wrappers._T<SNode>(SNodeOperations.copyNode(it));

        {
          final SNode classDecl = it;
          if (SNodeOperations.isInstanceOf(classDecl, CONCEPTS.JSClassDeclaration$X)) {
            MapSequence.fromMap(mappingLabel).put(it, copy.value);
            MapSequence.fromMap(mappingLabel).put(SLinkOperations.getTarget(classDecl, LINKS.identifier$hdjC), SLinkOperations.getTarget(SNodeOperations.cast(copy.value, CONCEPTS.JSClassDeclaration$X), LINKS.identifier$hdjC));
          }
        }

        {
          final SNode funDecl = it;
          if (SNodeOperations.isInstanceOf(funDecl, CONCEPTS.JSFunctionDeclaration$dB)) {
            MapSequence.fromMap(mappingLabel).put(it, copy.value);
            MapSequence.fromMap(mappingLabel).put(SLinkOperations.getTarget(funDecl, LINKS.identifier$WVK_), SLinkOperations.getTarget(SNodeOperations.cast(copy.value, CONCEPTS.JSFunctionDeclaration$dB), LINKS.identifier$WVK_));
          }
        }

        {
          final SNode varDecl = it;
          if (SNodeOperations.isInstanceOf(varDecl, CONCEPTS.JSVariableStatement$BP)) {
            // Copy all references target
            copy.value = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2de484L, "org.mar9000.mps.ecmascript.structure.JSVariableStatement"));

            ListSequence.fromList(SLinkOperations.getChildren(varDecl, LINKS.declarations$NUzu)).visitAll(new IVisitor<SNode>() {
              public void visit(SNode decl) {
                SNode declCopy = SNodeOperations.copyNode(decl);
                MapSequence.fromMap(mappingLabel).put(decl, SNodeOperations.copyNode(decl));
                ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(copy.value, CONCEPTS.JSVariableStatement$BP), LINKS.declarations$NUzu)).addElement(declCopy);
              }
            });
          }
        }
        // TODO external imports

        ListSequence.fromList(SLinkOperations.getChildren(output, LINKS.body$yN3j)).addElement(copy.value);
      }
    });

    // Resolve class references
    ListSequence.fromList(SNodeOperations.getNodeDescendants(output, CONCEPTS.JSClassDeclarationReference$tf, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(it, LINKS.classDeclaration$kIL8), CONCEPTS.JSProgram$Dg, false, false) != output;
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (MapSequence.fromMap(mappingLabel).containsKey(SLinkOperations.getTarget(it, LINKS.classDeclaration$kIL8))) {
          SLinkOperations.setTarget(it, LINKS.classDeclaration$kIL8, SNodeOperations.cast(MapSequence.fromMap(mappingLabel).get(SLinkOperations.getTarget(it, LINKS.classDeclaration$kIL8)), CONCEPTS.JSClassDeclaration$X));
        }
      }
    });

    // Resolve function references
    ListSequence.fromList(SNodeOperations.getNodeDescendants(output, CONCEPTS.JSFunctionDeclarationReference$Ma, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(it, LINKS.functionDeclaration$xTeC), CONCEPTS.JSProgram$Dg, false, false) != output;
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (MapSequence.fromMap(mappingLabel).containsKey(SLinkOperations.getTarget(it, LINKS.functionDeclaration$xTeC))) {
          SLinkOperations.setTarget(it, LINKS.functionDeclaration$xTeC, SNodeOperations.cast(MapSequence.fromMap(mappingLabel).get(SLinkOperations.getTarget(it, LINKS.functionDeclaration$xTeC)), CONCEPTS.JSFunctionDeclaration$dB));
        }
      }
    });

    // Resolve variable references
    ListSequence.fromList(SNodeOperations.getNodeDescendants(output, CONCEPTS.JSVariableDeclaratorReference$S1, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(it, LINKS.variableDeclarator$VWa8), CONCEPTS.JSProgram$Dg, false, false) != output;
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (MapSequence.fromMap(mappingLabel).containsKey(SLinkOperations.getTarget(it, LINKS.variableDeclarator$VWa8))) {
          SLinkOperations.setTarget(it, LINKS.variableDeclarator$VWa8, SNodeOperations.cast(MapSequence.fromMap(mappingLabel).get(SLinkOperations.getTarget(it, LINKS.variableDeclarator$VWa8)), CONCEPTS.JSSimpleVariableDeclaration$N0));
        }
      }
    });

    // Resolve binding identifiers
    ListSequence.fromList(SNodeOperations.getNodeDescendants(output, CONCEPTS.JSBindingIdentifierReference$Ci, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(it, LINKS.bindingIdentifier$$kKE), CONCEPTS.JSProgram$Dg, false, false) != output;
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (MapSequence.fromMap(mappingLabel).containsKey(SLinkOperations.getTarget(it, LINKS.bindingIdentifier$$kKE))) {
          SLinkOperations.setTarget(it, LINKS.bindingIdentifier$$kKE, SNodeOperations.cast(MapSequence.fromMap(mappingLabel).get(SLinkOperations.getTarget(it, LINKS.bindingIdentifier$$kKE)), CONCEPTS.JSBindingIdentifier$IP));
        }
      }
    });


    return output;
  }



  public static boolean isInstanceOfAny(final SNode node, SAbstractConcept... concepts) {
    return Sequence.fromIterable(Sequence.fromArray(concepts)).any(new IWhereFilter<SAbstractConcept>() {
      public boolean accept(SAbstractConcept it) {
        return SNodeOperations.isInstanceOf(node, SNodeOperations.asSConcept(it));
      }
    });
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink environment$NB94 = MetaAdapterFactory.getContainmentLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2dcb72L, 0x3316da67d9804b13L, "environment");
    /*package*/ static final SContainmentLink body$yN3j = MetaAdapterFactory.getContainmentLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2dcb72L, 0x2cc6dbd4f2dcbaaL, "body");
    /*package*/ static final SContainmentLink identifier$hdjC = MetaAdapterFactory.getContainmentLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x38b81a6d915c9e44L, 0x38b81a6d915c9e45L, "identifier");
    /*package*/ static final SContainmentLink identifier$WVK_ = MetaAdapterFactory.getContainmentLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2dd30bL, 0x6a4c048be45ab573L, "identifier");
    /*package*/ static final SContainmentLink declarations$NUzu = MetaAdapterFactory.getContainmentLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2de484L, 0x2cc6dbd4f2de6d8L, "declarations");
    /*package*/ static final SReferenceLink classDeclaration$kIL8 = MetaAdapterFactory.getReferenceLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x30004450369d20e3L, 0x30004450369d20e4L, "classDeclaration");
    /*package*/ static final SReferenceLink functionDeclaration$xTeC = MetaAdapterFactory.getReferenceLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x67cfb3bd31ff7e3bL, 0x67cfb3bd31ff7e3cL, "functionDeclaration");
    /*package*/ static final SReferenceLink variableDeclarator$VWa8 = MetaAdapterFactory.getReferenceLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x75626cc0fc2c6a4aL, 0x75626cc0fc2c6a4bL, "variableDeclarator");
    /*package*/ static final SReferenceLink bindingIdentifier$$kKE = MetaAdapterFactory.getReferenceLink(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2d4ee60bebc0575L, 0x2d4ee60bebc0578L, "bindingIdentifier");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept JSClassDeclaration$X = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x38b81a6d915c9e30L, "org.mar9000.mps.ecmascript.structure.JSClassDeclaration");
    /*package*/ static final SConcept JSFunctionDeclaration$dB = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2dd30bL, "org.mar9000.mps.ecmascript.structure.JSFunctionDeclaration");
    /*package*/ static final SConcept JSVariableStatement$BP = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2de484L, "org.mar9000.mps.ecmascript.structure.JSVariableStatement");
    /*package*/ static final SConcept JSClassDeclarationReference$tf = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x30004450369d20e3L, "org.mar9000.mps.ecmascript.structure.JSClassDeclarationReference");
    /*package*/ static final SConcept JSProgram$Dg = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2dcb72L, "org.mar9000.mps.ecmascript.structure.JSProgram");
    /*package*/ static final SConcept JSFunctionDeclarationReference$Ma = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x67cfb3bd31ff7e3bL, "org.mar9000.mps.ecmascript.structure.JSFunctionDeclarationReference");
    /*package*/ static final SConcept JSVariableDeclaratorReference$S1 = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x75626cc0fc2c6a4aL, "org.mar9000.mps.ecmascript.structure.JSVariableDeclaratorReference");
    /*package*/ static final SConcept JSSimpleVariableDeclaration$N0 = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x76eb757dfbac8133L, "org.mar9000.mps.ecmascript.structure.JSSimpleVariableDeclaration");
    /*package*/ static final SConcept JSBindingIdentifierReference$Ci = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2d4ee60bebc0575L, "org.mar9000.mps.ecmascript.structure.JSBindingIdentifierReference");
    /*package*/ static final SConcept JSBindingIdentifier$IP = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x5d2a78e40b5584c0L, "org.mar9000.mps.ecmascript.structure.JSBindingIdentifier");
  }
}
