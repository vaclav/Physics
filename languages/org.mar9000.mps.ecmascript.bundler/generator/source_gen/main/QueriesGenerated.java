package main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.MappingScriptContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.List;
import org.mar9000.mps.ecmascript.bundler.plugin.DependenciesSolver;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.mar9000.mps.ecmascript.bundler.plugin.ReferenceRemapper;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static void mappingScript_CodeBlock_1(final MappingScriptContext _context) {
    final Iterable<SNode> bundles = ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.JSProgram$Dg)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (new IAttributeDescriptor.NodeAttribute(CONCEPTS.BundleProgram$cW).get(it) != null);
      }
    });
    Iterable<SNode> temporary = ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.JSProgram$Dg)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(Sequence.fromIterable(bundles).contains(it));
      }
    });

    Sequence.fromIterable(bundles).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        // Solve dependencies in appearance order
        List<SNode> dependencies = DependenciesSolver.dependenciesOf(it);

        // Replace program with its bundled version
        SNode newProgram = SNodeOperations.replaceWithAnother(it, ReferenceRemapper.remapAndMerge(dependencies, it));

        ListSequence.fromList(SNodeOperations.getNodeDescendants(newProgram, CONCEPTS.JSInjectModule$wX, false, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            SNodeOperations.deleteNode(it);
          }
        });
      }
    });

    Sequence.fromIterable(temporary).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.deleteNode(it);
      }
    });
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("1557905991818839842", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    ScriptCodeBlock query = identity.forTemplateNode(mscbMethods);
    return (query != null ? query : super.getScriptCodeBlock(identity));
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_1(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept JSProgram$Dg = MetaAdapterFactory.getConcept(0xa48297046b1b4b3fL, 0x8122a4a2e6ac90ffL, 0x2cc6dbd4f2dcb72L, "org.mar9000.mps.ecmascript.structure.JSProgram");
    /*package*/ static final SConcept BundleProgram$cW = MetaAdapterFactory.getConcept(0x8d94c08e449e484bL, 0x9e9ef3e97c8df28aL, 0x159ecb3ed37f6c22L, "org.mar9000.mps.ecmascript.bundler.structure.BundleProgram");
    /*package*/ static final SConcept JSInjectModule$wX = MetaAdapterFactory.getConcept(0x8d94c08e449e484bL, 0x9e9ef3e97c8df28aL, 0x159ecb3ed37c0e17L, "org.mar9000.mps.ecmascript.bundler.structure.JSInjectModule");
  }
}
