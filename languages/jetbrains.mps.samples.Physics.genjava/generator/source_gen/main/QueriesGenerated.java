package main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.samples.Physics.behavior.Force__BehaviorDescriptor;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.IfMacroContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.samples.Physics.behavior.OverrideRule__BehaviorDescriptor;
import jetbrains.mps.samples.Physics.behavior.IForceWithCache__BehaviorDescriptor;
import jetbrains.mps.generator.template.TemplateArgumentContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.generator.template.InsertMacroContext;
import jetbrains.mps.samples.Physics.dimensions.behavior.UnitConversionUtil;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import jetbrains.mps.generator.impl.query.QueryKeyImpl;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.generator.impl.query.IfMacroCondition;
import jetbrains.mps.generator.impl.query.InlineSwitchCaseCondition;
import jetbrains.mps.generator.template.InlineSwitchCaseContext;
import jetbrains.mps.generator.impl.query.ReferenceTargetQuery;
import jetbrains.mps.generator.impl.query.CallArgumentQuery;
import jetbrains.mps.generator.impl.query.InsertMacroQuery;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean rule_Condition_0_0(final BaseMappingRuleContext _context) {
    // Other cases possible? 
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$_Vc0), CONCEPTS.DotExpression$Af);
  }
  public static boolean rule_Condition_2_0(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0)), _quotation_createNode_x583g4_b0a0a0c()) || TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9)), _quotation_createNode_x583g4_b0a0a0c_0());
  }
  public static boolean rule_Condition_4_0(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.ForceComponentsTarget$W$);
  }
  public static boolean rule_Condition_4_1(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.ForceApplicationPointTarget$GC);
  }
  public static boolean rule_Condition_4_2(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.ObjectDistanceWithTarget$OH);
  }
  public static boolean rule_Condition_4_3(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.ObjectMassTarget$_T);
  }
  public static boolean rule_Condition_4_4(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.ObjectPositionTarget$we);
  }
  public static boolean rule_Condition_4_5(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.ObjectVelocityTarget$a7);
  }
  public static boolean rule_Condition_4_6(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.WorldMassCenterTarget$Mg);
  }
  public static boolean rule_Condition_4_7(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorOppositeTarget$Ac);
  }
  public static boolean rule_Condition_4_8(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorResizeTarget$Am);
  }
  public static boolean rule_Condition_4_9(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.WorldNestedObjectTarget$p3);
  }
  public static boolean rule_Condition_4_10(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.UseUnitExpressionAs$IL);
  }
  public static boolean rule_Condition_4_11(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorComponentTarget$ME);
  }
  public static boolean rule_Condition_4_12(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorComponentTarget$ME), PROPS.component$_d4D), 0x6520d39c9504b3d9L);
  }
  public static boolean rule_Condition_4_13(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorComponentTarget$ME), PROPS.component$_d4D), 0x6520d39c9504b3daL);
  }
  public static boolean rule_Condition_4_14(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorComponentTarget$ME), PROPS.component$_d4D), 0x6520d39c9504b3ddL);
  }
  public static boolean rule_Condition_4_15(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorComponentTarget$ME), PROPS.component$_d4D), 0x6520d39c9504b3f4L);
  }
  public static boolean rule_Condition_4_16(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorComponentTarget$ME), PROPS.component$_d4D), 0x6520d39c9504b3eeL);
  }
  public static boolean rule_Condition_4_17(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorComponentTarget$ME), PROPS.component$_d4D), 0x6520d39c9504b3e9L);
  }
  public static boolean rule_Condition_9_0(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.reaction$_ldw), 0x298a87ff7e3fd75fL);
  }
  public static boolean rule_Condition_9_1(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.reaction$_ldw), 0x298a87ff7e3fd763L);
  }
  public static boolean rule_Condition_9_2(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.reaction$_ldw), 0x298a87ff7e3fd767L);
  }
  public static boolean rule_Condition_9_3(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.reaction$_ldw), 0x298a87ff7e3fd760L);
  }
  public static boolean rule_Condition_9_4(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.reaction$_ldw), 0x66b2f84fc32c32b8L);
  }
  public static boolean rule_Condition_12_0(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0)), _quotation_createNode_x583g4_b0a0a62());
  }
  public static boolean rule_Condition_12_1(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9)), _quotation_createNode_x583g4_b0a0a72());
  }
  public static boolean rule_Condition_12_2(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0)), _quotation_createNode_x583g4_b0a0a82());
  }
  public static boolean rule_Condition_12_3(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0)), _quotation_createNode_x583g4_b0a0a0db()) && TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9)), _quotation_createNode_x583g4_b0a0a0db_0());
  }
  public static boolean rule_Condition_12_4(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0)), _quotation_createNode_x583g4_b0a0a0eb()) && TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9)), _quotation_createNode_x583g4_b0a0a0eb_0());
  }
  public static boolean rule_Condition_12_5(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0)), _quotation_createNode_x583g4_b0a0a0fb_0()) || TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9)), _quotation_createNode_x583g4_b0a0a0fb());
  }
  public static boolean rule_Condition_12_6(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0)), _quotation_createNode_x583g4_b0a0a0gb_0()) || TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9)), _quotation_createNode_x583g4_b0a0a0gb());
  }
  public static boolean rule_Condition_12_7(final BaseMappingRuleContext _context) {
    return TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0)), _quotation_createNode_x583g4_b0a0a0hb_0()) || TypecheckingFacade.getFromContext().isSubtype(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9)), _quotation_createNode_x583g4_b0a0a0hb());
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return (_context.createUniqueValidId(_context.getNode())) + "Simulation";
  }
  public static Object propertyMacro_GetValue_5_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.exponent$9cvW);
  }
  public static Object propertyMacro_GetValue_6_0(final PropertyMacroContext _context) {
    return (int) Force__BehaviorDescriptor.getForceMode_id4$vyCQBiMP2.invoke(_context.getNode());
  }
  public static Object propertyMacro_GetValue_7_0(final PropertyMacroContext _context) {
    return _context.createUniqueValidId(_context.getNode());
  }
  public static Object propertyMacro_GetValue_7_1(final PropertyMacroContext _context) {
    return _context.createUniqueValidId(_context.getNode());
  }
  public static Object propertyMacro_GetValue_7_2(final PropertyMacroContext _context) {
    return _context.createUniqueValidId(_context.getNode());
  }
  public static Object propertyMacro_GetValue_7_3(final PropertyMacroContext _context) {
    return (_context.createUniqueValidId(_context.getNode())) + "PhysicalEntity";
  }
  public static Object propertyMacro_GetValue_7_4(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_7_5(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_7_6(final PropertyMacroContext _context) {
    return (_context.createUniqueValidId(_context.getNode())) + "SystemScope";
  }
  public static Object propertyMacro_GetValue_8_0(final PropertyMacroContext _context) {
    return (_context.createUniqueValidId(_context.getNode())) + "AbstractEntity";
  }
  public static Object propertyMacro_GetValue_9_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getEnum(_context.getNode(), PROPS.shape$2xnw).getPresentation();
  }
  public static Object propertyMacro_GetValue_9_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), PROPS.red$EIY);
  }
  public static Object propertyMacro_GetValue_9_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), PROPS.green$ELp);
  }
  public static Object propertyMacro_GetValue_9_3(final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), PROPS.blue$EJW);
  }
  public static Object propertyMacro_GetValue_13_0(final PropertyMacroContext _context) {
    return (_context.createUniqueValidId(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.INamedConcept$nV))) + "AlternativeView" + SNodeOperations.getIndexInParent(_context.getNode());
  }
  public static Object referenceMacro_GetReferent_1_0(final ReferenceMacroContext _context) {
    return SNodeOperations.getNodeAncestor(_context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.world$qRPN), LINKS.target$12L0), "worldDefinitionClasses"), CONCEPTS.Classifier$hJ, false, false);
  }
  public static Object referenceMacro_GetReferent_1_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.world$qRPN), LINKS.target$12L0), "worldDefinitionClasses");
  }
  public static Object referenceMacro_GetReferent_2_0(final ReferenceMacroContext _context) {
    return "cached";
  }
  public static Object referenceMacro_GetReferent_2_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(_context.getNode(), LINKS.target$EWj0), "worldObjectsVariables");
  }
  public static Object referenceMacro_GetReferent_4_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.WorldNestedObjectTarget$p3), LINKS.target$g02E), "worldObjectsVariables");
  }
  public static Object referenceMacro_GetReferent_6_0(final ReferenceMacroContext _context) {
    return SNodeOperations.getNodeAncestor(_context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.WorldDefinition$Xn, false, false), "worldDefinitionClasses"), CONCEPTS.Classifier$hJ, false, false);
  }
  public static Object referenceMacro_GetReferent_6_1(final ReferenceMacroContext _context) {
    return SNodeOperations.getNodeAncestor(_context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.WorldDefinition$Xn, false, false), "worldDefinitionClasses"), CONCEPTS.Classifier$hJ, false, false);
  }
  public static Object referenceMacro_GetReferent_6_2(final ReferenceMacroContext _context) {
    return SNodeOperations.getNodeAncestor(_context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.WorldDefinition$Xn, false, false), "worldDefinitionClasses"), CONCEPTS.Classifier$hJ, false, false);
  }
  public static Object referenceMacro_GetReferent_7_0(final ReferenceMacroContext _context) {
    return SNodeOperations.getNodeAncestor(_context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.world$ZN60), LINKS.target$12L0), "worldDefinitionClasses"), CONCEPTS.Classifier$hJ, false, false);
  }
  public static Object referenceMacro_GetReferent_7_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.world$ZN60), LINKS.target$12L0), "worldDefinitionClasses");
  }
  public static Object referenceMacro_GetReferent_7_2(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.parent$OiBt), LINKS.target$OiAw), "abstractObjectClasses");
  }
  public static Object referenceMacro_GetReferent_8_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.parent$OiBt), LINKS.target$OiAw), "abstractObjectClasses");
  }
  public static Object referenceMacro_GetReferent_13_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Simulation$oX), "simulationMainClass");
  }
  public static boolean ifMacro_Condition_1_0(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.simulationScale$eVy5) != null);
  }
  public static boolean ifMacro_Condition_1_1(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.cameraPosition$_PZQ) != null);
  }
  public static boolean ifMacro_Condition_1_2(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.focus$_WjO) != null);
  }
  public static boolean ifMacro_Condition_3_0(final IfMacroContext _context) {
    return (SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.AbstractForce$Pj, false, false) == null);
  }
  public static boolean ifMacro_Condition_6_0(final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.IForceWithCache$ie);
  }
  public static boolean ifMacro_Condition_6_1(final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.IForceWithCache$ie);
  }
  public static boolean ifMacro_Condition_6_2(final IfMacroContext _context) {
    return (SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.WorldDefinition$Xn, false, false) != null);
  }
  public static boolean ifMacro_Condition_6_3(final IfMacroContext _context) {
    return (SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.WorldDefinition$Xn, false, false) != null);
  }
  public static boolean ifMacro_Condition_6_4(final IfMacroContext _context) {
    return (SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.WorldDefinition$Xn, false, false) != null);
  }
  public static boolean ifMacro_Condition_6_5(final IfMacroContext _context) {
    return (Force__BehaviorDescriptor.getApplicationPointExpression_id4$vyCQBi$go.invoke(_context.getNode()) != null);
  }
  public static boolean ifMacro_Condition_7_0(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.velocity$DoVv) != null);
  }
  public static boolean ifMacro_Condition_7_1(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.parent$OiBt) != null);
  }
  public static boolean ifMacro_Condition_7_2(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.velocity$DoVv) != null);
  }
  public static boolean ifMacro_Condition_7_3(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.velocity$DoVv) == null);
  }
  public static boolean ifMacro_Condition_8_0(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.parent$OiBt) != null);
  }
  public static SNode sourceNodeQuery_0_0(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) OverrideRule__BehaviorDescriptor.getTarget_id2AM6gIjLTgY.invoke(_context.getNode());
  }
  public static SNode sourceNodeQuery_0_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expression$87ts);
  }
  public static SNode sourceNodeQuery_0_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.key$4rdb);
  }
  public static SNode sourceNodeQuery_0_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.value$4y25);
  }
  public static SNode sourceNodeQuery_1_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.simulationSpeed$m7cv);
  }
  public static SNode sourceNodeQuery_1_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.simulationScale$eVy5);
  }
  public static SNode sourceNodeQuery_1_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.cameraPosition$_PZQ);
  }
  public static SNode sourceNodeQuery_1_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.focus$_WjO);
  }
  public static SNode sourceNodeQuery_3_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.dx$VpuT);
  }
  public static SNode sourceNodeQuery_3_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.dy$VWrJ);
  }
  public static SNode sourceNodeQuery_3_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.dz$VWBn);
  }
  public static SNode sourceNodeQuery_3_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.theta$xDa9);
  }
  public static SNode sourceNodeQuery_3_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.phi$xD9b);
  }
  public static SNode sourceNodeQuery_3_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.distance$xDc5);
  }
  public static SNode sourceNodeQuery_3_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.coordinates$l1nt);
  }
  public static SNode sourceNodeQuery_3_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.relativeFrom$gwcw);
  }
  public static SNode sourceNodeQuery_3_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.axialDistance$ip5F);
  }
  public static SNode sourceNodeQuery_3_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.phi$ip6D);
  }
  public static SNode sourceNodeQuery_3_10(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.height$ip86);
  }
  public static SNode sourceNodeQuery_3_11(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.direction$2h5b);
  }
  public static SNode sourceNodeQuery_3_12(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.length$2h69);
  }
  public static SNode sourceNodeQuery_3_13(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.direction$2h5b);
  }
  public static SNode sourceNodeQuery_3_14(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.length$2h69);
  }
  public static SNode sourceNodeQuery_4_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.ObjectDistanceWithTarget$OH), LINKS.target$oizF);
  }
  public static SNode sourceNodeQuery_4_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_10(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.VectorResizeTarget$Am), LINKS.newLength$Gnlv);
  }
  public static SNode sourceNodeQuery_4_11(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_12(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_13(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_14(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_15(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_16(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_4_17(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_5_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.numerator$mY30);
  }
  public static SNode sourceNodeQuery_5_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.denominator$mY4t);
  }
  public static SNode sourceNodeQuery_5_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xkR7);
  }
  public static SNode sourceNodeQuery_5_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.exponent$ZOgM);
  }
  public static SNode sourceNodeQuery_5_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa);
  }
  public static SNode sourceNodeQuery_5_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$y7Am);
  }
  public static SNode sourceNodeQuery_5_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.upper$Bhku);
  }
  public static SNode sourceNodeQuery_5_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.lower$No2S);
  }
  public static SNode sourceNodeQuery_5_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.body$Bhy2);
  }
  public static SNode sourceNodeQuery_5_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expression$tVRI);
  }
  public static SNode sourceNodeQuery_6_0(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IForceWithCache__BehaviorDescriptor.cacheType_id4$vyCQBisbm.invoke(SNodeOperations.as(_context.getNode(), CONCEPTS.IForceWithCache$ie));
  }
  public static SNode sourceNodeQuery_6_1(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IForceWithCache__BehaviorDescriptor.cachedValueExpression_id4$vyCQBisaz.invoke(SNodeOperations.as(_context.getNode(), CONCEPTS.IForceWithCache$ie));
  }
  public static SNode sourceNodeQuery_6_2(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) Force__BehaviorDescriptor.getLinearForceExpression_id4$vyCQBi$gg.invoke(_context.getNode());
  }
  public static SNode sourceNodeQuery_6_3(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) Force__BehaviorDescriptor.getApplicationPointExpression_id4$vyCQBi$go.invoke(_context.getNode());
  }
  public static SNode sourceNodeQuery_7_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.position$DoV0);
  }
  public static SNode sourceNodeQuery_7_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.velocity$DoVv);
  }
  public static SNode sourceNodeQuery_7_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.mass$9nTx);
  }
  public static SNode sourceNodeQuery_7_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.position$DoV0);
  }
  public static SNode sourceNodeQuery_7_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.velocity$DoVv);
  }
  public static SNode sourceNodeQuery_9_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.color$x_mI), LINKS.definition$PSSt);
  }
  public static SNode sourceNodeQuery_12_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0);
  }
  public static SNode sourceNodeQuery_12_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9);
  }
  public static SNode sourceNodeQuery_12_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9);
  }
  public static SNode sourceNodeQuery_12_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0);
  }
  public static SNode sourceNodeQuery_12_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0);
  }
  public static SNode sourceNodeQuery_12_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9);
  }
  public static SNode sourceNodeQuery_12_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0);
  }
  public static SNode sourceNodeQuery_12_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9);
  }
  public static SNode sourceNodeQuery_12_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0);
  }
  public static SNode sourceNodeQuery_12_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9);
  }
  public static SNode sourceNodeQuery_12_10(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9);
  }
  public static SNode sourceNodeQuery_12_11(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0);
  }
  public static SNode sourceNodeQuery_12_12(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0);
  }
  public static SNode sourceNodeQuery_12_13(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9);
  }
  public static SNode sourceNodeQuery_12_14(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$gQj0);
  }
  public static SNode sourceNodeQuery_12_15(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$gQu9);
  }
  public static SNode sourceNodeQuery_14_0(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("contextExpression"));
  }
  public static SNode sourceNodeQuery_14_1(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("valueExpression"));
  }
  public static SNode sourceNodeQuery_14_2(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("contextExpression"));
  }
  public static SNode sourceNodeQuery_14_3(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("valueExpression"));
  }
  public static SNode sourceNodeQuery_14_4(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("contextExpression"));
  }
  public static SNode sourceNodeQuery_14_5(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("valueExpression"));
  }
  public static SNode sourceNodeQuery_14_6(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("contextExpression"));
  }
  public static SNode sourceNodeQuery_14_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.styleKey$ANGW);
  }
  public static SNode sourceNodeQuery_14_8(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("valueExpression"));
  }
  public static Object templateArgumentQuery_0_0(final TemplateArgumentContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), LINKS.target$_Vc0), CONCEPTS.DotExpression$Af), LINKS.expr$xFwa);
  }
  public static Object templateArgumentQuery_0_1(final TemplateArgumentContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.newValue$_Vn9);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.overrideRules$taI3);
  }
  public static Iterable<SNode> sourceNodesQuery_1_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.views$nE$z);
  }
  public static Iterable<SNode> sourceNodesQuery_7_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.includes$hLn0);
  }
  public static Iterable<SNode> sourceNodesQuery_7_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.objects$ZjAV);
  }
  public static Iterable<SNode> sourceNodesQuery_7_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.objects$ZjAV);
  }
  public static Iterable<SNode> sourceNodesQuery_7_3(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.includes$hLn0);
  }
  public static Iterable<SNode> sourceNodesQuery_7_4(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.objects$ZjAV);
  }
  public static Iterable<SNode> sourceNodesQuery_7_5(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.styles$W8dv);
  }
  public static Iterable<SNode> sourceNodesQuery_7_6(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.forces$OiCr);
  }
  public static Iterable<SNode> sourceNodesQuery_7_7(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.objects$ZjAV);
  }
  public static Iterable<SNode> sourceNodesQuery_8_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.styles$W8dv);
  }
  public static Iterable<SNode> sourceNodesQuery_8_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.forces$OiCr);
  }
  public static Iterable<SNode> sourceNodesQuery_13_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.overrideRules$taI3);
  }
  public static SNode insertMacro_Query_2_0(final InsertMacroContext _context) {
    return UnitConversionUtil.compositeExpressionToBase(SLinkOperations.getTarget(_context.getNode(), LINKS.content$Gf5w), SLinkOperations.getChildren(_context.getNode(), LINKS.units$o6Ow), true);
  }
  public static SNode insertMacro_Query_4_0(final InsertMacroContext _context) {
    SNode target = SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), LINKS.target$NL8Z), CONCEPTS.UseUnitExpressionAs$IL);
    return UnitConversionUtil.compositeExpressionToBase(SLinkOperations.getTarget(_context.getNode(), LINKS.expr$xFwa), SLinkOperations.getChildren(target, LINKS.units$o6Ow), false);
  }
  private final Map<String, ReductionRuleCondition> rrcMethods = new HashMap<String, ReductionRuleCondition>();
  {
    int i = 0;
    rrcMethods.put("6350314785813193860", new RRC(i++));
    rrcMethods.put("39352413653601305", new RRC(i++));
    rrcMethods.put("2621245635008239393", new RRC(i++));
    rrcMethods.put("2621245635008279471", new RRC(i++));
    rrcMethods.put("3489632902472800103", new RRC(i++));
    rrcMethods.put("5352272594417564590", new RRC(i++));
    rrcMethods.put("6779037360575300414", new RRC(i++));
    rrcMethods.put("8821912306507260828", new RRC(i++));
    rrcMethods.put("6779037360575708296", new RRC(i++));
    rrcMethods.put("5352272594417658619", new RRC(i++));
    rrcMethods.put("6779037360575674914", new RRC(i++));
    rrcMethods.put("7547499172383062368", new RRC(i++));
    rrcMethods.put("1387628150972590503", new RRC(i++));
    rrcMethods.put("5352272594417821973", new RRC(i++));
    rrcMethods.put("39352413653656284", new RRC(i++));
    rrcMethods.put("39352413653619012", new RRC(i++));
    rrcMethods.put("39352413653631927", new RRC(i++));
    rrcMethods.put("39352413653640898", new RRC(i++));
    rrcMethods.put("39352413653640928", new RRC(i++));
    rrcMethods.put("8705613676607219008", new RRC(i++));
    rrcMethods.put("8705613676607232176", new RRC(i++));
    rrcMethods.put("8705613676607233896", new RRC(i++));
  }
  @Override
  @NotNull
  public ReductionRuleCondition getReductionRuleCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(rrcMethods.containsKey(id))) {
      return super.getReductionRuleCondition(identity);
    }
    return rrcMethods.get(id);
  }
  private static class RRC implements ReductionRuleCondition {
    private final int methodKey;
    public RRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(ReductionRuleQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_0_0(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_2_0(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_4_0(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_4_1(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_4_2(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_4_3(ctx);
        case 6:
          return QueriesGenerated.rule_Condition_4_4(ctx);
        case 7:
          return QueriesGenerated.rule_Condition_4_5(ctx);
        case 8:
          return QueriesGenerated.rule_Condition_4_6(ctx);
        case 9:
          return QueriesGenerated.rule_Condition_4_7(ctx);
        case 10:
          return QueriesGenerated.rule_Condition_4_8(ctx);
        case 11:
          return QueriesGenerated.rule_Condition_4_9(ctx);
        case 12:
          return QueriesGenerated.rule_Condition_4_10(ctx);
        case 13:
          return QueriesGenerated.rule_Condition_4_11(ctx);
        case 14:
          return QueriesGenerated.rule_Condition_12_0(ctx);
        case 15:
          return QueriesGenerated.rule_Condition_12_1(ctx);
        case 16:
          return QueriesGenerated.rule_Condition_12_2(ctx);
        case 17:
          return QueriesGenerated.rule_Condition_12_3(ctx);
        case 18:
          return QueriesGenerated.rule_Condition_12_4(ctx);
        case 19:
          return QueriesGenerated.rule_Condition_12_5(ctx);
        case 20:
          return QueriesGenerated.rule_Condition_12_6(ctx);
        case 21:
          return QueriesGenerated.rule_Condition_12_7(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("6350314785813416427", new SNQ(i++));
    snqMethods.put("796402062954681175", new SNQ(i++));
    snqMethods.put("3106918138158027489", new SNQ(i++));
    snqMethods.put("3106918138158025585", new SNQ(i++));
    snqMethods.put("2432181455079708305", new SNQ(i++));
    snqMethods.put("1993559260850571982", new SNQ(i++));
    snqMethods.put("3637607142601311586", new SNQ(i++));
    snqMethods.put("3637607142601344495", new SNQ(i++));
    snqMethods.put("974138438733193635", new SNQ(i++));
    snqMethods.put("3489632902471017090", new SNQ(i++));
    snqMethods.put("3489632902471017208", new SNQ(i++));
    snqMethods.put("974138438733194878", new SNQ(i++));
    snqMethods.put("3489632902470842313", new SNQ(i++));
    snqMethods.put("3489632902470842435", new SNQ(i++));
    snqMethods.put("3637607142601066520", new SNQ(i++));
    snqMethods.put("3637607142601104673", new SNQ(i++));
    snqMethods.put("796402062954551471", new SNQ(i++));
    snqMethods.put("796402062954551479", new SNQ(i++));
    snqMethods.put("796402062954551487", new SNQ(i++));
    snqMethods.put("3637607142600937337", new SNQ(i++));
    snqMethods.put("794591792987475323", new SNQ(i++));
    snqMethods.put("3637607142601092848", new SNQ(i++));
    snqMethods.put("3489632902474803802", new SNQ(i++));
    snqMethods.put("2621245635008259409", new SNQ(i++));
    snqMethods.put("2621245635008279503", new SNQ(i++));
    snqMethods.put("3637607142601004093", new SNQ(i++));
    snqMethods.put("3637607142601005552", new SNQ(i++));
    snqMethods.put("5352272594417564606", new SNQ(i++));
    snqMethods.put("6779037360575311269", new SNQ(i++));
    snqMethods.put("8821912306507283719", new SNQ(i++));
    snqMethods.put("6779037360575708312", new SNQ(i++));
    snqMethods.put("5352272594417658635", new SNQ(i++));
    snqMethods.put("3637607142601044712", new SNQ(i++));
    snqMethods.put("8821912306507432803", new SNQ(i++));
    snqMethods.put("7547499172383080757", new SNQ(i++));
    snqMethods.put("3637607142601050958", new SNQ(i++));
    snqMethods.put("3637607142601051475", new SNQ(i++));
    snqMethods.put("3637607142601051582", new SNQ(i++));
    snqMethods.put("3637607142601051689", new SNQ(i++));
    snqMethods.put("3637607142601051798", new SNQ(i++));
    snqMethods.put("3637607142601052317", new SNQ(i++));
    snqMethods.put("8821912306504562030", new SNQ(i++));
    snqMethods.put("8821912306504565339", new SNQ(i++));
    snqMethods.put("5352272594417748925", new SNQ(i++));
    snqMethods.put("8821912306504575817", new SNQ(i++));
    snqMethods.put("9143082258462826488", new SNQ(i++));
    snqMethods.put("911298080284854138", new SNQ(i++));
    snqMethods.put("8821912306504608054", new SNQ(i++));
    snqMethods.put("8821912306504609403", new SNQ(i++));
    snqMethods.put("8821912306504613668", new SNQ(i++));
    snqMethods.put("6539217963580542848", new SNQ(i++));
    snqMethods.put("5269082430053209429", new SNQ(i++));
    snqMethods.put("5269082430051016062", new SNQ(i++));
    snqMethods.put("2621245635010876492", new SNQ(i++));
    snqMethods.put("2621245635010883747", new SNQ(i++));
    snqMethods.put("2432181455079918417", new SNQ(i++));
    snqMethods.put("2432181455079929080", new SNQ(i++));
    snqMethods.put("794591792979526188", new SNQ(i++));
    snqMethods.put("3637607142598908279", new SNQ(i++));
    snqMethods.put("3637607142598962032", new SNQ(i++));
    snqMethods.put("794591792994183018", new SNQ(i++));
    snqMethods.put("39352413653656290", new SNQ(i++));
    snqMethods.put("39352413653656299", new SNQ(i++));
    snqMethods.put("39352413653631383", new SNQ(i++));
    snqMethods.put("39352413653630878", new SNQ(i++));
    snqMethods.put("39352413653631933", new SNQ(i++));
    snqMethods.put("39352413653631942", new SNQ(i++));
    snqMethods.put("39352413653640904", new SNQ(i++));
    snqMethods.put("39352413653646344", new SNQ(i++));
    snqMethods.put("39352413653651753", new SNQ(i++));
    snqMethods.put("39352413653651763", new SNQ(i++));
    snqMethods.put("8705613676607230297", new SNQ(i++));
    snqMethods.put("8705613676607230834", new SNQ(i++));
    snqMethods.put("8705613676607232191", new SNQ(i++));
    snqMethods.put("8705613676607232182", new SNQ(i++));
    snqMethods.put("8705613676607241511", new SNQ(i++));
    snqMethods.put("8705613676607244234", new SNQ(i++));
    snqMethods.put("6350314785813434305", new SNQ(i++));
    snqMethods.put("6350314785813248934", new SNQ(i++));
    snqMethods.put("6350314785813436001", new SNQ(i++));
    snqMethods.put("6350314785813437177", new SNQ(i++));
    snqMethods.put("6350314785813438672", new SNQ(i++));
    snqMethods.put("6350314785813438680", new SNQ(i++));
    snqMethods.put("6350314785813439342", new SNQ(i++));
    snqMethods.put("1993559260843179189", new SNQ(i++));
    snqMethods.put("6350314785813445311", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snqMethods.containsKey(id))) {
      return super.getSourceNodeQuery(identity);
    }
    return snqMethods.get(id);
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_0_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_0_1(ctx);
        case 2:
          return QueriesGenerated.sourceNodeQuery_0_2(ctx);
        case 3:
          return QueriesGenerated.sourceNodeQuery_0_3(ctx);
        case 4:
          return QueriesGenerated.sourceNodeQuery_1_0(ctx);
        case 5:
          return QueriesGenerated.sourceNodeQuery_1_1(ctx);
        case 6:
          return QueriesGenerated.sourceNodeQuery_1_2(ctx);
        case 7:
          return QueriesGenerated.sourceNodeQuery_1_3(ctx);
        case 8:
          return QueriesGenerated.sourceNodeQuery_3_0(ctx);
        case 9:
          return QueriesGenerated.sourceNodeQuery_3_1(ctx);
        case 10:
          return QueriesGenerated.sourceNodeQuery_3_2(ctx);
        case 11:
          return QueriesGenerated.sourceNodeQuery_3_3(ctx);
        case 12:
          return QueriesGenerated.sourceNodeQuery_3_4(ctx);
        case 13:
          return QueriesGenerated.sourceNodeQuery_3_5(ctx);
        case 14:
          return QueriesGenerated.sourceNodeQuery_3_6(ctx);
        case 15:
          return QueriesGenerated.sourceNodeQuery_3_7(ctx);
        case 16:
          return QueriesGenerated.sourceNodeQuery_3_8(ctx);
        case 17:
          return QueriesGenerated.sourceNodeQuery_3_9(ctx);
        case 18:
          return QueriesGenerated.sourceNodeQuery_3_10(ctx);
        case 19:
          return QueriesGenerated.sourceNodeQuery_3_11(ctx);
        case 20:
          return QueriesGenerated.sourceNodeQuery_3_12(ctx);
        case 21:
          return QueriesGenerated.sourceNodeQuery_3_13(ctx);
        case 22:
          return QueriesGenerated.sourceNodeQuery_3_14(ctx);
        case 23:
          return QueriesGenerated.sourceNodeQuery_4_0(ctx);
        case 24:
          return QueriesGenerated.sourceNodeQuery_4_1(ctx);
        case 25:
          return QueriesGenerated.sourceNodeQuery_4_2(ctx);
        case 26:
          return QueriesGenerated.sourceNodeQuery_4_3(ctx);
        case 27:
          return QueriesGenerated.sourceNodeQuery_4_4(ctx);
        case 28:
          return QueriesGenerated.sourceNodeQuery_4_5(ctx);
        case 29:
          return QueriesGenerated.sourceNodeQuery_4_6(ctx);
        case 30:
          return QueriesGenerated.sourceNodeQuery_4_7(ctx);
        case 31:
          return QueriesGenerated.sourceNodeQuery_4_8(ctx);
        case 32:
          return QueriesGenerated.sourceNodeQuery_4_9(ctx);
        case 33:
          return QueriesGenerated.sourceNodeQuery_4_10(ctx);
        case 34:
          return QueriesGenerated.sourceNodeQuery_4_11(ctx);
        case 35:
          return QueriesGenerated.sourceNodeQuery_4_12(ctx);
        case 36:
          return QueriesGenerated.sourceNodeQuery_4_13(ctx);
        case 37:
          return QueriesGenerated.sourceNodeQuery_4_14(ctx);
        case 38:
          return QueriesGenerated.sourceNodeQuery_4_15(ctx);
        case 39:
          return QueriesGenerated.sourceNodeQuery_4_16(ctx);
        case 40:
          return QueriesGenerated.sourceNodeQuery_4_17(ctx);
        case 41:
          return QueriesGenerated.sourceNodeQuery_5_0(ctx);
        case 42:
          return QueriesGenerated.sourceNodeQuery_5_1(ctx);
        case 43:
          return QueriesGenerated.sourceNodeQuery_5_2(ctx);
        case 44:
          return QueriesGenerated.sourceNodeQuery_5_3(ctx);
        case 45:
          return QueriesGenerated.sourceNodeQuery_5_4(ctx);
        case 46:
          return QueriesGenerated.sourceNodeQuery_5_5(ctx);
        case 47:
          return QueriesGenerated.sourceNodeQuery_5_6(ctx);
        case 48:
          return QueriesGenerated.sourceNodeQuery_5_7(ctx);
        case 49:
          return QueriesGenerated.sourceNodeQuery_5_8(ctx);
        case 50:
          return QueriesGenerated.sourceNodeQuery_5_9(ctx);
        case 51:
          return QueriesGenerated.sourceNodeQuery_6_0(ctx);
        case 52:
          return QueriesGenerated.sourceNodeQuery_6_1(ctx);
        case 53:
          return QueriesGenerated.sourceNodeQuery_6_2(ctx);
        case 54:
          return QueriesGenerated.sourceNodeQuery_6_3(ctx);
        case 55:
          return QueriesGenerated.sourceNodeQuery_7_0(ctx);
        case 56:
          return QueriesGenerated.sourceNodeQuery_7_1(ctx);
        case 57:
          return QueriesGenerated.sourceNodeQuery_7_2(ctx);
        case 58:
          return QueriesGenerated.sourceNodeQuery_7_3(ctx);
        case 59:
          return QueriesGenerated.sourceNodeQuery_7_4(ctx);
        case 60:
          return QueriesGenerated.sourceNodeQuery_9_0(ctx);
        case 61:
          return QueriesGenerated.sourceNodeQuery_12_0(ctx);
        case 62:
          return QueriesGenerated.sourceNodeQuery_12_1(ctx);
        case 63:
          return QueriesGenerated.sourceNodeQuery_12_2(ctx);
        case 64:
          return QueriesGenerated.sourceNodeQuery_12_3(ctx);
        case 65:
          return QueriesGenerated.sourceNodeQuery_12_4(ctx);
        case 66:
          return QueriesGenerated.sourceNodeQuery_12_5(ctx);
        case 67:
          return QueriesGenerated.sourceNodeQuery_12_6(ctx);
        case 68:
          return QueriesGenerated.sourceNodeQuery_12_7(ctx);
        case 69:
          return QueriesGenerated.sourceNodeQuery_12_8(ctx);
        case 70:
          return QueriesGenerated.sourceNodeQuery_12_9(ctx);
        case 71:
          return QueriesGenerated.sourceNodeQuery_12_10(ctx);
        case 72:
          return QueriesGenerated.sourceNodeQuery_12_11(ctx);
        case 73:
          return QueriesGenerated.sourceNodeQuery_12_12(ctx);
        case 74:
          return QueriesGenerated.sourceNodeQuery_12_13(ctx);
        case 75:
          return QueriesGenerated.sourceNodeQuery_12_14(ctx);
        case 76:
          return QueriesGenerated.sourceNodeQuery_12_15(ctx);
        case 77:
          return QueriesGenerated.sourceNodeQuery_14_0(ctx);
        case 78:
          return QueriesGenerated.sourceNodeQuery_14_1(ctx);
        case 79:
          return QueriesGenerated.sourceNodeQuery_14_2(ctx);
        case 80:
          return QueriesGenerated.sourceNodeQuery_14_3(ctx);
        case 81:
          return QueriesGenerated.sourceNodeQuery_14_4(ctx);
        case 82:
          return QueriesGenerated.sourceNodeQuery_14_5(ctx);
        case 83:
          return QueriesGenerated.sourceNodeQuery_14_6(ctx);
        case 84:
          return QueriesGenerated.sourceNodeQuery_14_7(ctx);
        case 85:
          return QueriesGenerated.sourceNodeQuery_14_8(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("1993559260842747112", new SNsQ(i++));
    snsqMethods.put("1993559260839672757", new SNsQ(i++));
    snsqMethods.put("1139474844808513499", new SNsQ(i++));
    snsqMethods.put("1139474844808355480", new SNsQ(i++));
    snsqMethods.put("1139474844808523189", new SNsQ(i++));
    snsqMethods.put("1139474844808532502", new SNsQ(i++));
    snsqMethods.put("1139474844808990924", new SNsQ(i++));
    snsqMethods.put("1159415042436121908", new SNsQ(i++));
    snsqMethods.put("794591792979526306", new SNsQ(i++));
    snsqMethods.put("794591792979540953", new SNsQ(i++));
    snsqMethods.put("1159415042436102010", new SNsQ(i++));
    snsqMethods.put("1139474844808691482", new SNsQ(i++));
    snsqMethods.put("6350314785813140273", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snsqMethods.containsKey(id))) {
      return super.getSourceNodesQuery(identity);
    }
    return snsqMethods.get(id);
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_1(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_0(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_1(ctx));
        case 4:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_2(ctx));
        case 5:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_3(ctx));
        case 6:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_4(ctx));
        case 7:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_5(ctx));
        case 8:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_6(ctx));
        case 9:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_7(ctx));
        case 10:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_8_0(ctx));
        case 11:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_8_1(ctx));
        case 12:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_13_0(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("232455383967093342", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_Simulation"));
    pvqMethods.put("5369611234114072238", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "a"));
    pvqMethods.put("9143082258456499038", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("794591792982388764", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "someIncludedWorld"));
    pvqMethods.put("1139474844808524577", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "somePlanet"));
    pvqMethods.put("5369611234117106627", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "entity"));
    pvqMethods.put("794591792979526150", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "internalMap_ObjectDefinition"));
    pvqMethods.put("794591792979526176", new PVQ(i++, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value"), "theObject"));
    pvqMethods.put("794591792979526250", new PVQ(i++, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value"), "it"));
    pvqMethods.put("1139474844808515773", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_WorldDefinition"));
    pvqMethods.put("794591792981181090", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_AbstractObjectDefinition"));
    pvqMethods.put("1159415042436058384", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "in a good shape"));
    pvqMethods.put("794591792994176130", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("794591792994179962", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "10"));
    pvqMethods.put("794591792994182807", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "20"));
    pvqMethods.put("6350314785813158423", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_SimulationAlternativeView"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(pvqMethods.containsKey(id))) {
      return super.getPropertyValueQuery(identity);
    }
    return pvqMethods.get(id);
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_5_0(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_6_0(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_7_0(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_7_1(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_7_2(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_7_3(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_7_4(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_7_5(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_7_6(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_8_0(ctx);
        case 11:
          return QueriesGenerated.propertyMacro_GetValue_9_0(ctx);
        case 12:
          return QueriesGenerated.propertyMacro_GetValue_9_1(ctx);
        case 13:
          return QueriesGenerated.propertyMacro_GetValue_9_2(ctx);
        case 14:
          return QueriesGenerated.propertyMacro_GetValue_9_3(ctx);
        case 15:
          return QueriesGenerated.propertyMacro_GetValue_13_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, IfMacroCondition> imcMethods = new HashMap<String, IfMacroCondition>();
  {
    int i = 0;
    imcMethods.put("1993559260854165812", new IfMC(i++));
    imcMethods.put("3637607142601312795", new IfMC(i++));
    imcMethods.put("3637607142601345720", new IfMC(i++));
    imcMethods.put("1139474844813327822", new IfMC(i++));
    imcMethods.put("9143082258456547687", new IfMC(i++));
    imcMethods.put("9143082258456558230", new IfMC(i++));
    imcMethods.put("8705613676614150591", new IfMC(i++));
    imcMethods.put("8705613676614150625", new IfMC(i++));
    imcMethods.put("8705613676614150659", new IfMC(i++));
    imcMethods.put("8705613676614150680", new IfMC(i++));
    imcMethods.put("2432181455079980394", new IfMC(i++));
    imcMethods.put("794591792979526129", new IfMC(i++));
    imcMethods.put("794591792979526228", new IfMC(i++));
    imcMethods.put("1159415042431301803", new IfMC(i++));
    imcMethods.put("1139474844808951316", new IfMC(i++));
  }
  @NotNull
  @Override
  public IfMacroCondition getIfMacroCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(imcMethods.containsKey(id))) {
      return super.getIfMacroCondition(identity);
    }
    return imcMethods.get(id);
  }
  private static class IfMC implements IfMacroCondition {
    private final int methodKey;
    public IfMC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull IfMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_1_0(ctx);
        case 1:
          return QueriesGenerated.ifMacro_Condition_1_1(ctx);
        case 2:
          return QueriesGenerated.ifMacro_Condition_1_2(ctx);
        case 3:
          return QueriesGenerated.ifMacro_Condition_3_0(ctx);
        case 4:
          return QueriesGenerated.ifMacro_Condition_6_0(ctx);
        case 5:
          return QueriesGenerated.ifMacro_Condition_6_1(ctx);
        case 6:
          return QueriesGenerated.ifMacro_Condition_6_2(ctx);
        case 7:
          return QueriesGenerated.ifMacro_Condition_6_3(ctx);
        case 8:
          return QueriesGenerated.ifMacro_Condition_6_4(ctx);
        case 9:
          return QueriesGenerated.ifMacro_Condition_6_5(ctx);
        case 10:
          return QueriesGenerated.ifMacro_Condition_7_0(ctx);
        case 11:
          return QueriesGenerated.ifMacro_Condition_7_1(ctx);
        case 12:
          return QueriesGenerated.ifMacro_Condition_7_2(ctx);
        case 13:
          return QueriesGenerated.ifMacro_Condition_7_3(ctx);
        case 14:
          return QueriesGenerated.ifMacro_Condition_8_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for if macro %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, InlineSwitchCaseCondition> isccMethods = new HashMap<String, InlineSwitchCaseCondition>();
  {
    int i = 0;
    isccMethods.put("3489632902472426605", new ISCC(i++));
    isccMethods.put("3489632902471437824", new ISCC(i++));
    isccMethods.put("3489632902472427867", new ISCC(i++));
    isccMethods.put("3489632902472428162", new ISCC(i++));
    isccMethods.put("3489632902472429241", new ISCC(i++));
    isccMethods.put("3489632902472429980", new ISCC(i++));
    isccMethods.put("7400250159182917548", new ISCC(i++));
    isccMethods.put("7400250159182914193", new ISCC(i++));
    isccMethods.put("7400250159182918182", new ISCC(i++));
    isccMethods.put("7400250159182918794", new ISCC(i++));
    isccMethods.put("7400250159183730633", new ISCC(i++));
  }
  @NotNull
  @Override
  public InlineSwitchCaseCondition getInlineSwitchCaseCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(isccMethods.containsKey(id))) {
      return super.getInlineSwitchCaseCondition(identity);
    }
    return isccMethods.get(id);
  }
  private static class ISCC implements InlineSwitchCaseCondition {
    private final int methodKey;
    public ISCC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull InlineSwitchCaseContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_4_12(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_4_13(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_4_14(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_4_15(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_4_16(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_4_17(ctx);
        case 6:
          return QueriesGenerated.rule_Condition_9_0(ctx);
        case 7:
          return QueriesGenerated.rule_Condition_9_1(ctx);
        case 8:
          return QueriesGenerated.rule_Condition_9_2(ctx);
        case 9:
          return QueriesGenerated.rule_Condition_9_3(ctx);
        case 10:
          return QueriesGenerated.rule_Condition_9_4(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for inline switch's case %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ReferenceTargetQuery> rtqMethods = new HashMap<String, ReferenceTargetQuery>();
  {
    rtqMethods.put("7547499172384205863", new RTQ(0, "map_WorldDefinition"));
    rtqMethods.put("7547499172384135682", new RTQ(1, "map_WorldDefinition"));
    rtqMethods.put("5269082430053177695", new RTQ(2, "cached"));
    rtqMethods.put("794591792981202997", new RTQ(3, "somePlanet"));
    rtqMethods.put("7547499172383093417", new RTQ(4, "somePlanet"));
    rtqMethods.put("8705613676614150575", new RTQ(5, "SystemScope"));
    rtqMethods.put("8705613676614150609", new RTQ(6, "SystemScope"));
    rtqMethods.put("8705613676614150643", new RTQ(7, "SystemScope"));
    rtqMethods.put("7547499172384231532", new RTQ(8, "map_WorldDefinition"));
    rtqMethods.put("1139474844808573641", new RTQ(9, "map_WorldDefinition"));
    rtqMethods.put("794591792979526117", new RTQ(10, "PhysicalEntity"));
    rtqMethods.put("1139474844808951304", new RTQ(11, "PhysicalEntity"));
    rtqMethods.put("6350314785818129886", new RTQ(12, "map_Simulation"));
  }
  @NotNull
  @Override
  public ReferenceTargetQuery getReferenceTargetQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(rtqMethods.containsKey(id))) {
      return super.getReferenceTargetQuery(queryKey);
    }
    return rtqMethods.get(id);
  }
  private static class RTQ extends ReferenceTargetQuery.Base {
    private final int methodKey;
    /*package*/ RTQ(int methodKey, String templateValue) {
      super(templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull ReferenceMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.referenceMacro_GetReferent_1_0(ctx);
        case 1:
          return QueriesGenerated.referenceMacro_GetReferent_1_1(ctx);
        case 2:
          return QueriesGenerated.referenceMacro_GetReferent_2_0(ctx);
        case 3:
          return QueriesGenerated.referenceMacro_GetReferent_2_1(ctx);
        case 4:
          return QueriesGenerated.referenceMacro_GetReferent_4_0(ctx);
        case 5:
          return QueriesGenerated.referenceMacro_GetReferent_6_0(ctx);
        case 6:
          return QueriesGenerated.referenceMacro_GetReferent_6_1(ctx);
        case 7:
          return QueriesGenerated.referenceMacro_GetReferent_6_2(ctx);
        case 8:
          return QueriesGenerated.referenceMacro_GetReferent_7_0(ctx);
        case 9:
          return QueriesGenerated.referenceMacro_GetReferent_7_1(ctx);
        case 10:
          return QueriesGenerated.referenceMacro_GetReferent_7_2(ctx);
        case 11:
          return QueriesGenerated.referenceMacro_GetReferent_8_0(ctx);
        case 12:
          return QueriesGenerated.referenceMacro_GetReferent_13_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, CallArgumentQuery> caqMethods = new HashMap<String, CallArgumentQuery>();
  {
    caqMethods.put("6350314785813425832", new CAQ(0));
    caqMethods.put("6350314785813419601", new CAQ(1));
  }
  @NotNull
  @Override
  public CallArgumentQuery getTemplateCallArgumentQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(caqMethods.containsKey(id))) {
      return super.getTemplateCallArgumentQuery(queryKey);
    }
    return caqMethods.get(id);
  }
  private static class CAQ implements CallArgumentQuery {
    private final int methodKey;
    /*package*/ CAQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull TemplateArgumentContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.templateArgumentQuery_0_0(ctx);
        case 1:
          return QueriesGenerated.templateArgumentQuery_0_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, InsertMacroQuery> imqMethods = new HashMap<String, InsertMacroQuery>();
  {
    imqMethods.put("1387628150972583196", new IMQ(0));
    imqMethods.put("1387628150972590530", new IMQ(1));
  }
  @NotNull
  @Override
  public InsertMacroQuery getInsertMacroQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(imqMethods.containsKey(id))) {
      return super.getInsertMacroQuery(queryKey);
    }
    return imqMethods.get(id);
  }
  private static class IMQ implements InsertMacroQuery {
    private final int methodKey;
    /*package*/ IMQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull InsertMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.insertMacro_Query_2_0(ctx);
        case 1:
          return QueriesGenerated.insertMacro_Query_4_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0c() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0c_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a62() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a72() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a82() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0db() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0db_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0eb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0eb_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0fb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0fb_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0gb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0gb_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0hb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x583g4_b0a0a0hb_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = new SNodeBuilder(null, null).init(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3e9841eb1da4548L, 0x9cb814aebaf1d1caL, "jetbrains.mps.samples.Physics.types"), 0x6520d39c950a1448L, "DirectionType")).getResult();
    return quotedNode_1;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink target$_Vc0 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3238375e772f9fedL, 0x3238375e772f9feeL, "target");
    /*package*/ static final SContainmentLink left$gQj0 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L, 0x46ff3b3d86c99c16L, "left");
    /*package*/ static final SContainmentLink right$gQu9 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L, 0x46ff3b3d86c99c18L, "right");
    /*package*/ static final SContainmentLink target$NL8Z = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L, 0x7cef88020a0f424bL, "target");
    /*package*/ static final SContainmentLink world$qRPN = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, 0x3cd406ea6def9f02L, "world");
    /*package*/ static final SReferenceLink target$12L0 = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x5d5cbb75843c860L, 0x5d5cbb75843c861L, "target");
    /*package*/ static final SReferenceLink target$EWj0 = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba5bL, 0x6b7f605cb32fba5cL, "target");
    /*package*/ static final SReferenceLink target$g02E = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x22ff7dd8e3878c9cL, 0x22ff7dd8e38793cbL, "target");
    /*package*/ static final SContainmentLink world$ZN60 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df343a0L, 0x3cd406ea6df343a1L, "world");
    /*package*/ static final SContainmentLink parent$OiBt = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e43L, 0x1441545e2a5b1e47L, "parent");
    /*package*/ static final SReferenceLink target$OiAw = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e44L, 0x1441545e2a5b1e45L, "target");
    /*package*/ static final SContainmentLink simulationScale$eVy5 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, 0x1baa8b95dda3ac89L, "simulationScale");
    /*package*/ static final SContainmentLink cameraPosition$_PZQ = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, 0x55d23bae7b62a2a7L, "cameraPosition");
    /*package*/ static final SContainmentLink focus$_WjO = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, 0x55d23bae7b62a2e0L, "focus");
    /*package*/ static final SContainmentLink velocity$DoVv = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df3fe05L, 0x3cd406ea6df3fe07L, "velocity");
    /*package*/ static final SContainmentLink expression$87ts = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xb0d6374ec7f738eL, 0xb0d6374ec7f7393L, "expression");
    /*package*/ static final SContainmentLink key$4rdb = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x101711d69774a425L, 0x2b1dfd95e2c4124fL, "key");
    /*package*/ static final SContainmentLink value$4y25 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x101711d69774a425L, 0x2b1dfd95e2c412a2L, "value");
    /*package*/ static final SContainmentLink simulationSpeed$m7cv = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, 0x21c0d825ab3fd1e0L, "simulationSpeed");
    /*package*/ static final SContainmentLink dx$VpuT = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa8bL, 0x1441545e2a580637L, "dx");
    /*package*/ static final SContainmentLink dy$VWrJ = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa8bL, 0x1441545e2a5807eeL, "dy");
    /*package*/ static final SContainmentLink dz$VWBn = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa8bL, 0x1441545e2a5807f1L, "dz");
    /*package*/ static final SContainmentLink theta$xDa9 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa8fL, 0x629c7a5121af2578L, "theta");
    /*package*/ static final SContainmentLink phi$xD9b = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa8fL, 0x629c7a5121af2576L, "phi");
    /*package*/ static final SContainmentLink distance$xDc5 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa8fL, 0x629c7a5121af257cL, "distance");
    /*package*/ static final SContainmentLink coordinates$l1nt = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa6bL, 0x1918a6b053ddd35aL, "coordinates");
    /*package*/ static final SContainmentLink relativeFrom$gwcw = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x584bed834752fa6bL, 0x584bed834752fa6cL, "relativeFrom");
    /*package*/ static final SContainmentLink axialDistance$ip5F = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xb0d6374ec996951L, 0xb0d6374ec996952L, "axialDistance");
    /*package*/ static final SContainmentLink phi$ip6D = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xb0d6374ec996951L, 0xb0d6374ec996954L, "phi");
    /*package*/ static final SContainmentLink height$ip86 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xb0d6374ec996951L, 0xb0d6374ec996957L, "height");
    /*package*/ static final SContainmentLink direction$2h5b = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6d74ae1e883a4471L, 0x6d74ae1e883a4472L, "direction");
    /*package*/ static final SContainmentLink length$2h69 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6d74ae1e883a4471L, 0x6d74ae1e883a4474L, "length");
    /*package*/ static final SContainmentLink expr$xFwa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L, 0x46ff3b3d86cd0f6bL, "expr");
    /*package*/ static final SContainmentLink target$oizF = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x339d8f0ab560d03L, 0x339d8f0ab560d04L, "target");
    /*package*/ static final SContainmentLink newLength$Gnlv = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x306daaa2cbe24f94L, 0x306daaa2cbe24f96L, "newLength");
    /*package*/ static final SContainmentLink numerator$mY30 = MetaAdapterFactory.getContainmentLink(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9bcd46L, 0x449e19d04e9bcd47L, "numerator");
    /*package*/ static final SContainmentLink denominator$mY4t = MetaAdapterFactory.getContainmentLink(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9bcd46L, 0x449e19d04e9bcd4aL, "denominator");
    /*package*/ static final SContainmentLink expr$xkR7 = MetaAdapterFactory.getContainmentLink(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9c6144L, 0x449e19d04e9cdee2L, "expr");
    /*package*/ static final SContainmentLink exponent$ZOgM = MetaAdapterFactory.getContainmentLink(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9c6144L, 0x46c15b39e5605f2fL, "exponent");
    /*package*/ static final SContainmentLink expr$y7Am = MetaAdapterFactory.getContainmentLink(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9c8de8L, 0x449e19d04e9c9e3cL, "expr");
    /*package*/ static final SContainmentLink upper$Bhku = MetaAdapterFactory.getContainmentLink(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9be6f0L, 0xd7c3339c4eec93fL, "upper");
    /*package*/ static final SContainmentLink lower$No2S = MetaAdapterFactory.getContainmentLink(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9be6f0L, 0xd7c3339c4f027e5L, "lower");
    /*package*/ static final SContainmentLink body$Bhy2 = MetaAdapterFactory.getContainmentLink(0x6fadc44e69c24a4aL, 0x9d167ebf5f8d3ba0L, 0x449e19d04e9be6f0L, 0xd7c3339c4eec946L, "body");
    /*package*/ static final SContainmentLink expression$tVRI = MetaAdapterFactory.getContainmentLink(0xf9bdc72399df40ffL, 0x934cd1f848158f92L, 0x5abff817741099d3L, 0x5abff81774111c3aL, "expression");
    /*package*/ static final SContainmentLink position$DoV0 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3cd406ea6df3fe05L, 0x3cd406ea6df3fe06L, "position");
    /*package*/ static final SContainmentLink mass$9nTx = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3278f43L, 0x1be152c1502448ffL, "mass");
    /*package*/ static final SReferenceLink color$x_mI = MetaAdapterFactory.getReferenceLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e65L, 0xb06f5069ab75031L, "color");
    /*package*/ static final SContainmentLink definition$PSSt = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0xb06f5069ab7502eL, 0xb06f5069abcb0c9L, "definition");
    /*package*/ static final SContainmentLink styleKey$ANGW = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x29b2190b93c8e27bL, 0x29b2190b93c8e280L, "styleKey");
    /*package*/ static final SContainmentLink newValue$_Vn9 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3238375e772f9fedL, 0x3238375e772f9ff0L, "newValue");
    /*package*/ static final SContainmentLink overrideRules$taI3 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x5820d9a6fbf7a539L, 0x3238375e772fa01bL, "overrideRules");
    /*package*/ static final SContainmentLink views$nE$z = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, 0x5820d9a6fbf7a533L, "views");
    /*package*/ static final SContainmentLink includes$hLn0 = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3278f40L, 0x3cd406ea6df3437dL, "includes");
    /*package*/ static final SContainmentLink objects$ZjAV = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3278f40L, 0x6b7f605cb3278f46L, "objects");
    /*package*/ static final SContainmentLink styles$W8dv = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e43L, 0x101711d69793d8a9L, "styles");
    /*package*/ static final SContainmentLink forces$OiCr = MetaAdapterFactory.getContainmentLink(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x1441545e2a5b1e43L, 0x1441545e2a5b1e49L, "forces");
    /*package*/ static final SContainmentLink content$Gf5w = MetaAdapterFactory.getContainmentLink(0x3571bff8cf914cd7L, 0xb8b7baa06abadf7cL, 0x777af24c045ea226L, 0x777af24c045ea227L, "content");
    /*package*/ static final SContainmentLink units$o6Ow = MetaAdapterFactory.getContainmentLink(0x3571bff8cf914cd7L, 0xb8b7baa06abadf7cL, 0x777af24c04661544L, 0x777af24c04661545L, "units");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DotExpression$Af = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L, "org.iets3.core.expr.base.structure.DotExpression");
    /*package*/ static final SConcept ForceComponentsTarget$W$ = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x78d08d83b98a73b5L, "jetbrains.mps.samples.Physics.structure.ForceComponentsTarget");
    /*package*/ static final SConcept ForceApplicationPointTarget$GC = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x78d08d83b98a8e76L, "jetbrains.mps.samples.Physics.structure.ForceApplicationPointTarget");
    /*package*/ static final SConcept ObjectDistanceWithTarget$OH = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x339d8f0ab560d03L, "jetbrains.mps.samples.Physics.structure.ObjectDistanceWithTarget");
    /*package*/ static final SConcept ObjectMassTarget$_T = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c95047fcaL, "jetbrains.mps.samples.Physics.structure.ObjectMassTarget");
    /*package*/ static final SConcept ObjectPositionTarget$we = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c9504a71bL, "jetbrains.mps.samples.Physics.structure.ObjectPositionTarget");
    /*package*/ static final SConcept ObjectVelocityTarget$a7 = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x4a4717912b4b2f7eL, "jetbrains.mps.samples.Physics.structure.ObjectVelocityTarget");
    /*package*/ static final SConcept WorldMassCenterTarget$Mg = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c9504a750L, "jetbrains.mps.samples.Physics.structure.WorldMassCenterTarget");
    /*package*/ static final SConcept VectorOppositeTarget$Ac = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x339d8f0ab6a0bccL, "jetbrains.mps.samples.Physics.structure.VectorOppositeTarget");
    /*package*/ static final SConcept VectorResizeTarget$Am = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x306daaa2cbe24f94L, "jetbrains.mps.samples.Physics.structure.VectorResizeTarget");
    /*package*/ static final SConcept WorldNestedObjectTarget$p3 = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x22ff7dd8e3878c9cL, "jetbrains.mps.samples.Physics.structure.WorldNestedObjectTarget");
    /*package*/ static final SConcept UseUnitExpressionAs$IL = MetaAdapterFactory.getConcept(0x3571bff8cf914cd7L, 0xb8b7baa06abadf7cL, 0x4ccf67b099145cc6L, "jetbrains.mps.samples.Physics.dimensions.structure.UseUnitExpressionAs");
    /*package*/ static final SConcept VectorComponentTarget$ME = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c9504b3d7L, "jetbrains.mps.samples.Physics.structure.VectorComponentTarget");
    /*package*/ static final SInterfaceConcept INamedConcept$nV = MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept");
    /*package*/ static final SConcept Classifier$hJ = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier");
    /*package*/ static final SConcept WorldDefinition$Xn = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb3278f40L, "jetbrains.mps.samples.Physics.structure.WorldDefinition");
    /*package*/ static final SConcept Simulation$oX = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6b7f605cb32fba58L, "jetbrains.mps.samples.Physics.structure.Simulation");
    /*package*/ static final SConcept AbstractForce$Pj = MetaAdapterFactory.getConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x3126c7c72470af86L, "jetbrains.mps.samples.Physics.structure.AbstractForce");
    /*package*/ static final SInterfaceConcept IForceWithCache$ie = MetaAdapterFactory.getInterfaceConcept(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x491f8a8da749c297L, "jetbrains.mps.samples.Physics.structure.IForceWithCache");
  }

  private static final class PROPS {
    /*package*/ static final SProperty component$_d4D = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x6520d39c9504b3d7L, 0x6520d39c9504b3fbL, "component");
    /*package*/ static final SProperty reaction$_ldw = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x2b1dfd95e2d94529L, 0x2b1dfd95e2d9452aL, "reaction");
    /*package*/ static final SProperty exponent$9cvW = MetaAdapterFactory.getProperty(0xf9bdc72399df40ffL, 0x934cd1f848158f92L, 0x5abff817741099d3L, 0x4a2d0770b38f4fa2L, "exponent");
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty shape$2xnw = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x2b1dfd95e2ddf664L, 0x2b1dfd95e2ddf665L, "shape");
    /*package*/ static final SProperty red$EIY = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x14f63a14438863e1L, 0x14f63a14438863e4L, "red");
    /*package*/ static final SProperty green$ELp = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x14f63a14438863e1L, 0x14f63a14438863e9L, "green");
    /*package*/ static final SProperty blue$EJW = MetaAdapterFactory.getProperty(0xbe81eb124eda4d0eL, 0x89be7493500ab874L, 0x14f63a14438863e1L, 0x14f63a14438863e6L, "blue");
  }
}
