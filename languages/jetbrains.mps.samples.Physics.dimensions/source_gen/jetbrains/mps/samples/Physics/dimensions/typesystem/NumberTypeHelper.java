package jetbrains.mps.samples.Physics.dimensions.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.math.BigDecimal;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.samples.Physics.dimensions.behavior.UnitReduceHelper;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class NumberTypeHelper {

  /**
   * Return true if the given type match a zero value
   */
  public static boolean isZero(SNode type) {
    {
      final SNode number = type;
      if (SNodeOperations.isInstanceOf(number, CONCEPTS.NumberType$n)) {
        if ((SLinkOperations.getTarget(number, LINKS.range$RnOa) != null)) {
          BigDecimal min = new BigDecimal(SPropertyOperations.getString(SLinkOperations.getTarget(number, LINKS.range$RnOa), PROPS.min$7OOG));
          BigDecimal max = new BigDecimal(SPropertyOperations.getString(SLinkOperations.getTarget(number, LINKS.range$RnOa), PROPS.max$7P3H));

          return min.compareTo(max) == 0 && min.compareTo(BigDecimal.ZERO) == 0;
        }

      }
    }

    return false;
  }


  /**
   * Return true if the given type match a zero value, consider the dimension base type
   */
  public static boolean isBaseTypeZero(SNode type) {
    {
      final SNode dim = type;
      if (SNodeOperations.isInstanceOf(dim, CONCEPTS.DimensionType$8R)) {
        return isZero(SLinkOperations.getTarget(dim, LINKS.baseType$mnRO));
      }
    }
    return isZero(type);
  }

  /**
   * Compute approximate numeric type for given numeric types
   * 
   * If all number types have 0 as range, return a number type of range 0,
   * otherwise, return real type (stripping number metadata).
   * 
   * For single numbers, return themselves
   */
  public static SNode approximate(Iterable<SNode> types) {
    if (Sequence.fromIterable(types).count() == 1 || (Sequence.fromIterable(types).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return isZero(it);
      }
    }) && Sequence.fromIterable(types).count() > 0)) {
      return SNodeOperations.as(Sequence.fromIterable(types).first(), CONCEPTS.Type$WK);
    } else {
      return createRealType_nobf8o_a0a0a0g();
    }
  }


  /**
   * Compute resulting dimension type if any, with approximate base number type
   */
  public static SNode approximateToDimensions(SNode... types) {
    final Wrappers._T<Iterable<SNode>> units = new Wrappers._T<Iterable<SNode>>(null);

    // Extract number types (and dimensions if any)
    Iterable<SNode> seq = Sequence.fromIterable(Sequence.fromArray(types)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        {
          final SNode dimension = it;
          if (SNodeOperations.isInstanceOf(dimension, CONCEPTS.DimensionType$8R)) {
            // Take the first one, no compatibility checking between dimension is done
            if (units.value == null) {
              units.value = UnitReduceHelper.reduceUnitsToReferences(SLinkOperations.getChildren(dimension, LINKS.units$qq1O));
            }
            return SLinkOperations.getTarget(dimension, LINKS.baseType$mnRO);
          }
        }

        return it;
      }
    });

    // Compute base type from extracted number types
    SNode baseType = approximate(Sequence.fromIterable(seq).toListSequence());

    return (units.value != null ? createDimensionType_nobf8o_a0i0j(baseType, units.value) : baseType);
  }
  private static SNode createRealType_nobf8o_a0a0a0g() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RealType$36);
    return n0.getResult();
  }
  private static SNode createDimensionType_nobf8o_a0i0j(SNode p0, Iterable<? extends SNode> p1) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DimensionType$8R);
    n0.forChild(LINKS.baseType$mnRO).initNode(p0, CONCEPTS.Type$WK, true);
    n0.forChild(LINKS.units$qq1O).initNodeList(p1, CONCEPTS.DimensionReference$6u);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept NumberType$n = MetaAdapterFactory.getConcept(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x7211e50064d40ea8L, "org.iets3.core.expr.simpleTypes.structure.NumberType");
    /*package*/ static final SConcept DimensionType$8R = MetaAdapterFactory.getConcept(0x3571bff8cf914cd7L, 0xb8b7baa06abadf7cL, 0x777af24c04609bcaL, "jetbrains.mps.samples.Physics.dimensions.structure.DimensionType");
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
    /*package*/ static final SConcept RealType$36 = MetaAdapterFactory.getConcept(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x46ff3b3d86d0e74cL, "org.iets3.core.expr.simpleTypes.structure.RealType");
    /*package*/ static final SConcept DimensionReference$6u = MetaAdapterFactory.getConcept(0x3571bff8cf914cd7L, 0xb8b7baa06abadf7cL, 0x2c25ac8bca7e6b7cL, "jetbrains.mps.samples.Physics.dimensions.structure.DimensionReference");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink range$RnOa = MetaAdapterFactory.getContainmentLink(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x7211e50064d40ea8L, 0x127541598201af78L, "range");
    /*package*/ static final SContainmentLink baseType$mnRO = MetaAdapterFactory.getContainmentLink(0x3571bff8cf914cd7L, 0xb8b7baa06abadf7cL, 0x777af24c04609bcaL, 0x777af24c04609bcbL, "baseType");
    /*package*/ static final SContainmentLink units$qq1O = MetaAdapterFactory.getContainmentLink(0x3571bff8cf914cd7L, 0xb8b7baa06abadf7cL, 0x777af24c04661544L, 0x777af24c04661545L, "units");
  }

  private static final class PROPS {
    /*package*/ static final SProperty min$7OOG = MetaAdapterFactory.getProperty(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x127541598201af65L, 0x127541598201af6fL, "min");
    /*package*/ static final SProperty max$7P3H = MetaAdapterFactory.getProperty(0x6b277d9ad52d416fL, 0xa2091919bd737f50L, 0x127541598201af65L, 0x127541598201af70L, "max");
  }
}
